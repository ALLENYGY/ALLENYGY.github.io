<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[NOTE]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://blog.allenygy.vip/</link><image><url>https://blog.allenygy.vip/lib/media/favicon.png</url><title>NOTE</title><link>https://blog.allenygy.vip/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 25 Jun 2024 07:46:28 GMT</lastBuildDate><atom:link href="https://blog.allenygy.vip/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 25 Jun 2024 07:45:39 GMT</pubDate><copyright><![CDATA[AllenYGY]]></copyright><ttl>60</ttl><dc:creator>AllenYGY</dc:creator><item><title><![CDATA[Home]]></title><description><![CDATA[ 
 <br><br><br><br>使用 Obsidian 272 天，共创建 269 篇笔记、156 个标签、58个待办。 <br><br>MonWedFriJanFebMarAprMayJunlessmore<br>
<br>Focus

<br><a data-href="Algorithm" href="https://blog.allenygy.vip/algorithm/algorithm.html" class="internal-link" target="_self" rel="noopener">Algorithm</a>
<br><a data-href="DeepLearning" href="https://blog.allenygy.vip/deeplearning/deeplearning.html" class="internal-link" target="_self" rel="noopener">DeepLearning</a>


<br>NOTE

<br><a data-href="Computer-Organization" href="https://blog.allenygy.vip/computer-organization/computer-organization.html" class="internal-link" target="_self" rel="noopener">Computer-Organization</a>
<br><a data-href="Computer-Network" href="https://blog.allenygy.vip/computer-network/computer-network.html" class="internal-link" target="_self" rel="noopener">Computer-Network</a>
<br><a data-href="Operating-System" href="https://blog.allenygy.vip/operatingsystem/operating-system.html" class="internal-link" target="_self" rel="noopener">Operating-System</a>
<br><a data-href="Database-Management" href="https://blog.allenygy.vip/database-management/database-management.html" class="internal-link" target="_self" rel="noopener">Database-Management</a>


<br>WORK

<br><a data-href="Archive" href="https://blog.allenygy.vip/archive.html" class="internal-link" target="_self" rel="noopener"><span class="iconize-icon-in-link" title="IbArchive" aria-label="IbArchive" data-icon="IbArchive" aria-hidden="true"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4 9v8c0 1.886 0 2.828.586 3.414C5.172 21 6.114 21 8 21h8c1.886 0 2.828 0 3.414-.586C20 19.828 20 18.886 20 17V9M6 9h12c.932 0 1.398 0 1.765-.152a2 2 0 0 0 1.083-1.083C21 7.398 21 6.932 21 6c0-.932 0-1.398-.152-1.765a2 2 0 0 0-1.083-1.083C19.398 3 18.932 3 18 3H6c-.932 0-1.398 0-1.765.152a2 2 0 0 0-1.083 1.083C3 4.602 3 5.068 3 6c0 .932 0 1.398.152 1.765a2 2 0 0 0 1.083 1.083C4.602 9 5.068 9 6 9zm3 4h6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg></span>Archive</a>
<br><a data-href="Class" href="https://blog.allenygy.vip/class.html" class="internal-link" target="_self" rel="noopener"><span class="iconize-icon-in-link" title="FabBattleNet" aria-label="FabBattleNet" data-icon="FabBattleNet" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M448.61 225.62c26.87.18 35.57-7.43 38.92-12.37 12.47-16.32-7.06-47.6-52.85-71.33 17.76-33.58 30.11-63.68 36.34-85.3 3.38-11.83 1.09-19 .45-20.25-1.72 10.52-15.85 48.46-48.2 100.05-25-11.22-56.52-20.1-93.77-23.8-8.94-16.94-34.88-63.86-60.48-88.93C252.18 7.14 238.7 1.07 228.18.22h-.05c-13.83-1.55-22.67 5.85-27.4 11-17.2 18.53-24.33 48.87-25 84.07-7.24-12.35-17.17-24.63-28.5-25.93h-.18c-20.66-3.48-38.39 29.22-36 81.29-38.36 1.38-71 5.75-93 11.23-9.9 2.45-16.22 7.27-17.76 9.72 1-.38 22.4-9.22 111.56-9.22 5.22 53 29.75 101.82 26 93.19-9.73 15.4-38.24 62.36-47.31 97.7-5.87 22.88-4.37 37.61.15 47.14 5.57 12.75 16.41 16.72 23.2 18.26 25 5.71 55.38-3.63 86.7-21.14-7.53 12.84-13.9 28.51-9.06 39.34 7.31 19.65 44.49 18.66 88.44-9.45 20.18 32.18 40.07 57.94 55.7 74.12a39.79 39.79 0 0 0 8.75 7.09c5.14 3.21 8.58 3.37 8.58 3.37-8.24-6.75-34-38-62.54-91.78 22.22-16 45.65-38.87 67.47-69.27 122.82 4.6 143.29-24.76 148-31.64 14.67-19.88 3.43-57.44-57.32-93.69zm-77.85 106.22c23.81-37.71 30.34-67.77 29.45-92.33 27.86 17.57 47.18 37.58 49.06 58.83 1.14 12.93-8.1 29.12-78.51 33.5zM216.9 387.69c9.76-6.23 19.53-13.12 29.2-20.49 6.68 13.33 13.6 26.1 20.6 38.19-40.6 21.86-68.84 12.76-49.8-17.7zm215-171.35c-10.29-5.34-21.16-10.34-32.38-15.05a722.459 722.459 0 0 0 22.74-36.9c39.06 24.1 45.9 53.18 9.64 51.95zM279.18 398c-5.51-11.35-11-23.5-16.5-36.44 43.25 1.27 62.42-18.73 63.28-20.41 0 .07-25 15.64-62.53 12.25a718.78 718.78 0 0 0 85.06-84q13.06-15.31 24.93-31.11c-.36-.29-1.54-3-16.51-12-51.7 60.27-102.34 98-132.75 115.92-20.59-11.18-40.84-31.78-55.71-61.49-20-39.92-30-82.39-31.57-116.07 12.3.91 25.27 2.17 38.85 3.88-22.29 36.8-14.39 63-13.47 64.23 0-.07-.95-29.17 20.14-59.57a695.23 695.23 0 0 0 44.67 152.84c.93-.38 1.84.88 18.67-8.25-26.33-74.47-33.76-138.17-34-173.43 20-12.42 48.18-19.8 81.63-17.81 44.57 2.67 86.36 15.25 116.32 30.71q-10.69 15.66-23.33 32.47C365.63 152 339.1 145.84 337.5 146c.11 0 25.9 14.07 41.52 47.22a717.63 717.63 0 0 0-115.34-31.71 646.608 646.608 0 0 0-39.39-6.05c-.07.45-1.81 1.85-2.16 20.33C300 190.28 358.78 215.68 389.36 233c.74 23.55-6.95 51.61-25.41 79.57-24.6 37.31-56.39 67.23-84.77 85.43zm27.4-287c-44.56-1.66-73.58 7.43-94.69 20.67 2-52.3 21.31-76.38 38.21-75.28C267 52.15 305 108.55 306.58 111zm-130.65 3.1c.48 12.11 1.59 24.62 3.21 37.28-14.55-.85-28.74-1.25-42.4-1.26-.08 3.24-.12-51 24.67-49.59h.09c5.76 1.09 10.63 6.88 14.43 13.57zm-28.06 162c20.76 39.7 43.3 60.57 65.25 72.31-46.79 24.76-77.53 20-84.92 4.51-.2-.21-11.13-15.3 19.67-76.81zm210.06 74.8"></path></svg></span>Class</a>
<br><a data-href="Friends" href="https://blog.allenygy.vip/friends.html" class="internal-link" target="_self" rel="noopener"><span class="iconize-icon-in-link" title="IbLink" aria-label="IbLink" data-icon="IbLink" aria-hidden="true"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M9.3 9a1 1 0 0 0 0-2v2zm0 8a1 1 0 1 0 0-2v2zm5.4-2a1 1 0 1 0 0 2v-2zm0-8a1 1 0 1 0 0 2V7zM7 9h2.3V7H7v2zm2.3 6H7v2h2.3v-2zm7.7 0h-2.3v2H17v-2zm-2.3-6H17V7h-2.3v2zM2 12a5 5 0 0 0 5 5v-2a3 3 0 0 1-3-3H2zm18 0a3 3 0 0 1-3 3v2a5 5 0 0 0 5-5h-2zm2 0a5 5 0 0 0-5-5v2a3 3 0 0 1 3 3h2zM4 12a3 3 0 0 1 3-3V7a5 5 0 0 0-5 5h2z" fill="currentColor"></path><path d="M15 12H9" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path></svg></span>Friends</a>
<br><a data-href="slides" href="https://blog.allenygy.vip/slides.html" class="internal-link" target="_self" rel="noopener"><span class="iconize-icon-in-link" title="CoShow" aria-label="CoShow" data-icon="CoShow" aria-hidden="true"><svg width="16px" height="16px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="Edit / Show"><g id="Vector"><path d="M3.5868 13.7788C5.36623 15.5478 8.46953 17.9999 12.0002 17.9999C15.5308 17.9999 18.6335 15.5478 20.413 13.7788C20.8823 13.3123 21.1177 13.0782 21.2671 12.6201C21.3738 12.2933 21.3738 11.7067 21.2671 11.3799C21.1177 10.9218 20.8823 10.6877 20.413 10.2211C18.6335 8.45208 15.5308 6 12.0002 6C8.46953 6 5.36623 8.45208 3.5868 10.2211C3.11714 10.688 2.88229 10.9216 2.7328 11.3799C2.62618 11.7067 2.62618 12.2933 2.7328 12.6201C2.88229 13.0784 3.11714 13.3119 3.5868 13.7788Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M10 12C10 13.1046 10.8954 14 12 14C13.1046 14 14 13.1046 14 12C14 10.8954 13.1046 10 12 10C10.8954 10 10 10.8954 10 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></g></g></svg></span>slides</a>


<br><br><br><br><br><br>]]></description><link>https://blog.allenygy.vip/home.html</link><guid isPermaLink="false">Home.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 07:45:40 GMT</pubDate></item><item><title><![CDATA[<a data-href="SparceTable" href="algorithm/basicalgorithm/sparcetable.html" class="internal-link" target="_self" rel="noopener">SparceTable</a>]]></title><description><![CDATA[ 
 <br>]]></description><link>https://blog.allenygy.vip/algorithm/basicalgorithm/sparcetable.html</link><guid isPermaLink="false">Algorithm/BasicAlgorithm/SparceTable.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:47:50 GMT</pubDate></item><item><title><![CDATA[<strong>SlidingWindow</strong>]]></title><description><![CDATA[<a class="tag" href="https://blog.allenygy.vip/?query=tag:Experience" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Experience</a> 
 <br><br><a href="https://blog.allenygy.vip?query=tag:Experience" class="tag" target="_blank" rel="noopener">#Experience</a> <br>
<br>枚举右端点，挪动左端点
<br>挪动左端点的判断条件一定枚举右端点出发的
<br>判断条件是难点
<br>int left=0;
for(int right=0;right&lt;n;i++){
	# 常常伴有哈系
	while(condition){
		left+=1;
	}
	# 更新ans
}
return ans;
Copy<br><br>class Solution {
public:
	int lengthOfLongestSubstring(string s) {
		int ans=0,left=0,n=s.size();
		unordered_map&lt;char,int&gt;m;
		for(int right=0;right&lt;n;right++){
			m[s[right]]++;
			while(m[s[right]]&gt;1){
				m[s[left]]--;
				left++;
			}ans=max(ans,right-left+1);
		}	
		return ans;
	}
};
Copy]]></description><link>https://blog.allenygy.vip/algorithm/basicalgorithm/slidingwindow.html</link><guid isPermaLink="false">Algorithm/BasicAlgorithm/SlidingWindow.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:48:09 GMT</pubDate></item><item><title><![CDATA[<a data-tooltip-position="top" aria-label="Discretization" data-href="Discretization" href="algorithm/basicalgorithm/discretization.html" class="internal-link" target="_self" rel="noopener">离散化</a>]]></title><description><![CDATA[ 
 <br><br>
<br>排序
<br>去重
<br>二分查找获取下标
<br>vector&lt;int&gt; discretization(vector&lt;int&gt; &amp;a) {
	vector&lt;int&gt; alls(a);
	sort(alls.begin(), alls.end()); // 排序
	alls.erase(unique(alls.begin(), alls.end()), alls.end()); //去重
	for (int &amp;x : a) { //重新赋值原数组
 		x = lower_bound(alls.begin(), alls.end(), x) - alls.begin();
	}
	return alls; //用于查表
}
Copy]]></description><link>https://blog.allenygy.vip/algorithm/basicalgorithm/discretization.html</link><guid isPermaLink="false">Algorithm/BasicAlgorithm/Discretization.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:49:32 GMT</pubDate></item><item><title><![CDATA[<a data-href="Basic-Algorithm-overview" href="algorithm/basicalgorithm/basic-algorithm-overview.html" class="internal-link" target="_self" rel="noopener">Basic-Algorithm-overview</a>]]></title><description><![CDATA[ 
 <br><br>
<br>前缀和
<br>差分
<br><a data-tooltip-position="top" aria-label="SparceTable" data-href="SparceTable" href="https://blog.allenygy.vip/algorithm/basicalgorithm/sparcetable.html" class="internal-link" target="_self" rel="noopener">倍增</a> 
<br><a data-tooltip-position="top" aria-label="Discretization" data-href="Discretization" href="https://blog.allenygy.vip/algorithm/basicalgorithm/discretization.html" class="internal-link" target="_self" rel="noopener">离散化</a>
<br><a data-href="BinarySearch" href="https://blog.allenygy.vip/BinarySearch" class="internal-link" target="_self" rel="noopener">BinarySearch</a>
<br><a data-tooltip-position="top" aria-label="SlidingWindow" data-href="SlidingWindow" href="https://blog.allenygy.vip/algorithm/basicalgorithm/slidingwindow.html" class="internal-link" target="_self" rel="noopener">双指针</a>
]]></description><link>https://blog.allenygy.vip/algorithm/basicalgorithm/basic-algorithm-overview.html</link><guid isPermaLink="false">Algorithm/BasicAlgorithm/Basic-Algorithm-overview.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:50:43 GMT</pubDate></item><item><title><![CDATA[<a data-href="Union-Find" href="algorithm/daa/algorithm/union-find.html" class="internal-link" target="_self" rel="noopener">Union-Find</a><sup data-footnote-id="fnref-1-7f91fca737931d34" class="footnote-ref" id="fnref-1-7f91fca737931d34"><a data-footref="[inline0" href="#fn-1-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[1]</a></sup>]]></title><description><![CDATA[ 
 <br><br>
<br>用于解决元素分组问题
<br>联通问题
<br>操作
<br>合并 (Union)
<br>查询 (Find)
<br><br>
<br>初始化时每个元素各成一个集合
<br>fa[i] 即指向 ---〉i 所在集合的代表元素
<br>int fa[MAXN];
void init(int n){
	for (int i = 1; i &lt;= n; ++i)
		fa[i] = i;
}
Copy<br><br>
<br>每个集合只能有一个代表元素
<br>故查询时回溯至找到代表元素是停止
<br>find(x) 应定义为x元素的所在集合的代表元素
<br>int find(int x){
	if(fa[x] == x)
		return x;
	else
		return find(fa[x]);
}
Copy<br><br>
<br>合并的基本逻辑是另一个集合的代表元素变成另一个集合的代表元素
<br>分解操作

<br>find(i) i元素所在集合的代表元素
<br>fa[i] 即指向 ---〉集合的代表元素
<br>find(j) j元素所在集合代表元素


<br>
找到i元素所在集合的代表元素 使该元素的代表元素指向 j元素的代表元素
<br>void merge(int i, int j){
	fa[find(i)] = find(j);
}
Copy<br><br>
<br>令所有节点都指向同一个父节点
<br>int find(int x){
	if(x == fa[x])
		return x;
	else{
		fa[x] = find(fa[x]); //父节点设为根节点
		return fa[x]; //返回父节点
	}
}

int find(int x){
	return x == fa[x] ? x : (fa[x] = find(fa[x]));
}
Copy<br><br>
<br>初始化
<br>void init(int n){
	for (int i = 1; i &lt;= n; ++i){
		fa[i] = i;
		rank[i] = 1;
	}
}
Copy<br>
<br>合并
<br>void merge(int i, int j){
	int x = find(i), y = find(j); // * 先找到两个根节点
	if (rank[x] &lt;= rank[y])
		fa[x] = y;
	else
		fa[y] = x;
	if (rank[x] == rank[y] &amp;&amp; x != y)
		rank[y]++; // * 如果深度相同且根节点不同，则新的根节点的深度+1
	}
Copy<br><br>class Ufds {

private:
	vector&lt;int&gt; parents;
	vector&lt;int&gt; ranks;
public:
	Ufds(int n) {
		parents.resize(n);
		ranks.resize(n);
		for (int i = 0; i &lt; n; i++) {
			parents[i] = i;
			ranks[i] = i;
		}
	}
	int findSet(int a) {
		if (parents[a] != a) {
			parents[a] = findSet(parents[a]);
		}
		return parents[a];
	}
	void unionSets(int a, int b) {
		a = findSet(a);
		b = findSet(b);
		if (a == b) return;
		if (ranks[a] &lt; ranks[b]) {
			int temp = a;
			a = b;
			b = temp;	
		}
		parents[b] = a;
		ranks[a]++;	
	}
	};
Copy<br><br><br>若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。<br><br>规定： 和  是亲戚， 和  是亲戚，那么  和  也是亲戚。如果 ， 是亲戚，那么  的亲戚都是  的亲戚， 的亲戚也都是  的亲戚。<br><br>第一行：三个整数 ，（），分别表示有  个人， 个亲戚关系，询问  对亲戚关系。<br>以下  行：每行两个数 ，，，表示  和  具有亲戚关系。<br>接下来  行：每行两个数 ，询问  和  是否具有亲戚关系。<br><br> 行，每行一个 Yes 或 No。表示第  个询问的答案为“具有”或“不具有”亲戚关系。<br><br><br>
6 5 3

1 2

1 5

3 4

5 2

1 3

1 4

2 3

5 6

Copy<br><br>
Yes

Yes

No

Copy<br><br>
#include &lt;cstdio&gt;

#define MAXN 5005

int fa[MAXN], rank[MAXN];

inline void init(int n)

{

for (int i = 1; i &lt;= n; ++i)

{

fa[i] = i;

rank[i] = 1;

}

}

int find(int x)

{

return x == fa[x] ? x : (fa[x] = find(fa[x]));

}

inline void merge(int i, int j)

{

int x = find(i), y = find(j);

if (rank[x] &lt;= rank[y])

fa[x] = y;

else

fa[y] = x;

if (rank[x] == rank[y] &amp;&amp; x != y)

rank[y]++;

}

int main()

{

int n, m, p, x, y;

scanf("%d%d%d", &amp;n, &amp;m, &amp;p);

init(n);

for (int i = 0; i &lt; m; ++i)

{

scanf("%d%d", &amp;x, &amp;y);

merge(x, y);

}

for (int i = 0; i &lt; p; ++i)

{

scanf("%d%d", &amp;x, &amp;y);

printf("%s\n", find(x) == find(y) ? "Yes" : "No");

}

return 0;

}

  

## 婴儿的名字

  

Copy<br>每年，政府都会公布一万个最常见的婴儿名字和它们出现的频率，也就是同名婴儿的数量。有些名字有多种拼法，例如，John 和 Jon 本质上是相同的名字，但被当成了两个名字公布出来。给定两个列表，一个是名字及对应的频率，另一个是本质相同的名字对。设计一个算法打印出每个真实名字的实际频率。注意，如果 John 和 Jon 是相同的，并且 Jon 和 Johnny 相同，则 John 与 Johnny 也相同，即它们有传递和对称性。<br>在结果列表中，选择 字典序最小 的名字作为真实名字。<br>示例：<br>
输入：names = ["John(15)","Jon(12)","Chris(13)","Kris(4)","Christopher(19)"], synonyms = ["(Jon,John)","(John,Johnny)","(Chris,Kris)","(Chris,Christopher)"]

输出：["John(27)","Chris(36)"]

Copy<br>提示：<br>
<br>
<br>
class Solution {

private:

unordered_map&lt;string, string&gt; parent;

unordered_map&lt;string, int&gt; frequency;

  

string find(string x) {

if (parent.find(x) == parent.end())

return x;

if (parent[x] != x)

parent[x] = find(parent[x]);

return parent[x];

}

  

void merge(string i, string j) {

string x = find(i);

string y = find(j);

if (x==y) return;

if (x &lt; y) {

parent[y] = x;

frequency[x] += frequency[y];

frequency[y] = 0;

}

else{

parent[x]=y;

frequency[y]+=frequency[x];

frequency[x]=0;

}

}

  

public:

vector&lt;string&gt; trulyMostPopular(vector&lt;string&gt;&amp; names, vector&lt;string&gt;&amp; synonyms) {

// Parse and initialize frequencies

for (const string&amp; name : names) {

int pos = name.find('(');

string nameStr = name.substr(0, pos);

int freq = stoi(name.substr(pos + 1, name.size() - pos - 2));

parent[nameStr] = nameStr;

frequency[nameStr] = freq;

}

  

// Process synonyms

for (const string&amp; synonym : synonyms) {

int pos = synonym.find(',');

string name1 = synonym.substr(1, pos - 1);

string name2 = synonym.substr(pos + 1, synonym.size() - pos - 2);

merge(name1, name2);

}

  

// Build the result

vector&lt;string&gt; result;

for (auto&amp; entry : frequency) {

string name = entry.first;

int freq = entry.second;

if (name == find(name)) {

string nameFreq = name + "(" + to_string(freq) + ")";

result.push_back(nameFreq);

}

}

  

return result;

}

};

Copy<br>
<br>
<br>并查集<a href="https://blog.allenygy.vip/about:blank#fnref-1-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
]]></description><link>https://blog.allenygy.vip/algorithm/daa/algorithm/union-find.html</link><guid isPermaLink="false">Algorithm/DAA/Algorithm/Union-Find.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:01:13 GMT</pubDate></item><item><title><![CDATA[Sort Algorithm]]></title><description><![CDATA[ 
 <br><br>
<br>Bubble Sort
<br>Insertion Sort
<br>Merge Sort
<br>Quick Sort
<br>Heap Sort
<br>稳定排序：排序前后两个相等的数相对位置不变，则算法稳定<br>
Bubble sort, Insertion sort, Merge sort<br>
非稳定排序：排序前后两个相等的数相对位置发生了变化，则算法不稳定<br>
Quick sort, Heap sort<br>Default order from smallest to largest<br><br>
<br>Final不考先不写
<br>  public static void sort(int nums[]){
    Bubble(nums, nums.length-1);
  }

  //* 优化 每次循环的最后一次交换后   该下标往右都不会再发生交换 */
  public static void Bubble(int nums[],int j){    
    if(j==0) return ;
    int x=0;
    for(int i=0;i&lt;j;i++){
      if(nums[i]&gt;nums[i+1]) {
        int temp=nums[i];
        nums[i]=nums[i+1];
        nums[i+1]=temp;
        x=i;
      }
    }
    Bubble(nums, x);
  }
Copy<br><br>
<br>
遍历第一个元素到数组最后一个元素

<br>
每遍历一个元素就比较已经排好序的部分，倒序遍历回去知道找到可以插入的位置

<br>
Example:

<br>654321
<br>564321
<br>456321
<br>345621
<br>234561
<br>123456


<br>
Export to clipboard<br>
<br>Non-Recursion
<br>public static void insertionSort(int A[]){
  for(int p=1;i&lt;A.length;p++){
    int key=A[p]; int i=p-1;
    while(i&gt;=0 &amp;&amp; A[i]&gt;key){
      A[i+1]=A[i]; //挪位置
      i=i-1;
    }
    A[i+1]=key;
  }
}
Copy<br>
<br>Recursion
<br>不断缩小排序范围<br>public static void insertionSort(int A[]){
    Insertion(A, 1);
  }
public static void insertionSort(int A[],int p){
  if(p==A.length) return;
  int key=A[p]; int i=p-1;
  while(i&gt;=0 &amp;&amp; key&lt;A[i]){
    A[i+1]=A[i];
    i--;
  }
  A[i+1]=key;
  Insertion(A, p+1);
}
Copy<br><br>
<br>Best-Case:  已经排好序的数组，扫一遍
<br>Worst-Case:  倒序的数组
<br>Average-Case: 
<br><br>
<br>重点讲下merge的过程

<br>对于两个有序数组第一个元素下标分别为


<br>
Export to clipboard<br><br><br><br>
<br>
<br><br>
Export to clipboard<br><br><br>Use the first element as a pivot<br>
<br>if the input is random, ok
<br>if the input is presorted (or in reverse order)

<br>all the elements go into S2 (or S1)
<br>this happens consistently throughout the recursive calls<br>
Results in  behavior


<br><br>Choose the pivot randomly<br>
<br>generally safe
<br>random number generation can be expensive
<br><br>Use the median of the array 中位数<br>
The median is the middle element if the array is sorted.<br>
<br>Partitioning always cuts the array into roughly half
<br>An optimal quicksort: O(N log N)
<br>However, it is expensive to find the exact median<br>
e.g., sort an array to pick the value in the middle
<br><br>We will use the median of three<br>
Compare just three elements: the left-most, right-most, and center<br>Swap these elements if necessary so that<br>
<br>A[left] =  Smallest
<br>A[right]   =  Largest
<br>A[center]  = Median of three
<br>Pick A[center] as the pivot
<br>Swap A[center] and A[right – 1] so that the pivot is at second-last position
<br><br>
<br>Assumptions<br>
Pivot Selection: Median of 3<br>
Base Case: Array size &lt;= 10
<br>Running time 

<br>Divide

<br>Pivot selection: O(1)
<br>Partitioning: O(n)
<br>Recursive calls: T(i) + T(n-i-1)


<br>Conquer and Combine: O(1)


<br><br>
<br>Worst-Case

<br>The pivot is the smallest element, all the time
<br>Partition is always unbalanced


<br><br>
<br>Best-Case

<br>Partition is perfectly balanced
<br>Pivot is always in the middle (median of the array)


<br><br><br><br><br><br><br><br><br>
<br>Average-Case
<br>
<br><br>
<br>The inner loop consists of an increment/decrement (by 1, which is fast), a test, and , a jump.
<br>There is no extra juggling as in mergesort.
<br><br><br>The priority queue is a data structure that allows at least two operations<br>
<br>insert
<br>delete in/deleteMax

<br>finds, returns, and removes the minimum elements in the priority queue


<br><br>Heaps are “almost perfect binary trees”<br>
<br>All levels are full except possibly the lowest level
<br>If the lowest level is not full, then nodes must be packed to the left
<br><br>Given a binary heap of node number n and height h<br>
<br>n is within 
<br>The height <br>
The structure is so regular, it can be represented in an array and no links are necessary !!!
<br>Insert in  time<br>
Locate the current minimum in  time<br>
Delete the current minimum in  time<br>
Export to clipboard<br>Note:<br>
节点A：<br>
父节点：<br>
Export to clipboard<br>
Export to clipboard]]></description><link>https://blog.allenygy.vip/algorithm/daa/algorithm/sort.html</link><guid isPermaLink="false">Algorithm/DAA/Algorithm/Sort.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:01:03 GMT</pubDate></item><item><title><![CDATA[<a data-href="Graph-algorithm" href="algorithm/daa/algorithm/graph-algorithm.html" class="internal-link" target="_self" rel="noopener">Graph-algorithm</a>]]></title><description><![CDATA[ 
 <br><br>Def: Graph
A graph is a pair of <br>
V is the collection of vertices<br>
E is the collection of edges
<br>Def: Directed Graph
(u, v)  and (v, u) are distinct for some edges (u, v) .
<br>Def: Undirected Graph
(u, v)  and (v, u) are identical for all edges (u, v) .
<br><br>Adjacency list Representation<br>
<br> is a linked list of all v that (u, v) .

<br> ,  
<br>In directed graphs,  is the out degree of v


<br>Adjacency matrix Representation<br>
<br> is a  matrix such that   if .  
<br><br>What does DFS do?

<br>Traverse all vertices in graph, and thereby
<br>Reveal properties of the graph.

Four array s are used to keep information gathered during traversal.
<br>Four Arrays

<br> : the color of each vertex visited

<br>white: undiscovered
<br>gray : discovered but not finished processing 
<br>black: finished processing


<br> : the predecessor pointer pointing back to the vertex from which u was discovered
<br> : the discovery time

<br>a counter indicating when vertex u is discovered 


<br>: the finishing time

<br>a counter indicating when the processing of vertex  ( and all its descendants ) is finished



<br>


Algorithm DFS(G)



Input: Graph GGG

Output: Vertex traversal of graph GGG

for all vertex u∈V(G)u \in V(G)u∈V(G) do


color[u]←whitecolor[u] \gets \text{white}color[u]←white//Initialize

pred[u]←NULLpred[u] \gets \text{NULL}pred[u]←NULL


end for

time←0time \gets 0time←0

for all vertex u∈V(G)u \in V(G)u∈V(G) do//Start a new tree


if color[u]==whitecolor[u] == \text{white}color[u]==white then


DFSVisit(uuu)


end if


end for



Export to clipboard<br>


Algorithm DFSVisit



color[u]←graycolor[u] \gets \text{gray}color[u]←gray//u is discovered

d[u]←++d[u] \gets ++d[u]←++time//u's discovery time

for all v∈adj[u]v \in \text{adj}[u]v∈adj[u] do//Visit undiscovered vertex


if color[v]==whitecolor[v] == \text{white}color[v]==white then


pred[v]←upred[v] \gets upred[v]←u

DFSVisit(vvv)


end if


end for

color[u]←blackcolor[u] \gets \text{black}color[u]←black//u has finished

f[u]←++f[u] \gets ++f[u]←++time//u finish time



Export to clipboard<br>The output of DFS

<br>The time stamp arrays: d[v], f[v]
<br>The predecessor array: pred[v]

<br>Def: DFS Forest
Use  to define a graph  as follows:<br>
<br>
It is a graph with no cycles, and a collection of trees.
<br>HandShaking Theorem
If G=(V, E) is an undirected graph<br>
If G=(V, E) is an directed graph<br>

<br><br><br><br><br>DFS Properties 

<br>u is a descendant ( in DFS trees ) of v, if and only if  is a subinterval of .
<br>u is an ancestor of v, if and only if  contains  .
<br>u is unrelated to v, if and only if  and  are disjoint intervals.

<br><img alt="Time-Stamp-1" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/DFS/Time-Stamp-Structure-1.png" referrerpolicy="no-referrer"><br>Proof 
The idea is to consider every case.<br>
Assume   wlog.

<br>If  , then

<br>u is discovered when v is still not finished y et ( marked gray)  u is a descendant of v ;
<br>u is discovered later than v   u should finish before v;
<br>hence we have  is a subinterval of .


<br>If , then

<br>Obviously  and $[d[v] , f[v]] are disjoint;
<br>Which means that when u or v is discovered, the others are not marked gray; 
<br>And hence neither vertex is a descendant of the other



<br><br>Theorem
An edge in an undirected graph is either a tree edge or a back edge.
<br>Proof 
Assume . Then, v is be discovered while u is gray.<br>
Hence v is in the DFS subtree rooted at u.

<br>If ,   is a tree edge.
<br>If ,   is a back edge.

<br><br><br>Def: Articulation 
Let  G=(V, E) be a connected undirected graph.<br>
An articulation point (cut vertex) of G is a vertex whose removal disconnects G<br>
<img align="center" style="zoom:40%;" alt="Articulation" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/DFS/Articulation-point.png" referrerpolicy="no-referrer">
<br>Given a connected graph G, how to find all articulation points?

<br>Brute Force Solution 
<br>

<br><br>
<br>Remove a vertex and its corresponding edges one by one one from G.
<br>Test whether the resulting graph is still connected or not say by DFS.
<br>The running time is O (n ∗(n + e)) .<br><br>
<br>The root of the DFS tree is an articulation point if it has two or more children.
<br>A leaf of the DFS tree is not an articulation point.
<br>And for other internal vertex v in the DFS tree, v is an articulation point if<br>
if there is one subtree rooted at a child of v that does not have a back edge which climbs higher than v.
<br><br>Def: Low and high
Using the discovery time in the DFS tree to define low and high.
<br>If there is a subtree rooted at a children of v which does not have a back edge connecting to a vertex with discovery time smaller than d[v] , then v is an articulation point.<br>
<br>Let Low (w) be the smallest value that a descendant of w can climb up by a back edge.
<br>We use d[v] to express the “hight” of v.
<br>v is “higher” than u if v and u are on the same branch of the DFS tree and d[v] &lt; d[u] .
<br>If v and u are on different branches, d[v] and d[u] are not compatible by the time-stamp structure.
]]></description><link>https://blog.allenygy.vip/algorithm/daa/algorithm/graph-algorithm.html</link><guid isPermaLink="false">Algorithm/DAA/Algorithm/Graph-algorithm.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:01:00 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/DFS/Time-Stamp-Structure-1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/DFS/Time-Stamp-Structure-1.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Enumeration]]></title><description><![CDATA[ 
 <br><br>枚举 <br>自右向左取<br>for(int i = 1; i &lt; (1 &lt;&lt; n) ; ++i){
	for(int j = 0 ; j &lt; n ; ++j){
		if( i &amp; (1 &lt;&lt; j )){ 
		}
	}
}
Copy<br>自左向右取<br>for(int i = 1; i &lt; (1 &lt;&lt; n); ++i){
	for(int j = 0 ; j &lt; n ; ++j){
		if( (i &gt;&gt; n ) &amp; 1){
		}
	}
}
Copy<br><br><a data-tooltip-position="top" aria-label="https://leetcode.cn/problems/maximum-points-in-an-archery-competition/" rel="noopener" class="external-link" href="https://leetcode.cn/problems/maximum-points-in-an-archery-competition/" target="_blank">射箭比赛中的最大得分</a>]]></description><link>https://blog.allenygy.vip/algorithm/daa/algorithm/enumeration.html</link><guid isPermaLink="false">Algorithm/DAA/Algorithm/Enumeration.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:00:51 GMT</pubDate></item><item><title><![CDATA[<a data-href="Enumeration-subset" href="algorithm/daa/algorithm/enumeration-subset.html" class="internal-link" target="_self" rel="noopener">Enumeration-subset</a>]]></title><description><![CDATA[ 
 <br><br><br>从1−n这n个整数中随机选取任意多个，每种方案里的数从小到大排列，按字典序输出所有可能的选择方案。<br>
<br>每种方案都有选或者不选两种情况
<br>#include&lt;iostream&gt;
#incldue&lt;algorithm&gt;

using namespace std;

const int N=20;
bool st[N]; //记录每个元素状态 选或不选
int n;

void dfs(int u){ //u 为当前状态
	if(u&gt;n){ //Base Case
		for(int i=1;i&lt;=n;i++){
			if(st[i]) cout&lt;&lt;i&lt;&lt;" ";
		}
		puts("");
		return ;
	}
	st[u]=true; // 选择当前元素
		dfs(u+1);
	st[u]=false;// 不选择当前元素
		dfs(u+1);
}

int main(){
	cin&gt;&gt;n;
	dfs(1);
	return 0;
}

Copy<br><br>把&nbsp;1∼n 这 n 个整数排成一行后随机打乱顺序，输出所有可能的次序。<br>
<br>每次都需要选一个数
<br>通过一个数组记录选数的顺序
<br>#include&lt;iostream&gt;

using namespace std;

const int N=20;

bool used[N];
int way[N];

int n;

void dfs(int u){//当前选了几个数
	if(u&gt;n){//输出
		for(int i=1;i&lt;=n;i++){
			cout&lt;&lt;way[i]&lt;&lt;" ";
		}
		puts("");
		return ;
	}
	for(int i=1;i&lt;=n;i++){
		if(used[i]) continue;
		used[i]=true;
		way[u]=i;
		dfs(u+1);
		used[i]=false;
	}
}

int main(){
	cin&gt;&gt;n;
	dfs(1);
	return 0;
}

Copy<br><br>把&nbsp;1∼n 这 n 个整数中随机选出m个，输出所有的可能的选择方案<br>#include&lt;iostream&gt;  
using namespace std;
const int N=30;
bool used[N];
int way[N];
int n;
int m;

void dfs(int u,int cnt){
	if(cnt==m){
		for(int i=1;i&lt;=m;i++){
			cout&lt;&lt;way[i]&lt;&lt;" ";
		}
		puts("");
		return ;
	}
	for(int i=1;i&lt;=n;i++){
		if(way[u-1]&lt;i &amp;&amp; !used[i]){
			used[i]=true;
			way[u]=i;
			dfs(u+1,cnt+1);
			used[i]=false;
		}  		
	}
}

int main(){
	cin&gt;&gt;n&gt;&gt;m;
	dfs(1,0);
	return 0;
}
Copy]]></description><link>https://blog.allenygy.vip/algorithm/daa/algorithm/enumeration-subset.html</link><guid isPermaLink="false">Algorithm/DAA/Algorithm/Enumeration-subset.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:00:55 GMT</pubDate></item><item><title><![CDATA[<a data-href="Divide-and-Conquer" href="algorithm/daa/algorithm/divide-and-conquer.html" class="internal-link" target="_self" rel="noopener">Divide-and-Conquer</a>]]></title><description><![CDATA[ 
 <br><br>


Algorithm Algorithm Divide and Conquer



if sizeof(P)\text{sizeof}(P)sizeof(P) is small then




return sol(P)\text{sol}(P)sol(P)


else


Split PPP into P1,P2,P3,…P_1, P_2, P_3, \ldotsP1​,P2​,P3​,…

for i←1i \gets 1i←1 to nnn do


si←DC(Pi)s_i \gets \text{DC}(P_i)si​←DC(Pi​)


end for



return combine(s1,s2,…)\text{combine}(s_1, s_2, \ldots)combine(s1​,s2​,…)


end if



Export to clipboard<br><br> Example By 2<br><br><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br><br> Example By 2 and Solve it With n<br><br><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br><br><br>
<br>Input: R = [1 ... n] is an array of n integers 
<br>Output: R = R [i...j] is a subarray of R, s.t.

<br>A pair of two integer  
<br>sum (R)=Sum(R[i...j]) is maximized
<br>


<br>Respect to

<br>sum(R[i...j])= 


<br>Maximum

<br>


<br>Subarray of R
<br><br>
<br>Input: An array R of n integers
<br>Output: The value of MCS 
<br>VMAX = R[1],mi=0,mj=0
for i = 1 to N do 
	V = 0 
	for j = i to N do 
		// calculate V ( i, j )
		V = V + R [ j ] 
		if V &gt; VMAX then 
			VMAX = V
			mi=i
			mj=j 
		end if
	end for
end for 
return VMAX
Copy<br>


Algorithm Maximum Contiguous Subarray Problem {Brute Force Reuse Data}



VMAX=R[1]VMAX = R[1]VMAX=R[1]

mi=0m_i = 0mi​=0

mj=0m_j = 0mj​=0

for i=1i = 1i=1 to NNN do


V=0V = 0V=0

for j=ij = ij=i to NNN do


//calculate V(i,j)V(i, j)V(i,j)

V=V+R[j]V = V + R[j]V=V+R[j]

if V&gt;VMAXV &gt; VMAXV&gt;VMAX then


VMAX=VVMAX = VVMAX=V

mi=im_i = imi​=i

mj=jm_j = jmj​=j


end if


end for


end for

return VMAXVMAXVMAX



Export to clipboard<br><br>
<br>Input: R[i...j]
<br>Output: MCS of R[i...j]
<br>


Algorithm Maximum Contiguous Subarray Problem



if i=ji = ji=j then




return R[i]R[i]R[i]


else


s1←MCS(R,i,⌊(i+j)/2⌋)s1 \gets \text{MCS}(R, i, \lfloor(i+j)/2\rfloor)s1←MCS(R,i,⌊(i+j)/2⌋)//Using floor function for lower rounding

s2←MCS(R,⌊(i+j)/2⌋+1,j)s2 \gets \text{MCS}(R, \lfloor(i+j)/2\rfloor + 1, j)s2←MCS(R,⌊(i+j)/2⌋+1,j)

A←MaxSuffix(R,i,⌊(i+j)/2⌋)+MaxPrefix(R,⌊(i+j)/2⌋+1,j)A \gets \text{MaxSuffix}(R, i, \lfloor(i+j)/2\rfloor) + \text{MaxPrefix}(R, \lfloor(i+j)/2\rfloor + 1, j)A←MaxSuffix(R,i,⌊(i+j)/2⌋)+MaxPrefix(R,⌊(i+j)/2⌋+1,j)



return MAX(s1,s2,A)\text{MAX}(s1, s2, A)MAX(s1,s2,A)


end if



Export to clipboard<br>
<br>Cpp 解法
<br>class Solution {
public:
	int maxPreffix(vector&lt;int&gt;&amp;nums,int i ,int j){
		int ans=nums[i];
		int tmp=0;
		for(;i&lt;=j;i++){
			tmp+=nums[i];
			if(tmp&gt;ans){
				ans=tmp;
			}
		}
		return ans;
	}
	int maxSuffix(vector&lt;int&gt;&amp;nums,int i ,int j){
		int ans=nums[j];
		int tmp=0;
		for(;i&lt;=j;j--){
			tmp+=nums[j];
			if(tmp&gt;ans){
			ans=tmp;
			}
		}
		return ans;
	}
	int MSA(vector&lt;int&gt;&amp;nums,int i ,int j){
		if(i==j){
			return nums[i];
		}
		else{
			int S1=MSA(nums,i,(i+j)/2);
			int S2=MSA(nums,(i+j)/2+1,j);
			int A = maxSuffix(nums,i,(i+j)/2)+maxPreffix(nums,(i+j)/2+1,j);
			return max({S1,S2,A});
		}
	}
	int maxSubArray(vector&lt;int&gt;&amp; nums) {
		return MSA(nums,0,nums.size()-1);
	}
};
Copy<br><br>Definition: A x B<br>
 is the multiplication of A x B s.t<br>
(i+j=k)0\leq k\leq n+m$$<br>
<br>Brute Force 
<br><br>


Algorithm Polynomial Multi1(A(x),B(x)A(x),B(x)A(x),B(x))



if n=0n=0n=0 then


return a0×b0a_0 \times b_0a0​×b0​


else


A0(x)=a0+a1x+⋯+a⌊n2⌋−1x⌊n2⌋−1A_0(x) = a_0 + a_1x + \dots + a_{\lfloor \frac{n}{2} \rfloor - 1}x^{\lfloor \frac{n}{2} \rfloor -1}A0​(x)=a0​+a1​x+⋯+a⌊2n​⌋−1​x⌊2n​⌋−1

A1(x)=a⌊n2⌋+a⌊n2⌋+1x+⋯+anxn−⌊n2⌋A_1(x) = a_{\lfloor \frac{n}{2} \rfloor} + a_{\lfloor \frac{n}{2} \rfloor +1}x + \dots + a_nx^{n-\lfloor \frac{n}{2} \rfloor}A1​(x)=a⌊2n​⌋​+a⌊2n​⌋+1​x+⋯+an​xn−⌊2n​⌋

B0(x)=b0+b1x+⋯+b⌊n2⌋−1x⌊n2⌋−1B_0(x) = b_0 + b_1x + \dots + b_{\lfloor \frac{n}{2} \rfloor - 1}x^{\lfloor \frac{n}{2} \rfloor -1}B0​(x)=b0​+b1​x+⋯+b⌊2n​⌋−1​x⌊2n​⌋−1

B1(x)=b⌊n2⌋+b⌊n2⌋+1x+⋯+bnxn−⌊n2⌋B_1(x) = b_{\lfloor \frac{n}{2} \rfloor} + b_{\lfloor \frac{n}{2} \rfloor +1}x + \dots + b_nx^{n-\lfloor \frac{n}{2} \rfloor}B1​(x)=b⌊2n​⌋​+b⌊2n​⌋+1​x+⋯+bn​xn−⌊2n​⌋

U(x)=PolyMult1(A0(x),B0(x))U(x) = \text{PolyMult1}(A_0(x), B_0(x))U(x)=PolyMult1(A0​(x),B0​(x))

V(x)=PolyMult1(A0(x),B1(x))V(x) = \text{PolyMult1}(A_0(x), B_1(x))V(x)=PolyMult1(A0​(x),B1​(x))

W(x)=PolyMult1(A1(x),B0(x))W(x) = \text{PolyMult1}(A_1(x), B_0(x))W(x)=PolyMult1(A1​(x),B0​(x))

Z(x)=PolyMult1(A1(x),B1(x))Z(x) = \text{PolyMult1}(A_1(x), B_1(x))Z(x)=PolyMult1(A1​(x),B1​(x))

return U(x)+(V(x)+W(x))x⌊n2⌋+Z(x)x2⌊n2⌋U(x) + (V(x) + W(x))x^{\lfloor \frac{n}{2} \rfloor} + Z(x)x^{2\lfloor \frac{n}{2} \rfloor}U(x)+(V(x)+W(x))x⌊2n​⌋+Z(x)x2⌊2n​⌋


end if



Export to clipboard<br>
<br>Time Complexity<br>
 Example By 2


<br>


Algorithm Polynomial Multi2(A(x),B(x)A(x),B(x)A(x),B(x))



if n=0n=0n=0 then


return a0×b0a_0 \times b_0a0​×b0​


else


A0(x)=a0+a1x+⋯+a⌊n2⌋−1x⌊n2⌋−1A_0(x) = a_0 + a_1x + \dots + a_{\lfloor \frac{n}{2} \rfloor - 1}x^{\lfloor \frac{n}{2} \rfloor -1}A0​(x)=a0​+a1​x+⋯+a⌊2n​⌋−1​x⌊2n​⌋−1

A1(x)=a⌊n2⌋+a⌊n2⌋+1x+⋯+anxn−⌊n2⌋A_1(x) = a_{\lfloor \frac{n}{2} \rfloor} + a_{\lfloor \frac{n}{2} \rfloor +1}x + \dots + a_nx^{n-\lfloor \frac{n}{2} \rfloor}A1​(x)=a⌊2n​⌋​+a⌊2n​⌋+1​x+⋯+an​xn−⌊2n​⌋

B0(x)=b0+b1x+⋯+b⌊n2⌋−1x⌊n2⌋−1B_0(x) = b_0 + b_1x + \dots + b_{\lfloor \frac{n}{2} \rfloor - 1}x^{\lfloor \frac{n}{2} \rfloor -1}B0​(x)=b0​+b1​x+⋯+b⌊2n​⌋−1​x⌊2n​⌋−1

B1(x)=b⌊n2⌋+b⌊n2⌋+1x+⋯+bnxn−⌊n2⌋B_1(x) = b_{\lfloor \frac{n}{2} \rfloor} + b_{\lfloor \frac{n}{2} \rfloor +1}x + \dots + b_nx^{n-\lfloor \frac{n}{2} \rfloor}B1​(x)=b⌊2n​⌋​+b⌊2n​⌋+1​x+⋯+bn​xn−⌊2n​⌋

Y(x)=PolyMult2(A0(x)+A1(x),B0(x)+B1(x))Y(x) = \text{PolyMult2}(A_0(x)+A_1(x), B_0(x)+B_1(x))Y(x)=PolyMult2(A0​(x)+A1​(x),B0​(x)+B1​(x))

U(x)=PolyMult2(A0(x),B0(x))U(x) = \text{PolyMult2}(A_0(x), B_0(x))U(x)=PolyMult2(A0​(x),B0​(x))

Z(x)=PolyMult2(A1(x),B1(x))Z(x) = \text{PolyMult2}(A_1(x), B_1(x))Z(x)=PolyMult2(A1​(x),B1​(x))

return U(x)+(Y(x)−U(x)−Z(x))x⌊n2⌋+Z(x)x2⌊n2⌋U(x) + (Y(x) - U(x) - Z(x))x^{\lfloor \frac{n}{2} \rfloor} + Z(x)x^{2\lfloor \frac{n}{2} \rfloor}U(x)+(Y(x)−U(x)−Z(x))x⌊2n​⌋+Z(x)x2⌊2n​⌋


end if



Export to clipboard]]></description><link>https://blog.allenygy.vip/algorithm/daa/algorithm/divide-and-conquer.html</link><guid isPermaLink="false">Algorithm/DAA/Algorithm/Divide-and-Conquer.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:00:47 GMT</pubDate></item><item><title><![CDATA[<a data-href="DAA-Assignment-2" href="algorithm/daa/assignment/daa-assignment-2.html" class="internal-link" target="_self" rel="noopener">DAA-Assignment-2</a>]]></title><description><![CDATA[ 
 <br><br><br><img style="zoom:90%;" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/As2-1.png" referrerpolicy="no-referrer"><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/As2-2.png" referrerpolicy="no-referrer"><br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/As2-3.png" referrerpolicy="no-referrer"><br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/As2-4.png" referrerpolicy="no-referrer"><br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/As2-5.png" referrerpolicy="no-referrer"><br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/As2-6.png" referrerpolicy="no-referrer"><br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/As2-7.png" referrerpolicy="no-referrer"><br><br>A tree &nbsp;is the maximum spanning tree of a graph &nbsp;if &nbsp;is a spanning tree of &nbsp;and the weight on the tree &nbsp;is maximized.<br>Mr. Smart designs an algorithm to find the maximum spanning tree. Is his algorithm correct?<br>


Algorithm MaxST(G, w)


Require: a connected graph G=(V,E)G = (V, E)G=(V,E) with a weight function w:E→Zw: E \to \mathbb{Z}w:E→Z

Ensure: the maximum spanning tree TTT of GGG


begin

E←sort(E)E \gets \text{sort}(E)E←sort(E) in decreasing order based on www

A←{}A \gets \{\}A←{}

for all u∈Vu \in Vu∈V do


CREATE-SET(u)\text{CREATE-SET}(u)CREATE-SET(u)


end for

for all (u,v)∈E(u, v) \in E(u,v)∈E do


if FIND-SET(u)≠FIND-SET(v)\text{FIND-SET}(u) \neq \text{FIND-SET}(v)FIND-SET(u)​=FIND-SET(v) then


add (u,v)(u, v)(u,v) to AAA

UNION(u,v)\text{UNION}(u, v)UNION(u,v)


end if


end for



return (V,A)(V, A)(V,A)

end



Export to clipboard<br>Note that his algorithm is exactly same as Kruskal’s algorithm except that the loop from line 7 to 12 iterates on edges in the decreasing order. (15pts)<br>I think his opinion is correct.<br><br>
<br>Heavy Edge: An edge is considered a heavy edge crossing a cut if its weight is the maximum among all edges crossing that cut.
<br>Safe Edge: An edge is considered safe if its inclusion in the growing forest does not violate the properties of the maximum spanning tree (i.e., it does not create a cycle with edges already included in the MST and its addition results in a spanning tree with the maximum possible total weight).
<br><br>Case I: Heavy Edge is Safe Edge<br>
<br>If the heavy edge is part of the MST, then by definition, it contributes to forming the maximum possible weight of the MST.
<br>Since it is the heaviest edge across a particular cut and it is part of the MST, it is safe because its exclusion would result in a non-optimal tree (i.e., a tree with less total weight).
<br>Case II: Heavy Edge is Not Safe Edge<br>
<br>Assume for contradiction that there is a heavy edge across a cut which is not included in the MST, implying it is not safe.
<br>If is the heaviest edge crossing the cut and is not included, then to maintain connectivity and maximize total weight, there must be another edge through the cut.
<br>However, was defined as the heaviest edge, so no edge can have a greater weight than.
<br>This leads to a contradiction because it would imply that the current MST is not truly the maximum spanning tree as excluding reduces the possible total weight.
<br><br>Given a weighted connect graph , a path from &nbsp;to &nbsp;is simple if no vertex on the path is repeated. A simple path is maximum if the length on the simple path is the largest. Such length is called maximum distance from  to  , denoted as .<br>Mr. Smart designs the following algorithm to find the maximum simple path from one vertices to all other vertices. Is his algorithm correct? Prove your answer.<br>


Algorithm MaxSP(G, w, s)


Require: a connected graph G=(V,E)G = (V,E)G=(V,E) with a weight function w:E→Zw: E \rightarrow \mathbb{Z}w:E→Z, a source vertex s∈Vs \in Vs∈V

Ensure: the maximum distance Δ(s,v)\Delta(s,v)Δ(s,v) for all v∈Vv \in Vv∈V


begin

for all u∈Vu \in Vu∈V do


d[u]←∞d[u] \gets \inftyd[u]←∞

color[u]←Wcolor[u] \gets Wcolor[u]←W


end for

d[s]←0d[s] \gets 0d[s]←0

pred[s]←NULLpred[s] \gets \text{NULL}pred[s]←NULL

Q←new&nbsp;PriorityQueue(V)Q \gets \text{new PriorityQueue}(V)Q←new&nbsp;PriorityQueue(V)

while QQQ is not empty do


u←Q.extractMax()u \gets Q.\text{extractMax}()u←Q.extractMax()

for all v∈adj[u]v \in \text{adj}[u]v∈adj[u] do


if d[u]+w(u,v)&gt;d[v]d[u] + w(u,v) &gt; d[v]d[u]+w(u,v)&gt;d[v] then


d[v]←d[u]+w(u,v)d[v] \gets d[u] + w(u,v)d[v]←d[u]+w(u,v)

Q.increaseKey(v,d[v])Q.\text{increaseKey}(v, d[v])Q.increaseKey(v,d[v])

pred[v]←upred[v] \gets upred[v]←u


end if


end for

color[u]←Bcolor[u] \gets Bcolor[u]←B


end while



return d[u]d[u]d[u] for each u∈Vu \in Vu∈V

end



Export to clipboard<br>Note that his algorithm is exactly same as Dijkstra’s algorithm except that the priority queue is implemented by a Max Heap. Each round of the loop from line 9 to 19 extract the largest weight edge. And &nbsp;is updated if . (15pts)<br>I think his algorithm is not correct.<br>
<br>When updating distances using the condition , the algorithm attempts to assign new values based on the assumption that there exists a greater path value from   through  to.
<br>However, since all  are initially , the algorithm's condition will always find that  is false, because you cannot have a real number that is greater than . This results in no updates to  .
<br><br>From the lecture, Mr. Smart knows that Prim’s algorithm runs in  time and Kruskal’s algorithm runs in &nbsp;time. Then, Mr. Smart claims that the time complexity of Prim’s algorithm is lower than Kruskal’s algorithm. Is he correct? Prove your answer. (10pts)<br>I think he is not correct.<br><br>
<br>Prim's Algorithm: Actually as , where  is the number of edges, and  is the number of vertices.
<br>Kruskal's Algorithm: Commonly has a complexity of .
<br><br>
<br>In dense graphs, there are far more edges than vertices, for example .
<br>The time complexity of Prim's algorithm is .<br>
The time complexity of Kruskal's algorithm is .<br>
In this case, the time complexity of Prim's algorithm is lower than Kruskal's algorithm.<br><br>
<br>In a sparse graph, the number of edges is close to the number of vertices, that is, .
<br>The time complexity of Kruskal's algorithm is , because the number of edges is small, the sorting burden is relatively light.<br>
The time complexity of Prim's algorithm is .<br>
In this case, the time complexity of Kruskal's algorithm is lower than that of Prim algorithm.<br><br>Therefore, it cannot be said that the time complexity of Prim's algorithm is always lower than that of Kruskal's algorithm.]]></description><link>https://blog.allenygy.vip/algorithm/daa/assignment/daa-assignment-2.html</link><guid isPermaLink="false">Algorithm/DAA/Assignment/DAA-Assignment-2.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:50:15 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/As2-1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/As2-1.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="DAA-Programming-Assignment" href="algorithm/daa/assignment/daa-programming-assignment.html" class="internal-link" target="_self" rel="noopener">DAA-Programming-Assignment</a>]]></title><description><![CDATA[ 
 <br><br><br>The Maximum Subarray Sum problem seeks to find the contiguous subarray (containing at least one number) which has the largest sum among all possible subarrays of a given integer array.<br><br>Define  as the maximum sum of a subarray ending at index . The recurrence relation can be expressed as:<br><br>where  is the value of the array at index .<br><br>
<br>
: The input array containing integers.

<br>
: The maximum sum of a subarray ending at position  in array .

<br>
: A function returning the maximum of its arguments.

<br><br>The pseudocode for the Dynamic Programming solution of this problem is as follows:<br>


Algorithm MCS



function MCS(SSS)


if SSS is empty then




return 0


end if

F[0]←S[0]F[0] \gets S[0]F[0]←S[0]

maxSum←S[0]maxSum \gets S[0]maxSum←S[0]

for i←1i \gets 1i←1 to length(S)−1\text{length}(S) - 1length(S)−1 do


F[i]←max⁡(F[i−1]+S[i],S[i])F[i] \gets \max(F[i-1] + S[i], S[i])F[i]←max(F[i−1]+S[i],S[i])

if F[i]&gt;maxSumF[i] &gt; maxSumF[i]&gt;maxSum then


maxSum←F[i]maxSum \gets F[i]maxSum←F[i]


end if


end for



return maxSummaxSummaxSum


end function



Export to clipboard<br><br>
<br>
Initialization: The initialization of F[0] and maxSum takes constant time, .

<br>
Loop: The loop runs  times if  is the length of the array. Within each iteration, the operations (calculating  and updating maxSum) take constant time.

<br>
Overall: The overall time complexity of the algorithm is , where  is the number of elements in the input array, as each element is processed exactly once.

<br><br>
<br>This documentation was written in a Markdown file.
<br>In my code, it can output all optimal solutions, both on the screen and to an output file.
<br>The number of integers in the input is unknown. You can input an array of arbitrary size.<br>
Here's a refined version of the guideline section of your documentation:
<br><br>The implementation was performed using standard C and compiled with the GCC compiler.<br><br>
<br>
Directory Structure<br>
To compile the code, ensure you are in the correct directory.  If you are in the correct path, you could see the following file tree structure:
.
├── Makefile
├── README.md
├── in
├── in_out
├── lib.c
├── lib.h
├── lib.o
├── mcs
├── mcs.c
└── mcs.o
Copy

<br>
Compile the Code:<br>
Once you have confirmed the directory structure, simply type make in the terminal:
make
Copy
This command will compile the source files and should produce the following output:
gcc -c mcs.c
gcc -c lib.c
gcc mcs.o lib.o -o mcs
Copy

<br><br>After compiling the code, you can execute the program by entering the following command in the terminal:<br>./mcs &lt;InputFilename&gt;
Copy<br>For example, to run the program with the input file named in, type:<br>./mcs in
Copy<br>This command will run the program using the data specified in the in file. Make sure that the input file is in the correct format and location as expected by the program.]]></description><link>https://blog.allenygy.vip/algorithm/daa/assignment/daa-programming-assignment.html</link><guid isPermaLink="false">Algorithm/DAA/Assignment/DAA-Programming-Assignment.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:50:26 GMT</pubDate></item><item><title><![CDATA[<a data-href="DAA-Assignment-0" href="algorithm/daa/assignment/daa-assignment-0.html" class="internal-link" target="_self" rel="noopener">DAA-Assignment-0</a>]]></title><description><![CDATA[ 
 <br><br><br>For Euclidean Algorithm to find GCD<br>
<br>Define the problem solved by the algorithm (6pt)

<br>Input: 2 positive integer A,B
<br>Output: A positive integer that is Greatest Common Divisor of A and B


<br>Give a high-level presentation of the algorithm (6pt)

<br>Divide the larger number by the smaller number, then remove the divisor by the remainder that occurs (the first remainder), then remove the first remainder by the remainder that occurs (the second remainder), and so on until the final remainder is zero. If you are finding the greatest common divisor of two numbers, then the final divisor is the greatest common divisor of those two numbers.


<br>Write the pseudo code (8pt)
<br>


Algorithm Euclidean Algorithm



while B≠0B \neq 0B​=0 do


temp←Btemp \gets Btemp←B

B←a mod bB \gets a \bmod bB←amodb

A←tempA \gets tempA←temp


end while

return AAA



Export to clipboard<br><br>
<br>Input: A task t
<br>Output: "Yes" or "No"
<br>


Algorithm Task Work Procedure



if atomic(ttt) then




return accomplishable(ttt)


end if

subtasks←subtasks \getssubtasks← destruct(ttt)

for each subtasksubtasksubtask in subtaskssubtaskssubtasks do


if work(subtasksubtasksubtask) == ‘‘No'' then




return ‘‘No''


end if


end for



return ‘‘Yes''



Export to clipboard<br><br><br><br>
<br>
<br>
<br>
<br>
<br>Verification: 
<br>The array A is known to be in ascending order and the length of the array is n.  When we search for the target number x, we compare it with the middle element of the array. 

<br>If , the target number is found;
<br>if , the search needs to be narrowed down, the search needs to be done in the array containing elements from  to ; 
<br>if , the search needs to be done in the array containing elements from to .


<br><br><br>
<br>
...<br>
<br>
<br><br>
<br>
<br>
<br><br>
<br>
<br><br>The main goal of algorithm analysis is to understand the rate at which an algorithm's running time or space requirement grows with input size. Although multiplication has a slower running time than addition, it does not affect the overall time complexity in general.]]></description><link>https://blog.allenygy.vip/algorithm/daa/assignment/daa-assignment-0.html</link><guid isPermaLink="false">Algorithm/DAA/Assignment/DAA-Assignment-0.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:50:03 GMT</pubDate></item><item><title><![CDATA[<a data-href="DAA-Assignment-1" href="algorithm/daa/assignment/daa-assignment-1.html" class="internal-link" target="_self" rel="noopener">DAA-Assignment-1</a>]]></title><description><![CDATA[ 
 <br><br><br>Given the input A=[11, -7, 8, 12, 6, 5, -6, 3] , track the divide-and-conquer algorithm to find the maximum contiguous subarray. You need to show the recursive calls as a tree. The input and output for each recursive call should also be indicated as well.<br>
<br>Input: A=[11, -7, 8, 12, 6, 5, -6, 3]
<br>Output: MCS of A 
<br>


Algorithm Maximum Contiguous Subarray Problem



if i=ji = ji=j then




return R[i]R[i]R[i]


else


s1←MCS(R,i,⌊(i+j)/2⌋)s1 \gets \text{MCS}(R, i, \lfloor(i+j)/2\rfloor)s1←MCS(R,i,⌊(i+j)/2⌋)//Using floor function for lower rounding

s2←MCS(R,⌊(i+j)/2⌋+1,j)s2 \gets \text{MCS}(R, \lfloor(i+j)/2\rfloor + 1, j)s2←MCS(R,⌊(i+j)/2⌋+1,j)

A←MaxSuffix(R,i,⌊(i+j)/2⌋)+MaxPrefix(R,⌊(i+j)/2⌋+1,j)A \gets \text{MaxSuffix}(R, i, \lfloor(i+j)/2\rfloor) + \text{MaxPrefix}(R, \lfloor(i+j)/2\rfloor + 1, j)A←MaxSuffix(R,i,⌊(i+j)/2⌋)+MaxPrefix(R,⌊(i+j)/2⌋+1,j)



return MAX(s1,s2,A)\text{MAX}(s1, s2, A)MAX(s1,s2,A)


end if



Export to clipboard<br><img alt="T1" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/AS2/T1.png" referrerpolicy="no-referrer"><br><br>Given two polynomials  and , track the &nbsp;algorithm to calculate . You need to show the recursive calls as a tree. The input and output for each recursive call should also be indicated as well.<br>
<br>Input: Two polynomials A(X) and B(x) of order n
<br>Output: The polynomial C(X) = A(x)B(x)
<br>


Algorithm Polynomial Multi2(A(x),B(x)A(x),B(x)A(x),B(x))



if n=0n=0n=0 then


return a0×b0a_0 \times b_0a0​×b0​


else


A0(x)=a0+a1x+⋯+a⌊n2⌋−1x⌊n2⌋−1A_0(x) = a_0 + a_1x + \dots + a_{\lfloor \frac{n}{2} \rfloor - 1}x^{\lfloor \frac{n}{2} \rfloor -1}A0​(x)=a0​+a1​x+⋯+a⌊2n​⌋−1​x⌊2n​⌋−1

A1(x)=a⌊n2⌋+a⌊n2⌋+1x+⋯+anxn−⌊n2⌋A_1(x) = a_{\lfloor \frac{n}{2} \rfloor} + a_{\lfloor \frac{n}{2} \rfloor +1}x + \dots + a_nx^{n-\lfloor \frac{n}{2} \rfloor}A1​(x)=a⌊2n​⌋​+a⌊2n​⌋+1​x+⋯+an​xn−⌊2n​⌋

B0(x)=b0+b1x+⋯+b⌊n2⌋−1x⌊n2⌋−1B_0(x) = b_0 + b_1x + \dots + b_{\lfloor \frac{n}{2} \rfloor - 1}x^{\lfloor \frac{n}{2} \rfloor -1}B0​(x)=b0​+b1​x+⋯+b⌊2n​⌋−1​x⌊2n​⌋−1

B1(x)=b⌊n2⌋+b⌊n2⌋+1x+⋯+bnxn−⌊n2⌋B_1(x) = b_{\lfloor \frac{n}{2} \rfloor} + b_{\lfloor \frac{n}{2} \rfloor +1}x + \dots + b_nx^{n-\lfloor \frac{n}{2} \rfloor}B1​(x)=b⌊2n​⌋​+b⌊2n​⌋+1​x+⋯+bn​xn−⌊2n​⌋

Y(x)=PolyMult2(A0(x)+A1(x),B0(x)+B1(x))Y(x) = \text{PolyMult2}(A_0(x)+A_1(x), B_0(x)+B_1(x))Y(x)=PolyMult2(A0​(x)+A1​(x),B0​(x)+B1​(x))

U(x)=PolyMult2(A0(x),B0(x))U(x) = \text{PolyMult2}(A_0(x), B_0(x))U(x)=PolyMult2(A0​(x),B0​(x))

Z(x)=PolyMult2(A1(x),B1(x))Z(x) = \text{PolyMult2}(A_1(x), B_1(x))Z(x)=PolyMult2(A1​(x),B1​(x))

return U(x)+(Y(x)−U(x)−Z(x))x⌊n2⌋+Z(x)x2⌊n2⌋U(x) + (Y(x) - U(x) - Z(x))x^{\lfloor \frac{n}{2} \rfloor} + Z(x)x^{2\lfloor \frac{n}{2} \rfloor}U(x)+(Y(x)−U(x)−Z(x))x⌊2n​⌋+Z(x)x2⌊2n​⌋


end if



Export to clipboard<br><img alt="T2" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/AS2/T2.png" referrerpolicy="no-referrer"><br><br><br><br><br><br><br>In the deterministic linear-time divide-and-conquer algorithm taught in class for the selection problem, the input array is divided into groups of 5 elements. Analyze the running time of the algorithm if the input array is divided into groups of 7. Does your algorithm run in linear time?<br>The Algorithm is still run in linear time<br>


Algorithm Deterministic-Select(A,p,r,iA,p,r,iA,p,r,i)



if p=rp=rp=r then


return A[p]A[p]A[p]


end if

q=Deterministic−Partition(A,p,r)q = Deterministic-Partition(A,p,r)q=Deterministic−Partition(A,p,r)

k=q−p+1k = q - p + 1k=q−p+1

if i=ki = ki=k then


return A[q]A[q]A[q]


end if

if i&lt;ki &lt; ki&lt;k then


return Deterministic−Select(A,p,q−1,i)Deterministic-Select(A,p,q-1,i)Deterministic−Select(A,p,q−1,i)


end if

if i&gt;ki &gt; ki&gt;k then


return Deterministic−Select(A,q+1,r,i−k)Deterministic-Select(A,q+1,r,i-k)Deterministic−Select(A,q+1,r,i−k)


end if



Export to clipboard<br><br>Assume always Deterministic-Select Right (wlog)<br><br><br>Proof  Let   if a is large enough; <br>
By strong induction<br>
Base case: When Assume for all  Goal  <br><br>
<br>
<br><br><br><br><br><br><br><br><br>A segment &nbsp;is a pair of positive integers , where . Two segments &nbsp;and &nbsp;intersect if  .<br>Given a sequence &nbsp;of &nbsp; of  segments sorted increasingly by ’s ( &nbsp;if  ) within the &nbsp;r ( &nbsp;for all ), design a divide-and-conquer algorithm to justify if there are two segments intersect.<br><br>
<br>Input:  

<br>Segments a sequence &nbsp;of &nbsp; of  segments sorted increasingly by ’s ( &nbsp;if  ) within the &nbsp;r ( &nbsp;for all )
<br>Left to indicate left endpoint
<br>Right to indicate right endpoint
<br>R to indicate r ( &nbsp;for all )


<br>Output:

<br>Boolean value indicating whether there is at least one pair of intersecting segments.


<br>
<br>If the left and right indexes coincide, the intersect cannot be found. Return false;
<br>Divide the array into two halves: the left sublist and the right sublist.
<br>Recursively apply the algorithm to the left sublist to check for intersections.
<br>Recursively apply the algorithm to the right sublist to check for intersections.
<br>If any recursive call finds an intersection, return 'true' because we have already found the intersecting segments.
<br>Otherwise look for MaxLeftB in the left sublist and MinRightA in the right list
<br>If MinRightA is less than MaxLeftB, intersect is found
<br>Otherwise return 'false'.
<br><br><br>


Algorithm Check for Intersection in Segments



function DoesIntersect(SegmentsSegmentsSegments, LeftLeftLeft, RightRightRight, RRR)


if Left≥RightLeft \geq RightLeft≥Right then


return false


end if

Mid←⌊(Left+Right)/2⌋Mid \gets \lfloor(Left + Right) / 2\rfloorMid←⌊(Left+Right)/2⌋

LeftIntersect←LeftIntersect \getsLeftIntersect← DoesIntersect(SegmentsSegmentsSegments, LeftLeftLeft, MidMidMid, RRR)

RightIntersect←RightIntersect \getsRightIntersect← DoesIntersect(SegmentsSegmentsSegments, Mid+1Mid + 1Mid+1, RightRightRight, RRR)

if LeftIntersectLeftIntersectLeftIntersect or RightIntersectRightIntersectRightIntersect then


return true


end if

MaxLeftB←MaxLeftB \getsMaxLeftB← FindMaxB(SegmentsSegmentsSegments, LeftLeftLeft, MidMidMid)

MinRightA←MinRightA \getsMinRightA← FindMinA(SegmentsSegmentsSegments, Mid+1Mid + 1Mid+1, RightRightRight)

if MaxLeftB&gt;MinRightAMaxLeftB &gt; MinRightAMaxLeftB&gt;MinRightA then


return true


end if

return false


end function

function FindMaxB(Segments,Left,MidSegments, Left, MidSegments,Left,Mid)


MaxB←−∞MaxB \gets -\inftyMaxB←−∞

for i←Lefti \gets Lefti←Left to MidMidMid do


MaxB←max⁡(MaxB,Segments[i].b)MaxB \gets \max(MaxB, Segments[i].b)MaxB←max(MaxB,Segments[i].b)


end for



return MaxBMaxBMaxB


end function

function FindMinA(Segments,Mid,RightSegments, Mid, RightSegments,Mid,Right)


MinA←∞MinA \gets \inftyMinA←∞

for i←Mid+1i \gets Mid + 1i←Mid+1 to RightRightRight do


MinA←min⁡(MinA,Segments[i].a)MinA \gets \min(MinA, Segments[i].a)MinA←min(MinA,Segments[i].a)


end for



return MinAMinAMinA


end function



Export to clipboard<br><br><br><br><br>When <br>
When <br>
<br><br><br><br>Assume: The number of terms in the polynomials is always an integer power of <br>In other words,  for some <br><br>
<br>If the number of terms of the polynomial is not a power of two
<br>Then by adding the number of terms to the polynomial until the number of terms becomes a power of two, the coefficient of the added term is 0
<br><br><br>Hint: please pay attention to the input size<br>
<br>Input: Two polynomials  and  of order 
<br>Output: The polynomials 
<br>


Algorithm PolyMulti(A(x),B(x))





A′(x)=M(A(x))A^{'}(x)=M(A(x))A′(x)=M(A(x))

B′(x)=M(B(x))B^{'}(x)=M(B(x))B′(x)=M(B(x))

return GPolyMultic(A′(x),B′(x)A^{'}(x),B^{'}(x)A′(x),B′(x))



Export to clipboard<br>It will not increase the time complexity comparing to the original algorithm.<br>
The time cost will slightly increase.<br>
Suppose there are 2 polynomials with  terms.<br>
After the operation it now turn to  terms.<br>
In original algorithm the time complexity is <br>
Now the time complexity is <br>
There are almost the same time complexity <br>]]></description><link>https://blog.allenygy.vip/algorithm/daa/assignment/daa-assignment-1.html</link><guid isPermaLink="false">Algorithm/DAA/Assignment/DAA-Assignment-1.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:50:09 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/AS2/T1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DAA/AS2/T1.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Tutorial-1" href="algorithm/daa/tutorial/tutorial-1.html" class="internal-link" target="_self" rel="noopener">Tutorial-1</a>]]></title><description><![CDATA[ 
 <br><br><br>Given the problem: “For the given positive integer, justify if it is a prime.”<br>
<br>
Formally define the problem

<br>
Give some instances and corresponding outputs

<br>3.&nbsp;Construct an algorithm and describe it with/without using pseudo code<br>
<br>Input: a positive integer n
<br>Output: Yes, if n is a prime; No, Otherwise
<br>
Export to clipboard<br>


Algorithm Quicksort



procedure Quicksort(A,p,rA, p, rA,p,r)


if p&lt;rp &lt; rp&lt;r then


q=q = q= Partition(A,p,rA, p, rA,p,r)

Quicksort(A,p,q−1A, p, q - 1A,p,q−1)

Quicksort(A,q+1,rA, q + 1, rA,q+1,r)


end if


end procedure

procedure Partition(A,p,rA, p, rA,p,r)


x=A[r]x = A[r]x=A[r]

i=p−1i = p - 1i=p−1

for j=pj = pj=p to r−1r - 1r−1 do


if A[j]&lt;xA[j] &lt; xA[j]&lt;x then


i=i+1i = i + 1i=i+1

exchange A[i]A[i]A[i] with A[j]A[j]A[j]


end if

exchange A[i]A[i]A[i] with A[r]A[r]A[r]


end for


end procedure



Export to clipboard]]></description><link>https://blog.allenygy.vip/algorithm/daa/tutorial/tutorial-1.html</link><guid isPermaLink="false">Algorithm/DAA/Tutorial/Tutorial-1.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:50:57 GMT</pubDate></item><item><title><![CDATA[<a data-href="dsa-assignment-1" href="algorithm/dsa/assignment/dsa-assignment-1.html" class="internal-link" target="_self" rel="noopener">dsa-assignment-1</a>]]></title><description><![CDATA[ 
 <br><br><br>
Export to clipboard<br><br>
<br>“BST.png” could not be found.
<br>“BST-1.png” could not be found.
<br>|14|25|40|52|58|85|
<br><br><br>a.<br>
Initial State<br>              52|2              
        ┌───────┴───────┐       
      15|1            85|0      
    ┌───┴───┐                   
   8|0    31|0
Copy<br>Insert 82:<br>              52|2              
        ┌───────┴───────┐       
      15|1            85|1      
    ┌───┴───┐       ┌───┘       
   8|0    31|0    82|0
Copy<br>Insert 6:<br>                              52|3                              
                ┌───────────────┴───────────────┐               
              15|2                            85|1              
        ┌───────┴───────┐               ┌───────┘               
       8|1            31|0            82|0                      
    ┌───┘                                                       
   6|0                     
Copy<br>Insert 65:<br>                              52|3                              
                ┌───────────────┴───────────────┐               
              15|2                            82|1              
        ┌───────┴───────┐               ┌───────┴───────┐       
       8|1            31|0            65|0            85|0      
    ┌───┘                                                       
   6|0                        
Copy<br>b.<br>1<br>                              52|3                              
                ┌───────────────┴───────────────┐               
               8|1                            82|2              
        ┌───────┴───────┐               ┌───────┴───────┐       
       6|0            15|0            65|1            85|1      
                                        └───┐           └───┐   
                                          72|0            95|0
Copy<br>2<br>                              65|3                              
                ┌───────────────┴───────────────┐               
              15|2                            82|2              
        ┌───────┴───────┐               ┌───────┴───────┐       
       8|1            31|0            72|0            85|1      
    ┌───┘                                               └───┐   
   6|0                                                    95|0
Copy<br>3<br>                              52|3                              
                ┌───────────────┴───────────────┐               
              15|2                            85|2              
        ┌───────┴───────┐               ┌───────┴───────┐       
       8|1            31|0            65|1            95|0      
    ┌───┘                               └───┐                   
   6|0                                    72|0  
Copy<br><br>
<br>
Insertion Time: To insert an element into an <a data-tooltip-position="top" aria-label="AVL" data-href="AVL" href="https://blog.allenygy.vip/algorithm/dsa/avl.html" class="internal-link" target="_self" rel="noopener">AVL</a> tree, we perform a binary search to find the correct position for the new element and then possibly perform some rotations to maintain the <a data-tooltip-position="top" aria-label="AVL" data-href="AVL" href="https://blog.allenygy.vip/algorithm/dsa/avl.html" class="internal-link" target="_self" rel="noopener">AVL</a> property. The time complexity of both these operations is ( O(log n) ) because the tree is balanced.

<br>
Building the Tree: If we insert ( n ) distinct integers into an <a data-tooltip-position="top" aria-label="AVL" data-href="AVL" href="https://blog.allenygy.vip/algorithm/dsa/avl.html" class="internal-link" target="_self" rel="noopener">AVL</a> tree, each insert operation takes ( O(log n) ) time. Since there are ( n ) elements, the total time to build the tree is ( O(n log n) ).

<br>
In-order Traversal: Once the <a data-tooltip-position="top" aria-label="AVL" data-href="AVL" href="https://blog.allenygy.vip/algorithm/dsa/avl.html" class="internal-link" target="_self" rel="noopener">AVL</a> tree is built, we can perform an in-order traversal to retrieve the elements in sorted order. An in-order traversal of a binary search tree visits the nodes in ascending order, which is what we want for sorting. The time complexity for in-order traversal is ( O(n) ), as each node is visited exactly once.

<br>
Total Time Complexity: The total time complexity of sorting an array using an <a data-tooltip-position="top" aria-label="AVL" data-href="AVL" href="https://blog.allenygy.vip/algorithm/dsa/avl.html" class="internal-link" target="_self" rel="noopener">AVL</a> tree is the time to build the tree (( O(n log n) )) plus the time for the in-order traversal (( O(n) )). Hence, the overall time complexity is ( O(n log n) ).

<br>Therefore, we have shown that using an <a data-tooltip-position="top" aria-label="AVL" data-href="AVL" href="https://blog.allenygy.vip/algorithm/dsa/avl.html" class="internal-link" target="_self" rel="noopener">AVL</a> tree to sort an array of distinct integers has a time complexity of ( O(n log n) ).<br><br>a.<br><br><br><br>
<br>( L = 16 ): Each leaf node can hold up to 16 records.
<br>( M = 171 ): Each internal node can have up to 171 children (170 keys + 1 extra pointer).
<br>b.<br>
<br>“insert-1.png” could not be found.
<br>“delete-1.png” could not be found.
]]></description><link>https://blog.allenygy.vip/algorithm/dsa/assignment/dsa-assignment-1.html</link><guid isPermaLink="false">Algorithm/DSA/Assignment/dsa-assignment-1.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:51:23 GMT</pubDate></item><item><title><![CDATA[<a data-href="dsa-assignment-2" href="algorithm/dsa/assignment/dsa-assignment-2.html" class="internal-link" target="_self" rel="noopener">dsa-assignment-2</a>]]></title><description><![CDATA[ 
 <br><br><br>
Export to clipboard<br><br><br>
<br>
<br>When <br>
<br>
<br><br>
<br>initial state:

<br>|1|3|6|5|4|7|


<br>insert(1)

<br>|1|3|6|5|4|7|


<br>insert(3)

<br>|3|1|6|5|4|7|


<br>insert(6)

<br>|6|1|3|5|4|7|


<br>insert(5)

<br>|6|5|3|1|4|7|


<br>insert(4)

<br>|6|5|3|1|4|7|


<br>insert(7)

<br>|7|5|6|1|4|3|


<br>deleteMax()

<br>|6|5|3|1|4|7|


<br>deleteMax()

<br>|5|4|3|1|6|7|


<br>deleteMax()

<br>|4|1|3|5|6|7|


<br>deleteMax()

<br>|3|1|4|5|6|7|


<br>deleteMax()

<br>|1|3|4|5|6|7|


<br><br>
Export to clipboard<br><br>initial state:<br>                              25|3                              
                ┌───────────────┴───────────────┐               
              13|1                            80|2              
        ┌───────┴───────┐               ┌───────┴───────┐       
       6|0            15|0            58|1            82|0      
                                        └───┐                   
                                          65|0       
Copy<br>insert:29<br>                              25|3                              
                ┌───────────────┴───────────────┐               
              13|1                            80|2              
        ┌───────┴───────┐               ┌───────┴───────┐       
       6|0            15|0            58|1            82|0      
                                    ┌───┴───┐                   
                                  29|0    65|0          
Copy<br>insert:70<br>                              25|3                              
                ┌───────────────┴───────────────┐               
              13|1                            65|2              
        ┌───────┴───────┐               ┌───────┴───────┐       
       6|0            15|0            58|1            80|1      
                                    ┌───┘           ┌───┴───┐   
                                  29|0            70|0    82|0  
Copy<br>insert:68<br>                              65|3                              
                ┌───────────────┴───────────────┐               
              25|2                            80|2              
        ┌───────┴───────┐               ┌───────┴───────┐       
      13|1            58|1            70|1            82|0      
    ┌───┴───┐       ┌───┘           ┌───┘                       
   6|0    15|0    29|0            68|0    
Copy<br><br>a)<br><br>
<br>
<br>
<br>
<br>b)<br>
<br>“insert.png” could not be found.
<br>“delete.png” could not be found.
]]></description><link>https://blog.allenygy.vip/algorithm/dsa/assignment/dsa-assignment-2.html</link><guid isPermaLink="false">Algorithm/DSA/Assignment/dsa-assignment-2.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:44:36 GMT</pubDate></item><item><title><![CDATA[<a data-href="written-assignment-am" href="algorithm/dsa/assignment/written-assignment-am.html" class="internal-link" target="_self" rel="noopener">written-assignment-am</a>]]></title><description><![CDATA[ 
 <br><br><br>What is the total number of basic operations that the following code piece consume? Make your answer precise and list your steps of calculation.<br>int afunc(int n){
    int res = 0;   // 1
    for(int i=0;i&lt;n;i++){   // 3n+2
        for(int j=0;j&lt;n;j++){ // (6n+2)n
            res+=i*j;
        }
    }
    return res; // 1
}
Copy<br>The total number of basic operations that the code piece consumes is<br><br>
<br><br>For each pair of  and  below, decide if , , or . Justify your answer using the definition of this asymptotic notation. Note that more than one of these relations may hold for a given pair; list all correct ones.<br>
<br>
 and .
(1) prove 
   when 
 
 
(2) prove 
 <br>
Now prove 
   prove 
 
 
 
 
 

<br>
<br> and .
<br>Suppose , then<br><br><br><br>Let f(n) be an asymptotically positive function. Prove or disprove each of the following conjectures.<br>
Hint: You can prove a conjecture using its definition or disprove a conjecture by giving negative examples.<br>(a) <br><br><br> is a constant<br><br>(b) <br><br><br><br><br><br>Solve the following recurrence relation and represent T(n) using a formula of n.<br><br><br><br><br>
=T(\frac{n}{2^2})+2=T(\frac{n}{2^3})+3=T(\frac{n}{2^4})+4...=T(\frac{n}{2^i})+i$<br>let <br>
<br><br>In the merge sort algorithm, we divide an array into two halves, recursively sort the subarrays, and then merge them into a sorted array. Now Ming proposes a “merge sort pro” algorithm. In “merge sort pro”, an array is divided evenly into four subarrays instead of two, and the rest of the steps are similar to those of merge sort. What do you think is the time cost of “merge sort pro” if the input size is n? Prove your answer.<br><br>
<br><br>
<br>
<br>
Let <br>
<br>
<br><br>We are given an array of n items and for any two items A and B: • We can check if A and B are equal. • We cannot check which one is greater and which one is smaller, so we cannot sort them. For example, the array may be {♥,♥,☆,○,△,♥,♥,♥,♥,♫,☆,■,♥}. Our task is to find the majority of the array, if it has one. The majority of an array is defined as the item that appears strictly more than n/2 times. For example, in the sample array above, the array size is 13 and item ♥ appears 7 times, so ♥ is the majority. Use a divide-and-conquer algorithm to solve the problem in O(n*log.n). Describe your algorithm in pseudo-code.<br>MERGECOUNT(A, left, right)
1.     IF left &gt;= right
2.          RETURN
3.     center = (left + right) / 2
4.     MERGECOUNT(A, left, center)
5.     MERGECOUNT(A, center + 1, right)
6.     MERGE_WITH_COUNT(A, left, center, right)

MERGE_WITH_COUNT(A, left, center, right)
1.     Create an empty map/dictionary charCount
2.     FOR i = left to right
3.         IF A[i] exists in charCount
4.             Increment count of A[i] in charCount
5.         ELSE
6.             Set count of A[i] in charCount to 1
7.     maxChar = character with maximum count in charCount
8.     maxCount = count of maxChar in charCount
Copy]]></description><link>https://blog.allenygy.vip/algorithm/dsa/assignment/written-assignment-am.html</link><guid isPermaLink="false">Algorithm/DSA/Assignment/written-assignment-am.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:44:36 GMT</pubDate></item><item><title><![CDATA[<a data-tooltip-position="top" aria-label="Fenwick" data-href="Fenwick" href="algorithm/dsa/fenwick.html" class="internal-link" target="_self" rel="noopener">树状数组</a>]]></title><description><![CDATA[ 
 <br><br>最简单的树状数组支持两种操作，时间复杂度均为<br>
巧妙地利用了二进制（实际上，树状数组的英文名BIT，直译过来就是二进制下标树）<br>
<br>单点修改：更改数组中一个元素的值
<br>区间查询：查询一个区间内所有元素的和
<br><br>
<br> 二进制数最右边的一个1，连带着它之后的0
<br>  维护  区间
<br><br>
<br>
<br><br>
<br>单点修改
<br>void update(int i, int val) {
	for (; i &lt; tree.size(); i += i &amp; -i) {
		tree[i] += val;
	}
}
Copy<br>
<br>求前n项和
<br>// 返回下标在 [1,i] 的元素之和,
int pre(int i) {
	int res = 0;
	while (i &gt; 0) {
		res += tree[i];
		i &amp;= i - 1;
	}
	return res;
}
Copy<br>
<br>区间求和
<br>// 返回下标在 [l,r] 的元素之和
int query(int l, int r) {
	if (r &lt; l) {
		return -1;
	}
	return pre(r) - pre(l - 1);
}
Copy<br><br>class Fenwick {
	vector&lt;int&gt; tree;
public:
	Fenwick(int n) : tree(n) {}
	// 把下标为 i 的元素增加 1
	
	void add(int i) {
		while (i &lt; tree.size()) {
			tree[i]++;
			i += i &amp; -i; // i &amp; -i 会得到 i 的最后一个 1 即 lowbit
		}
	}
	
	void update(int i, int val) {
		for (; i &lt; tree.size(); i += i &amp; -i) {
			tree[i] += val;
		}
	}
  
	// 返回下标在 [1,i] 的元素之和
	int pre(int i) {
		int res = 0;
		while (i &gt; 0) {
			res += tree[i];
			i &amp;= i - 1;
		}
		return res;
	}
	
	// 返回下标在 [l,r] 的元素之和
	int query(int l, int r) {
		if (r &lt; l) {
			return -1;
		}
		return pre(r) - pre(l - 1);
	}

};
Copy<br><a data-tooltip-position="top" aria-label="https://leetcode.cn/problems/distribute-elements-into-two-arrays-ii/" rel="noopener" class="external-link" href="https://leetcode.cn/problems/distribute-elements-into-two-arrays-ii/" target="_blank">3072. 将元素分配到两个数组中 II</a>]]></description><link>https://blog.allenygy.vip/algorithm/dsa/fenwick.html</link><guid isPermaLink="false">Algorithm/DSA/Fenwick.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:51:35 GMT</pubDate></item><item><title><![CDATA[Tree]]></title><description><![CDATA[ 
 <br><br>
<br>Basic Concepts
<br>Binary Trees
<br>Binary Search Trees
<br><br>A tree is a collection of nodes<br>
<br>The collection can be empty
<br>(recursive definition) If not empty, a tree consists of a distinguished node r (the root), and zero or more nonempty subtrees , each of whose roots are connected by a directed edge from root
<br>Concept<br>
<br>Root and Leaf
<br>Child and Parent

<br>Every node except the root has one parent
<br>A node can have an zero or more children
<br>A leaf node has no children


<br>Sibling<br>
nodes with same parent
<br>Path<br>
<br>a sequence of edges
<br>Length of a path<br>
Depth of a node<br>
<br>length of the unique path to the root
<br>Height of a node<br>
<br>length of the longest path to a leaf
<br>Tree height<br>
<br>the height of the root
<br>the depth of the deepest leaf
<br>Ancestor and descendant<br>
<br>If there is a path from n1 to n2
<br>n1 is an ancestor of n2, n2 is a descendant of n1
<br>Proper ancestor and proper descendant
<br><br>A perfect binary tree is the tree where a node can have 0 or 2 children and all leaves are at the same depth<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DSA/Tree/PerfectBinaryTree.png" referrerpolicy="no-referrer">]]></description><link>https://blog.allenygy.vip/algorithm/dsa/binarytree.html</link><guid isPermaLink="false">Algorithm/DSA/BinaryTree.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:51:32 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DSA/Tree/PerfectBinaryTree.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DSA/Tree/PerfectBinaryTree.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<span class="math math-inline is-loaded"><mjx-container class="MathJax" jax="CHTML"><mjx-math class="MJX-TEX"><mjx-msup><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D435 TEX-I"></mjx-c></mjx-mi><mjx-script style="vertical-align: 0.363em;"><mjx-mo class="mjx-n" size="s"><mjx-c class="mjx-c2B"></mjx-c></mjx-mo></mjx-script></mjx-msup><mjx-mtext class="mjx-n"><mjx-c class="mjx-cA0"></mjx-c></mjx-mtext><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D447 TEX-I"></mjx-c></mjx-mi><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D45F TEX-I"></mjx-c></mjx-mi><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D452 TEX-I"></mjx-c></mjx-mi><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D452 TEX-I"></mjx-c></mjx-mi></mjx-math></mjx-container></span>]]></title><description><![CDATA[ 
 <br><br><br>
<br>
Binary search tree has one key to decide which of the two branches to take

<br>
M-ary search tree needs M-1 keys to decide which branch to take

<br>
M-ary search tree should be balanced in some way.

<br>We don’t want an M-ary search tree to degenerate to a linked list, or even a binary search tree


<br>
Thus, require that each node is at least half full!

<br><br>
<br>A B+ tree of order M
<br>Each internal node has at most M children (M-1 keys)
<br>Each internal node, except the root, has between  and  keys<br>
Each leaf has between  keys and corresponding data items
<br><br>
<br>
A  of order M (M&gt;3) is an M-ary tree with the following properties:

<br>
The data items are stored in leaves

<br>
The root is either a leaf or has between two and M children

<br>
The non-leaf nodes store up to M-1 keys to guide the searching; key i represents the smallest key in subtree i+1

<br>
All non-leaf nodes (except the root) have between  and M children

<br>
All leaves are at the same depth and have between  and L data items, for some L (usually L &lt;&lt; M, but we will assume M=L in most examples)

<br>
Keys in internal Nodes

<br>
key i in an internal node is the smallest key in its i+1 subtree (i.e. right subtree of key i)

<br><br><br>
<br>Suppose that we want to insert a key K and its associated record.
<br>Search for the key K using the search procedure. This will bring us to a leaf x
<br>Insert K into x
<br>Insert Into Leaf<br>
<br>If leaf x contains &lt; L keys, then insert K into x (at the correct position in node x)
<br>If x is already full (i.e. containing L keys) then split x

<br>Cut x off from its parent
<br>Insert K into x, pretending x has space for K. Now x has L+1 keys.
<br>After inserting K, split x into 2 new leaves  and , with  containing the  smallest keys, and  containing the remaining   keys.  Let J be the minimum key in 
<br>Make a copy of J to be the parent of  and , and insert the copy together with its child pointers into the old parent of x.


<br>Insert Into Internal Node When leaf is Full and Internal Node is also Full<br>To insert a key K into a full internal node x:<br>
<br>Cut x off from its parent
<br>Insert K and its left and right child pointers into x, pretending there is space.  Now x has M keys (and M+1 pointers).
<br>Split x into 2 new internal nodes  and , with  containing the   smallest keys, and  containing the  largest keys.  Note that the  key J is not placed in  or <br>
Make J the parent of xL and xR, and insert J together with its child pointers into the old parent of x.
<br><br>Situation I:<br>
<br>The target is a key in some internal node (needs to be replaced, according to our convention)
<br>Situation II:<br>
<br>After deleting target from leaf x, x contains less than  keys (needs to merge nodes)
<br><br>After deleting from node x, we can access y directly and replace target by the new smallest key in x<br><br>Let u be the leaf that has  keys (too few)<br>
Let v be a sibling of u with at least  keys<br>
Let k be the key in the parent of u and v that separates the pointers to u and v<br>
There are two cases<br><br>Case 1: v contains  or more keys and v is the right sibling of u<br>
Move the leftmost record from v to u<br><br>v contains  or more keys and v is the left sibling of u<br>
Move the rightmost record from v to u<br>
Then set the key in parent of u that separates u and v to be the new smallest key in u]]></description><link>https://blog.allenygy.vip/algorithm/dsa/b+tree.html</link><guid isPermaLink="false">Algorithm/DSA/B+Tree.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:51:27 GMT</pubDate></item><item><title><![CDATA[<a data-href="AVL" href="algorithm/dsa/avl.html" class="internal-link" target="_self" rel="noopener">AVL</a>]]></title><description><![CDATA[ 
 <br><br>
<br>二叉搜索树，在插入和删除时可能失衡
<br>如在插入和删除时旋转，始终令其保持平衡，则成为自平衡点二叉搜索树
<br>AVL是自平衡二叉搜索树的实现之一
<br><br>
<br>LL 一次右旋

<br>失衡节点左边高
<br>失衡节点左孩子左边高


<br>LR 失衡节点左子树左旋，再右旋

<br>失衡节点左边高
<br>失衡节点左孩子右边高


<br>RL 失衡节点右子树右旋，再左旋

<br>失衡节点右边高
<br>失衡节点右孩子左边高


<br>RR 一次左旋

<br>失衡节点右边高
<br>失衡节点右孩子右边高


]]></description><link>https://blog.allenygy.vip/algorithm/dsa/avl.html</link><guid isPermaLink="false">Algorithm/DSA/AVL.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:51:23 GMT</pubDate></item><item><title><![CDATA[<a data-href="Graph-Overview" href="algorithm/graph/graph-overview.html" class="internal-link" target="_self" rel="noopener">Graph-Overview</a>]]></title><description><![CDATA[ 
 <br><br>
<br>最短路
<br>最小生成树 
<br>二分图 
<br>拓扑排序
<br>基环树 
<br>欧拉路径
<br><br>vector&lt;int&gt; topo_sort(int k, vector&lt;vector&lt;int&gt;&gt; &amp;edges) {
	vector&lt;vector&lt;int&gt;&gt; g(k);
	vector&lt;int&gt; in_deg(k);
	for (auto &amp;e : edges) {
		int x = e[0], y = e[1] ; // 顶点编号从 0 开始，方便计算
		g[x].push_back(y);
		++in_deg[y];
	}
	vector&lt;int&gt; order;
	queue&lt;int&gt; q;
	for (int i = 0; i &lt; k; ++i)
		if (in_deg[i] == 0)
			q.push(i);
		while (!q.empty()) {
			int x = q.front();
			q.pop();
			order.push_back(x);
			for (int y : g[x])	
				if (--in_deg[y] == 0)
					q.push(y);
		}
	return order;
}
Copy]]></description><link>https://blog.allenygy.vip/algorithm/graph/graph-overview.html</link><guid isPermaLink="false">Algorithm/Graph/Graph-Overview.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:52:18 GMT</pubDate></item><item><title><![CDATA[<a data-tooltip-position="top" aria-label="Prime-Sieve" data-href="Prime-Sieve" href="algorithm/numbertheory/prime-sieve.html" class="internal-link" target="_self" rel="noopener">质数筛</a>]]></title><description><![CDATA[ 
 <br><br><br>vector&lt;int&gt; prime;
bool is_prime[N];
void Eratosthenes(int n) {
	is_prime[0] = is_prime[1] = false;
	for (int i = 2; i &lt;= n; ++i) is_prime[i] = true;
	for (int i = 2; i &lt;= n; ++i) { 
		if (is_prime[i]) { prime.push_back(i); 
		if ((long long)i * i &gt; n) continue; 
		for (int j = i * i; j &lt;= n; j += i) 
		// 因为从 2 到 i - 1 的倍数我们之前筛过了，这里直接从 i 
		// 的倍数开始，提高了运行速度 
		is_prime[j] = false; 
		// 是 i 的倍数的均不是素数 
		}
	 } 
}
Copy<br><br>vector&lt;int&gt; pri; 
bool not_prime[N]; 
void pre(int n) { 
	for (int i = 2; i &lt;= n; ++i) { 
		if (!not_prime[i]) pri.push_back(i);
		for (int pri_j : pri) { 
			if (i * pri_j &gt; n) break; 
			not_prime[i * pri_j] = true; 
			if (i % pri_j == 0) { 
				// i % pri_j == 0 
				// 换言之，i 之前被 pri_j 筛过了 
				// 由于 pri 里面质数是从小到大的，所以 i 乘上其他的质数的结果一定会被 
				// pri_j 的倍数筛掉，就不需要在这里先筛一次，所以这里直接 break 
				// 掉就好了 
				break; 
			} 
		} 
	} 
}
Copy<br><br><a data-tooltip-position="top" aria-label="https://leetcode.cn/problems/count-primes/" rel="noopener" class="external-link" href="https://leetcode.cn/problems/count-primes/" target="_blank">204. 计数质数</a>]]></description><link>https://blog.allenygy.vip/algorithm/numbertheory/prime-sieve.html</link><guid isPermaLink="false">Algorithm/NumberTheory/Prime-Sieve.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:52:10 GMT</pubDate></item><item><title><![CDATA[<a data-href="递归" href="algorithm/recursion/递归.html" class="internal-link" target="_self" rel="noopener">递归</a>]]></title><description><![CDATA[ 
 <br><br><br>程序调用自身的编程技巧称为递归 Recursion<br>
<br>递归作为一种算法在程序设计语言中广泛应用。
<br>一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解。
<br>递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。 
<br>一般来说，递归需要有边界条件、递归前进段和递归返回段。
<br>当边界条件不满足时，递归前进；当边界条件满足时，递归返回。
<br>递归的能力在于用有限的语句来定义对象的无限集合。<br><br>递归：你打开面前这扇门，看到屋里面还有一扇门。你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门，你继续打开它。若干次之后，你打开面前的门后，发现只有一间屋子，没有门了。然后，你开始原路返回，每走回一间屋子，你数一次，走到入口的时候，你可以回答出你到底用这你把钥匙打开了几扇门。<br>循环：你打开面前这扇门，看到屋里面还有一扇门。你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门（若前面两扇门都一样，那么这扇门和前两扇门也一样；如果第二扇门比第一扇门小，那么这扇门也比第二扇门小，你继续打开这扇门，一直这样继续下去直到打开所有的门。但是，入口处的人始终等不到你回去告诉他答案。<br><br>1. 明确递归终止条件（递归出口）<br>我们知道，递归就是有去有回，既然这样，那么必然应该有一个明确的临界点，程序一旦到达了这个临界点，就不用继续往下递去而是开始实实在在的归来。换句话说，该临界点就是一种简单情境，可以防止无限递归。<br>2. 给出递归终止时的处理办法<br>我们刚刚说到，在递归的临界点存在一种简单情境，在这种简单情境下，我们应该直接给出问题的解决方案。一般地，在这种情境下，问题的解决方案是直观的、容易的。<br>3. 提取重复的逻辑，缩小问题规模<br>我们在阐述递归思想内涵时谈到，递归问题必须可以分解为若干个规模较小、与原问题形式相同的子问题，这些子问题可以用相同的解题思路来解决。从程序实现的角度而言，我们需要抽象出一个干净利落的重复的逻辑，以便使用相同的方式解决子问题。<br><br><br><br>柳州传说是歌仙刘三姐的传歌之地，最近举办了一次山歌大赛。 在这个项目中，参赛者每次完成一个段都会得到一个分数。总分数的计算方式基于一个特殊 的数学表达式 f(x,n)。表达式 f(x,n) 的定义如下：<br><img title="4e4fe6b7f35886e021f9a1fa1334df4.jpg" alt="4e4fe6b7f35886e021f9a1fa1334df4.jpg" src="https://img.lsyz.top/2022/08/09/25ad9e9d95723.jpg" referrerpolicy="no-referrer"><br>其中，x 表示参赛者的基本得分，n 表示参赛者完成的山歌段落数。<br>津津、菲菲和皮皮的任务是编写一个程序，并计算选手 A（x=4.2,n=10）、选手 B（x=2.5,n=15） 时 f(x,n)的值<br><br>输入x和n。<br><br>函数值，保留两位小数。<br><br>Input<br>4.2 10
Copy<br>Output<br>3.68
Copy<br><br>#include&lt;bits/stdc++.h&gt;
#include&lt;iostream&gt;
#define int long long
#define endl '\n'
using namespace std;

double f(double x, int n){
    if(n==1) return sqrt(1+x);
    return sqrt(n+f(x,n-1));
}

signed main() {
    double x; 
    int n;
    cin&gt;&gt;x&gt;&gt;n;
    cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;f(x,n)&lt;&lt;endl;
    return 0;
}
Copy<br><br><br>用递归的方法求 Hermite 多项式的值。<br><br><br>给定的   和正整数 <br><br>对给定的   和正整数 ，求多项式的值。<br><br>Input<br>1 2
Copy<br>Output<br>4.00
Copy<br><br>#include&lt;bits/stdc++.h&gt;
#include&lt;iostream&gt;
#define int long long
#define endl '\n'
using namespace std;

double h(double x, int n){
    if(n==0) return 1;
    if(n==1) return 2*x;
    return 2*x*h(x,n-1)-2*(n-1)*h(x,n-2);
}

signed main() {
    int n;
    double x;
    cin&gt;&gt;n&gt;&gt;x;
    cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;h(x,n)&lt;&lt;endl;
    return 0;
}
Copy<br><br><br>有一头母牛，从第二年起，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？<br><br>输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt;n&lt;55)，n的含义如题目中描述。<br>n=0表示输入数据的结束，不做处理。<br><br>对于每个测试实例，输出在第n年的时候母牛的数量。每个输出占一行。<br><br>Input<br>2
4
5
0
Copy<br>Output<br>2
4
6
Copy<br><br>第n年的牛的数量为：n-1年的数量和今年新出生的牛的数量<br>
今年新出生的牛的数量为 n-3 年前牛的数量<br><br>#include &lt;bits/stdc++.h&gt;
#include &lt;iostream&gt;
#define int long long
#define endl '\n'
using namespace std;

const int MOD = 1000;
const int MAXN = 1000000;

int val[MAXN] = {0};

void solve(int x)
{

    if(val[x]!=0){
        cout &lt;&lt; val[x] &lt;&lt; endl;
        return;
    }
    val[1]=1;
    val[2]=2;
    val[3]=3;
    for(int i=4;i&lt;=x;i++){
        val[i]=(val[i-1]+val[i-3]);
    }
    cout &lt;&lt; val[x] &lt;&lt; endl;
}

signed main()
{
    int x;
    cin &gt;&gt; x;
    while (x)
    {
        solve(x);
        cin &gt;&gt; x;
    }
    return 0;
}
Copy]]></description><link>https://blog.allenygy.vip/algorithm/recursion/递归.html</link><guid isPermaLink="false">Algorithm/Recursion/递归.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 16:58:44 GMT</pubDate><enclosure url="https://img.lsyz.top/2022/08/09/25ad9e9d95723.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://img.lsyz.top/2022/08/09/25ad9e9d95723.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<strong>Recursion-BinaryTree</strong>]]></title><description><![CDATA[<a class="tag" href="https://blog.allenygy.vip/?query=tag:Experience" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Experience</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:achievement" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#achievement</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:Experience" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Experience</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:Experience" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Experience</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:Experience" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Experience</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:Experience" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Experience</a> 
 <br><br><br>刚开始直接左右节点分别遍历，取最小值<br>
没考虑根节点只有一个分支的情况<br>class Solution {
public:
	int minDepth(TreeNode* root) {
		if(root==nullptr) return 0;
		int left = minDepth(root-&gt;left);
		int right = minDepth(root-&gt;right);	
		return min(left,right)+1;	
	}
};
Copy<br>每一层的情况递归时没有加一<br>class Solution {
public:
	int minDepth(TreeNode* root) {
		if(root-&gt;left==nullptr&amp;&amp;root-&gt;right==nullptr) return 1;
		else if(root-&gt;left==nullptr&amp;&amp;root-&gt;right!=nullptr) 					return minDepth(root-&gt;right);
		else if(root-&gt;left!=nullptr&amp;&amp;root-&gt;right==nullptr) 					return minDepth(root-&gt;left);
		else 
			return 
				min(minDepth(root-&gt;right),minDepth(root-&gt;left));
	}
};
Copy<br>class Solution {
public:
	int minDepth(TreeNode* root) {
		if(root==nullptr)return 0;
		if(root-&gt;left==nullptr &amp;&amp; root-&gt;right==nullptr) 
			return 1;
		int m1=minDepth(root-&gt;right);
		int m2=minDepth(root-&gt;left);
		if(root-&gt;left==nullptr||root-&gt;right==nullptr) 
			return m1+m2+1;
		return min(m1,m2)+1;
	}
};
Copy<br><br><a href="https://blog.allenygy.vip?query=tag:Experience" class="tag" target="_blank" rel="noopener">#Experience</a><br>
叶子节点的定义<br>node-&gt;left==nullptr&amp;&amp;node-&gt;right==nullptr
Copy<br>class Solution {
public:
	bool hasPathSum(TreeNode* root, int targetSum) {
		if(root==nullptr)return false;
		if(root-&gt;left==nullptr&amp;&amp;root-&gt;right==nullptr) 
			return targetSum==root-&gt;val;
		bool l = hasPathSum(root-&gt;left,targetSum-root-&gt;val);
		bool r = hasPathSum(root-&gt;right,targetSum-root-&gt;val);
		return l||r;
	}
};
Copy<br><br><a href="https://blog.allenygy.vip?query=tag:achievement" class="tag" target="_blank" rel="noopener">#achievement</a><br>
第一次独立写出，递归，回溯？哈哈哈哈<br>class Solution {
vector&lt;vector&lt;int&gt;&gt; res;
vector&lt;int&gt; v;
public:
	void dfs(TreeNode* root, int targetSum) { 
		if(root==nullptr) return ;
		if(root-&gt;left==nullptr&amp;&amp;root-&gt;right==nullptr)
			if(targetSum==root-&gt;val){
				v.push_back(root-&gt;val);
				res.push_back(v);
				v.pop_back();
			}
		if(root-&gt;left){
			v.push_back(root-&gt;val);
			dfs(root-&gt;left,targetSum-root-&gt;val);
			v.pop_back();
		}
		if(root-&gt;right){
			v.push_back(root-&gt;val);
			dfs(root-&gt;right,targetSum-root-&gt;val);
			v.pop_back();
		}
}

	vector&lt;vector&lt;int&gt;&gt; pathSum(TreeNode* root, int targetSum) {
    	if(root==nullptr)return {};
    	dfs(root,targetSum);
    	return res; 
    }

};
Copy<br><br>class Solution {
vector&lt;vector&lt;int&gt;&gt;res;
vector&lt;int&gt;v;
public:
	void dfs(TreeNode* root){
		if(root-&gt;left==nullptr&amp;&amp;root-&gt;right==nullptr){	
			v.push_back(root-&gt;val);
            res.push_back(v);
            v.pop_back();
		}
        if(root-&gt;left){
            v.push_back(root-&gt;val);
            dfs(root-&gt;left);
            v.pop_back();
		}			
		if(root-&gt;right){
			v.push_back(root-&gt;val);
            dfs(root-&gt;right);
            v.pop_back();	
		}	
	}

    int sumNumbers(TreeNode* root) {
    	if(root==nullptr)return 0;
	    dfs(root);
	    int ans=0;
        for(auto row:res){
        	int tmp=0;
        	for(int num:row){
        		tmp=((tmp*10)+num);
    		}	
	    	ans+=tmp;
    	}
    	return ans;
	}
};
Copy<br>官解简洁写法<br>class Solution { 
public: 
	int dfs(TreeNode* root, int prevSum) {
		if (root == nullptr) { return 0; } 
		int sum = prevSum * 10 + root-&gt;val; 
		if (root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr){ 				return sum;
		} else { 
			return dfs(root-&gt;left, sum) + dfs(root-&gt;right,sum);
		} 
	} 
	int sumNumbers(TreeNode* root) {
		 return dfs(root, 0); 
	} 
};
Copy<br><br><a href="https://blog.allenygy.vip?query=tag:Experience" class="tag" target="_blank" rel="noopener">#Experience</a><br>
把变量当作参数传递进函数，则不需要回溯变量<br>class Solution {
public:
	void construct_paths(TreeNode* root, string path, vector&lt;string&gt;&amp; paths) {
    	if (root != nullptr) {
    		path += to_string(root-&gt;val);
    		if (root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr) { // 当前节点是叶子节点
    			paths.push_back(path); // 把路径加入到答案中
    		} else {
    			path += "-&gt;"; // 当前节点不是叶子节点，继续递归遍历
    			construct_paths(root-&gt;left, path, paths);
    			construct_paths(root-&gt;right, path, paths);
    		}
    	}
    
    }
	vector&lt;string&gt; binaryTreePaths(TreeNode* root) {
		vector&lt;string&gt; paths;
		construct_paths(root, "", paths);
		return paths;
	}
};
Copy<br><br>class Solution {
public:
	int goodNodes(TreeNode* root,int mx=INT_MIN) {
		if(root==nullptr) return 0;
		int left = goodNodes(root-&gt;left,max(mx,root-&gt;val));
		int right = goodNodes(root-&gt;right, max(mx,root-&gt;val));
		return left+right+(mx&lt;=root-&gt;val);
	}
};
Copy<br><br><a href="https://blog.allenygy.vip?query=tag:Experience" class="tag" target="_blank" rel="noopener">#Experience</a><br>
先遍历右子树并根据深度决定是否记录该节点<br>class Solution {
vector&lt;int&gt;ans;
public:
	void dfs(TreeNode* root,int depth){
		if(depth==ans.size()) ans.push_back(root-&gt;val);
		if(root-&gt;right) dfs(root-&gt;right,depth+1);
		if(root-&gt;left) dfs(root-&gt;left,depth+1);
	}
	vector&lt;int&gt; rightSideView(TreeNode* root) {
		if(root==nullptr)return {};
		dfs(root,0);
		return ans;
	}
};
Copy<br><br><a href="https://blog.allenygy.vip?query=tag:Experience" class="tag" target="_blank" rel="noopener">#Experience</a><br>
开始的时候犹豫当前节点判断，左子树判断和右子树判断<br>
后来发现并列就好了<br>class Solution {
public:
	bool isSameTree(TreeNode* p, TreeNode* q) {
		if(p==nullptr||q==nullptr)return (p==q);
		return (p-&gt;val==q-&gt;val)&amp;&amp;(isSameTree(p-&gt;left,q-&gt;left))&amp;&amp;(isSameTree(p-&gt;right,q-&gt;right));
	}
};
Copy<br><br>class Solution {
public:
	bool isSame(TreeNode* p,TreeNode *q){
		if(p==nullptr||q==nullptr)return (p==q);
		return (p-&gt;val==q-&gt;val)&amp;&amp;isSame(p-&gt;left,q-&gt;right)&amp;&amp;isSame(p-&gt;right,q-&gt;left);
	}
	bool isSymmetric(TreeNode* root) {
		return isSame(root-&gt;left,root-&gt;right);
	}
};
Copy<br><br>class Solution {
public:
	int get_height(TreeNode *node){
		if(node==nullptr)return 0;
		int leftH = get_height(node-&gt;left);
		if(leftH==-1) return -1;
		int rightH = get_height(node-&gt;right);
		if(rightH==-1||abs(leftH-rightH)&gt;1)return -1;
		return max(leftH,rightH)+1;
	}
	bool isBalanced(TreeNode* root) {
		return get_height(root)!=-1;
	}
};
Copy<br><br>class Solution {
public:
	TreeNode* invertTree(TreeNode* root) {
		if(root==nullptr)return nullptr;
		root-&gt;left=invertTree(root-&gt;left);
		root-&gt;right=invertTree(root-&gt;right);
		TreeNode*tmp=root-&gt;left;
		root-&gt;left=root-&gt;right;
		root-&gt;right=tmp;
		return root;
	}
};
Copy<br><br><a href="https://blog.allenygy.vip?query=tag:Experience" class="tag" target="_blank" rel="noopener">#Experience</a> <br>
<br>我理解到，只能先删叶子节点<br>
判断叶子节点
<br>if (root-&gt;left == root-&gt;right) 
Copy<br>
<br>如果 limit &gt; 0 说明从根到叶子的路径和小于 limit，删除叶子，否则不删除
<br>如果有儿子没被删除，就不删 root，否则删 root<br>
判断是否存在子节点
<br>if(root-&gt;left || root-&gt;right)
Copy<br>class Solution {
public:
	TreeNode* sufficientSubset(TreeNode* root, int limit) {
		limit -= root-&gt;val;
		if (root-&gt;left == root-&gt;right) 
			return limit &gt; 0 ? nullptr : root;
		if(root-&gt;left) root-&gt;left = sufficientSubset(root-&gt;left, limit);
		if(root-&gt;right) root-&gt;right = sufficientSubset(root-&gt;right, limit);
		return root-&gt;left || root-&gt;right ? root : nullptr;
	}
};
Copy<br><br>class Solution {
	int ans = 0; // 用于记录最大长度的全局变量
	void getlongestZigZag(TreeNode* root, bool is_left, int len) {
    	if (root == nullptr) {
    	    ans = max(ans, len); // 更新最大长度
    	    return;
        }   
        // 递归地在左右子树中查找交错路径
        if (is_left) {
    	// 如果当前方向是左，那么我们要在右子树中继续找交错路径，并且长度加一
    	    getlongestZigZag(root-&gt;right, false, len + 1); // 向右走
    	    getlongestZigZag(root-&gt;left, true, 1); // 重新开始计数
        } else {
        // 如果当前方向是右，那么我们要在左子树中继续找交错路径，并且长度加一
     		getlongestZigZag(root-&gt;left, true, len + 1); // 向左走
         	getlongestZigZag(root-&gt;right, false, 1); // 重新开始计数
    	}	
	}
public:
	int longestZigZag(TreeNode* root) {
		getlongestZigZag(root-&gt;left, true, 1); // 当我们从根节点向左移动时，路径长度变为1
		getlongestZigZag(root-&gt;right, false, 1); // 同理，当我们从根节点向右移动时，路径长度变为1
		return ans -1; // 因为长度是从1开始的，我们需要减去1
	}
};
Copy]]></description><link>https://blog.allenygy.vip/algorithm/recursion/递归-二叉树.html</link><guid isPermaLink="false">Algorithm/Recursion/递归-二叉树.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 16:58:54 GMT</pubDate></item><item><title><![CDATA[<a data-href="递推" href="algorithm/recursion/递推.html" class="internal-link" target="_self" rel="noopener">递推</a>]]></title><description><![CDATA[ 
 <br><br><br>递推是按照一定的规律来求序列中的每一项,一般是通过计算前面的一些项来得出序列中的指定项。<br>
其思想是把一个复杂的庞大的计算过程转化为对简单过程的多次重复,该算法利用了计算机运算速度快和不知疲倦的机器特点。<br><br>
<br>将问题用数组形式表达
<br>求解递推关系,列出递推表达式
<br>寻找边界值
<br><br>
<br>首先知道小规模的数列
<br>求解递推关系,列出递推表达式
<br><br>🐰的故事
已知一对兔子，每个月可以生一对小兔子，小兔子出生后的第二个月会变成成年兔子，会继续生小兔子。<br>
第一个月，我们有1对小兔子。<br>
第二个月，我们有1对成年兔子的兔子。<br>
第三个月，我们有1对成年兔子的兔子，有1对小兔子，共2对。<br>
第四个月，我们有2对成年兔子的兔子，有1对小兔子，共3对。<br>
第五个月，我们有3对成年兔子的兔子，有2对小兔子，共5对。<br>
现在我们希望知道第n个月，一共有多少只兔子。
<br>题解
假设：第个月的大兔为幼兔为,总数.

已知：一对成年兔每个月可以生一对小兔子

已知：下个月的成年兔是由上个月的成年兔和幼兔组成的


<br>

<br><br>#include &lt;bits/stdc++.h&gt;
#include &lt;iostream&gt;
#define int long long
#define endl '\n'
using namespace std;

const int MOD = 1000;
const int MAXN = 1000000;

int val[MAXN] = {0};
val[1]=1, val[2]=1;

signed main() {
	int n;
	cin &gt;&gt; n;
	if(val[n]!=0){
		cout &lt;&lt; val[n] &lt;&lt; endl;
		return 0;
	}
	for(int i=3;i&lt;=x;i++){
		val[i]=(val[i-1]+val[i-2])%MOD;
	}
	cout &lt;&lt; val[x] &lt;&lt; endl;
	return 0;
}
Copy<br><br>母牛的故事

有一头母牛，从第二年起，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？

输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt;n&lt;55)，n的含义如题目中描述。
n=0表示输入数据的结束，不做处理。

对于每个测试实例，输出在第n年的时候母牛的数量。每个输出占一行。

Input
2
4
5
0
Copy
Output
2
4
6
Copy
<br> 题解
第n年的牛的数量为：n-1年的数量和今年新出生的牛的数量<br>
今年新出生的牛的数量为 n-3 年前牛的数量
<br><br>#include &lt;bits/stdc++.h&gt;
#include &lt;iostream&gt;
#define int long long
#define endl '\n'
using namespace std;

const int MOD = 1000;
const int MAXN = 1000000;

int val[MAXN] = {0};

void solve(int x)
{

    if(val[x]!=0){
        cout &lt;&lt; val[x] &lt;&lt; endl;
        return;
    }
    val[1]=1;
    val[2]=2;
    val[3]=3;
    for(int i=4;i&lt;=x;i++){
        val[i]=(val[i-1]+val[i-3]);
    }
    cout &lt;&lt; val[x] &lt;&lt; endl;
}

signed main()
{
    int x;
    cin &gt;&gt; x;
    while (x)
    {
        solve(x);
        cin &gt;&gt; x;
    }
    return 0;
}
Copy<br><br><br><br>楼梯有阶台阶,上楼时可以一步上阶,也可以一步上阶,也可以一步上阶<br>
编程计算共有多少种不同的走法。<br><br>输入的每一行包括一组测试数据，即为台阶数n。最后一行为0，表示测试结束。<br><br>每一行输出对应一行输入的结果，即为走法的数目。<br><br>Input<br>1
2
3
4
0
Copy<br>Output<br>1
2
4
7
Copy<br><br>Success

表示走到第级台阶的走法
<br>Why？
要上第级楼梯 <br>
可以从级楼梯一次走一步上去 <br>
可以从级楼梯一次性走两步上去 <br>
可以从级楼梯一次性走三步上去 
<br><br>#include&lt;bits/stdc++.h&gt;
#include&lt;iostream&gt;
#define int long long
#define endl '\n'
using namespace std;

int a[101]={0};

signed main() {
    a[1]=1;
    a[2]=2;
    a[3]=4;
    int n;
    cin &gt;&gt; n;
    while(n){
        for(int i=4;i&lt;=n;i++){
            a[i]=a[i-1]+a[i-2]+a[i-3];
        }
        cout &lt;&lt; a[n] &lt;&lt; endl;
        cin &gt;&gt; n;
    }
    return 0;
}
Copy<br><br><br>在2×n的一个长方形方格中,用一个1×2的骨牌铺满方格,输入n ,输出铺放方案的总数. 例如n=3时,为2× 3方格，骨牌的铺放方案有三种,如下图：<br><br>输入数据由多行组成，每行包含一个整数n,表示该测试实例的长方形方格的规格是2×n (0&lt; n&lt;=50)。<br><br>&nbsp;对于每个测试实例，请输出铺放方案的总数，每个实例的输出占一行。<br><br>Input<br>1
3
2
Copy<br>Output<br>1
3
2
Copy<br><br>为了使方格铺满，每次要么铺一个2×1的骨牌，要么铺两个1×2的骨牌，要么铺两个2×1的骨牌首先，分析边界值：2×1方格只有1种铺法，2×2方格只有2种铺法.如图：<br><img alt="骨牌问题" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Share/202406101734284.png" referrerpolicy="no-referrer"><br>
]表示铺满的长方形方格，一共有多少方案数

<br> 铺到最后要么剩或者
<br> 表示前 已铺满，剩最后只能竖着放
<br>为铺满  网格的方案数<br>
(如果前面的2*(n-2)的网格已经铺满, 那么最后的只能是横着放两块,否则会与重复).

<br><br>#include&lt;bits/stdc++.h&gt;
#include&lt;iostream&gt;
#define int long long
#define endl '\n'
using namespace std;
int a[51]={0};
signed main() {
    a[1]=1, a[2]=2;
    int n=0;
    while(cin&gt;&gt;n){
        for(int i=3;i&lt;=n;i++){
            a[i]=a[i-1]+a[i-2];
        }
        cout &lt;&lt; a[n] &lt;&lt; endl;
    }
    return 0;
}

Copy<br><br><br>桂林山水甲天下，漓江更是美不胜收。 漓江上竹筏整齐排列，形成了美丽的风景线，津津、菲菲和皮皮决定乘坐竹筏游览漓江景色。 已知竹筏有2种规格：一种是单人竹筏，长度为1，宽度为1；另一种是双人竹筏，长度为 2，宽度为2。假设漓江江面的面积是n*3，请问多少种不同的竹筏安排方案？<br><br>一行一个整数n,0&lt;n&lt;1000.<br><br>一行一个整数，为铺设方案的数量模12345的结果。<br><br>Input<br>2
Copy<br>Output<br>3
Copy<br><br>
  表示 江面宽度为时铺设方案的数
<br>Why  ?
当宽度是二的时候，有两种排列方法
<br><br>#include&lt;bits/stdc++.h&gt;
#include&lt;iostream&gt;
#define int long long
#define endl '\n';
using namespace std;

const int MOD=12345;

int f(int n){
    if(n==1) return 1;
    if(n==2) return 3;
    return f(n-1)+2*f(n-2);
}

signed main(){
    int n;
    cin&gt;&gt;n;
    int d[n+1];
    d[0]=0,d[1]=1,d[2]=3;
    for(int i=3;i&lt;=n;i++){
        d[i]=(d[i-1]+2*d[i-2])%MOD;
    }
    cout&lt;&lt;d[n]&lt;&lt;endl;
    return 0;
}
Copy<br><br><br>桂林为了欢迎广大游客，决定在桂林的各大街道上布置迎宾彩带。 目前有白色、蓝色和红色的彩带，并满足以下两个条件：<br>
<br>相同颜色的彩带不能放在相邻的位置
<br>一条蓝色的彩带必须放在一条白色的彩带和一条红色的彩带中间。 津津、菲菲和皮皮决定写一个程序，了解放置彩带的方案数有多少种。
<br><br>一行一个整数n，表示橱窗的宽度（或者说彩带数目）。<br><br>一行一个整数，表示装饰橱窗的彩带放置方案数。<br><br>Input<br>3
Copy<br>Output<br>4
Copy<br><br>
  表示当橱窗宽度是  时，彩带放置方案数
<br>Why ?

<br>假设一共有  条彩带，当前  条彩带排好后，则最后一条彩带

<br>一定只能是红色或者只能是白色


<br>对于第  条彩带存在两种可能
<br>蓝色或者不是蓝色<br>
- 当为蓝色时第  条彩带也必然是确定的 <br>
- 不为蓝色时第  条彩带不能确定 <br>


<br><br>#include&lt;bits/stdc++.h&gt;
#include&lt;iostream&gt;
#define int long long
#define endl '\n';
using namespace std;
signed main(){
    int n;
    cin&gt;&gt;n;
    int a[n+1]={0};
    a[1]=2,a[2]=2;
    for(int i=3;i&lt;=n;i++){
        a[i]=a[i-2]+a[i-1];
    }
    cout&lt;&lt;a[n]&lt;&lt;endl;
    return 0;
}

Copy<br><br><br>桂林的景点很多，为了让更多的游客可以顺利游玩。在不影响游览品质的前提下，旅游公司 决定通过改变路线的方法分流游客。 方案是：每个旅行团都跳过其中的一个景点（但是不能跳过号和号景点），使得它从号景点开始，到达号景点所经过的总距离最小。 假设每一个景点i都有一个坐标，从的景点到 的景点  的距离为：  <br><br>第1行1个正整数n，表示城市个数。<br>接下来的n行，每行2个数x_i和y_i,表示城市i的坐标。<br><br>一行一个数，使得它从1号城市开始，跳过某一个城市，到达n号城市所经过的最小总距离。<br><br>Input<br>4
0 0
8 3
11 -1
10 0
Copy<br>Output<br>14
Copy<br><br>
<br>先计算出总距离S (每个景点之间的曼哈顿距离总和)
<br>逐个跳过景点维护最小距离
<br>Success


<br> 初始化为 
<br>  表示跳过景点 的总距离
<br> 表示不跳过任何一个景点的总距离
<br> 表示从景点 到 景点 的距离
<br> 表示 两景点之间的曼哈顿距离

<br><br>假设 A, B两点坐标分别为 ，<br>
从到的曼哈顿距离为:   <br>int manhattandist(int x1, int y1, int x2, int y2){
    return abs(x1 - x2) + abs(y1 - y2);
}
Copy<br><br>#include &lt;bits/stdc++.h&gt;
#include &lt;iostream&gt;
#define int long long
#define endl '\n'

using namespace std;

int n, m, b, s, a[100005], x[100005], y[100005];

int manhattandist(int x1, int y1, int x2, int y2){
    return abs(x1 - x2) + abs(y1 - y2);
}


int dist(int i, int j){
    return manhattandist(x[i], y[i], x[j], y[j]);
}


signed main(){
    cin &gt;&gt; n;
    for (int i = 1; i &lt;= n; i++){
        cin &gt;&gt; x[i] &gt;&gt; y[i];
        if (i &gt; 1)
            a[i] = dist(i, i - 1); 
        s += a[i];                
    }
    m = s;
    for (int i = 2; i &lt;= n - 1; i++){
        b = s - a[i] - a[i + 1] + dist(i - 1, i + 1);
        m = min(m, b); 
    }
    cout &lt;&lt; m &lt;&lt; endl;
    return 0;
}

Copy<br><br><br>猴子吃桃子问题：猴子第一天摘下若干个桃子，当即吃了一半还不过瘾，又多吃了一个；第二天又将剩下的桃子吃掉一半又多吃了一个；以后每天早上都吃了前一天剩下的一半零一个。到了第十天想再吃时，见只剩下一个桃子，求第一天共摘了多少个桃子？<br><br>无<br><br>一个整数，第一天共有多少个桃子<br><br>#include &lt;iostream&gt;
using namespace std;

int peaches_2(int day) {
    if (day == 10) {
        return 1; 
    } else {
        return (peaches_2(day + 1) + 1) * 2;
    }
}

int peaches_1(int day) {
    int total_peaches = 1;
    for (int i = 10; i &gt; 1 ; --i) {
        total_peaches = (total_peaches + 1) * 2;
    }
    return total_peaches;
}

int main() {
    int day = 1; 
    int total_peaches = peaches_1(day);
    cout &lt;&lt; total_peaches &lt;&lt; endl;
    return 0;
}
Copy<br><br><br>有1×n（n&lt;=50）的一个长方形，用1×1、1×2和1×3的骨牌铺满方格，请问有多少种铺法？ 例如当n=3时为1×3的方格。此时用1×1、1×2和1×3的骨牌铺满方格，共有四种铺法。如下图：<img title="a0c46b6c3a466ecaa86db38ca5ca6072.png" alt="a0c46b6c3a466ecaa86db38ca5ca6072.png" src="https://img.lsyz.top/2022/11/11/24b69da8710e7.png" referrerpolicy="no-referrer"><br><br>一个整数n（n&lt;=50）<br><br>骨牌的铺法<br><br>Input<br>3
Copy<br>OutPut<br>4
Copy<br><br>#include&lt;bits/stdc++.h&gt;
#include&lt;iostream&gt;

#define int long long
#define endl '\n'

using namespace std;

signed main(){
    int n=0;
    cin&gt;&gt;n;
    int dp[52];   
    dp[0]=0;
    dp[1]=1;
    dp[2]=2;
    dp[3]=4;
    for(int i=4;i&lt;=n;i++){
        dp[i]=dp[i-1]+dp[i-2]+dp[i-3];
    }
    cout&lt;&lt;dp[n]&lt;&lt;endl;
    return 0;
}
Copy<br><br><br>Pell数列的定义是这样的，，。&nbsp;给出一个正整数k，要求Pell数列的第项模上是多少。<br><br>第1行是测试数据的组数n，后面跟着n行输入。每组测试数据占1行，包括一个正整数k (1 ≤ k &lt; 1000000)。<br><br>n行，每行输出对应一个输入。输出应是一个非负整数。<br><br>Input<br>2
1
8
Copy<br>Output<br>1
408
Copy<br><br>#include&lt;bits/stdc++.h&gt;
#include&lt;iostream&gt;
#define int long long
#define endl '\n'
using namespace std;

int a[1000001]={0};

void solve(int n){

    a[1]=1;
    a[2]=2;
    for(int i=3;i&lt;=n;i++){
        a[i]=(2*a[i-1]+a[i-2])%32767;
    }
}

signed main() {
    int T=0;
    cin&gt;&gt;T;
    while(T--){
        int n=0;
        cin&gt;&gt;n;
        if(a[n]!=0)
            cout&lt;&lt;a[n]&lt;&lt;endl;
        else{
            solve(n);
            cout&lt;&lt;a[n]&lt;&lt;endl;
        }
    }
    return 0;
}
Copy<br><br><br>请编程求出所有的n位数中，有多少个数中有偶数个数字3.结果模12345。(1&lt;=n&lt;=1000)<br><br>一行一个正整数n，0&lt;n&lt;1000.<br><br>一行一个正整数，表示n位数中有多少个数有偶数个3.<br><br>input<br>2
Copy<br>Output<br>73
Copy<br><br>#include&lt;bits/stdc++.h&gt;
#include&lt;iostream&gt;
#define int long long
#define endl '\n'
using namespace std;

signed main(){
  int f[1001][2],n,i,x=9;
  cin&gt;&gt;n;
  f[1][1]=1;f[1][0]=9;                        
  for(i=2;i&lt;=n;i++)    {   
     if(i==n)  // i是最高位
      x-=1;
      f[i][0]=(f[i-1][0]*x+f[i-1][1])%12345;
      f[i][1]=(f[i-1][1]*x+f[i-1][0])%12345;   
   }
   cout&lt;&lt;f[n][0]; 
   return 0;
}
Copy]]></description><link>https://blog.allenygy.vip/algorithm/recursion/递推.html</link><guid isPermaLink="false">Algorithm/Recursion/递推.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 16:58:32 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Share/202406101734284.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Share/202406101734284.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Z-Function" href="algorithm/string/z-function.html" class="internal-link" target="_self" rel="noopener">Z-Function</a>]]></title><description><![CDATA[ 
 <br>]]></description><link>https://blog.allenygy.vip/algorithm/string/z-function.html</link><guid isPermaLink="false">Algorithm/String/Z-Function.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:52:59 GMT</pubDate></item><item><title><![CDATA[<a data-href="Tire-Tree" href="algorithm/string/tire-tree.html" class="internal-link" target="_self" rel="noopener">Tire-Tree</a>]]></title><description><![CDATA[ 
 <br>]]></description><link>https://blog.allenygy.vip/algorithm/string/tire-tree.html</link><guid isPermaLink="false">Algorithm/String/Tire-Tree.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:52:50 GMT</pubDate></item><item><title><![CDATA[<a data-href="String-Overview" href="algorithm/string/string-overview.html" class="internal-link" target="_self" rel="noopener">String-Overview</a>]]></title><description><![CDATA[ 
 <br><br>
<br><a data-tooltip-position="top" aria-label="Tire-Tree" data-href="Tire-Tree" href="https://blog.allenygy.vip/algorithm/string/tire-tree.html" class="internal-link" target="_self" rel="noopener">字典树</a>
<br><a data-href="KMP" href="https://blog.allenygy.vip/algorithm/string/kmp.html" class="internal-link" target="_self" rel="noopener">KMP</a>
<br><a data-tooltip-position="top" aria-label="Aho-Corasick" data-href="Aho-Corasick" href="https://blog.allenygy.vip/algorithm/string/aho-corasick.html" class="internal-link" target="_self" rel="noopener">AC自动机</a>
<br><a data-tooltip-position="top" aria-label="Manacher-Algorithm" data-href="Manacher-Algorithm" href="https://blog.allenygy.vip/algorithm/string/manacher-algorithm.html" class="internal-link" target="_self" rel="noopener">马拉车</a>
<br><a data-tooltip-position="top" aria-label="Z-Function" data-href="Z-Function" href="https://blog.allenygy.vip/algorithm/string/z-function.html" class="internal-link" target="_self" rel="noopener">z 函数</a>
]]></description><link>https://blog.allenygy.vip/algorithm/string/string-overview.html</link><guid isPermaLink="false">Algorithm/String/String-Overview.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:52:59 GMT</pubDate></item><item><title><![CDATA[<a data-tooltip-position="top" aria-label="Manacher-Algorithm" data-href="Manacher-Algorithm" href="algorithm/string/manacher-algorithm.html" class="internal-link" target="_self" rel="noopener">Manacher Algorithm</a>]]></title><description><![CDATA[ 
 <br><br><br>最长回文子串
给定一个字符串&nbsp;s，找到&nbsp;s&nbsp;中最长的回文子串。
示例 1：
输入：s = "babad"<br>
输出："bab"<br>
解释："aba" 同样是符合题意的答案。
示例 2：
输入：s = "cbbd"<br>
输出："bb"
提示：

<br>1 &lt;= s.length &lt;= 1000
<br>s&nbsp;仅由数字和英文字母组成

<br><br>
<br>对每个字符都向两侧扩展，判断是否为回文串
<br>偶数回文串无法直接中心扩展
<br><img alt="中心扩展" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Algorithm/STRING/Manacher-7.png" referrerpolicy="no-referrer"><br><br>
<br>在每个字符前后插入一个扩展字符，使字符串长度一定为奇数
<br>可以方便的寻找奇长度、偶长度的回文，扩展字符可以随意设置，不会影响计算
<br><img alt="Manacher扩展串" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Algorithm/STRING/Manacher-3.png" referrerpolicy="no-referrer"><br><br>回文覆盖最右边界r、回文中心c<br><img alt="Manacher Algorithm" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Algorithm/STRING/Manacher-5.png" referrerpolicy="no-referrer"><br>
<br>在一个大的回文区域内，无需对回文中心之后的每个字符暴力扩展，就可以得到该字符的最大回文半径
<br><img alt="Manacher Algorithm" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Algorithm/STRING/Manacher-6.png" referrerpolicy="no-referrer"><br>假设一个字符串 s， 字符串s的 Manacher扩展串为 p，p[i] 表示当前字符可以扩展的最长回文串的长度<br><br>现在假设我们要对下一个&nbsp;&nbsp;计算 &nbsp;，此时之前所有的值已计算完毕。我们将通过下列方式计算：<br>
<br>
如果  位于当前子回文串之外，即，那么使用暴力解法

<br>以i为中心想两侧扩展，检验字符是否相同，直到不同


<br>
如果 ， 则尝试通过已经计算出的, 加速当前的计算

<br>首先计算出对称点的下标

<br>当前下标与其对称点（假设为 ）关于当前回文中心  对称<br>
即




<br><br>，对称点  的回文半径()，在大回文区域以内，直接确定 <br>
<br>因为其对称点已经无法扩展，所以其本身也无法扩展<img alt="Case1" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Algorithm/STRING/Manacher-Case1.png" referrerpolicy="no-referrer">
<br><br>，对称点 2*c-i 的回文半径 s[2*c-i]，在大回文区域以外，直接确定，当前大回文区域半径-当前下标<br>
<br>因为大回文串已经无法扩展，所以其本身也无法扩展<img alt="Case2" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Algorithm/STRING/Manacher-Case2.png" referrerpolicy="no-referrer">
<br><br>，对称点  的回文半径()，刚好在大回文区域的边界<br>
<br>从r之外的位置进行扩展<img alt="Case3" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Algorithm/STRING/Manacher-Case3.png" referrerpolicy="no-referrer">
<br><br>当前字符最长回文串的实际长度 <br>
<br>每个子字符串扩展后的长度为 
<br>每个子回文字符串扩展后的回文半径为 
<br><img alt="回文半径和实际回文串长度的对应关系" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Algorithm/STRING/Manacher-4.png" referrerpolicy="no-referrer">
<br><br>实际回文串终止位置 = 扩展回文串结尾下标 / 2<br>
<br> 
<br><img alt="扩展回文串结尾下标和实际回文串终止位置的对应关系" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Algorithm/STRING/Manacher-8.png" referrerpolicy="no-referrer">
<br><br>string Preprocess(string s) { // 字符串预处理
	string res = "#"; //在每个字符前后添加扩展字符
	for (int i = 0; i &lt; s.size(); i++) {
		res += s[i];
		res += "#";	
	}
	return res;
}

string Manacher(string s) {
	string t = Preprocess(s);
	string ans = "";
	vector&lt;int&gt; p(t.size(), 0);
	int mx = 0;
	for(int i = 0, c = 0, r = 0, len; i &lt; t.size(); i++) {
		// 当 i &lt; r 时,
			// 若此时 i + s[i] 在 r 内， 则 r - i &gt;= p[2 * c - i]
			// len = p[2 * c - i]
			// 若此时 i + s[i] 在 r 外， 则 r - i &lt;= p[2 * c - i]
			// len = r - i
		// 当 i &gt;= r 时
			// 回文字符串即为 i 本身，len = 1
		len = i &lt; r ? min(r - i, p[2 * c - i]) : 1; 
		
		while (i + len &lt; t.size() &amp;&amp; i - len &gt;= 0 &amp;&amp; t[i + len] == t[i - len]){	// 不管是否可以扩展，都尝试扩展
			len++;
		}
		if (i + len &gt; r){ //更新新的回文中心和回文半径
			r = i + len;
			c = i;
		}
		if(len &gt; mx){ // 维护最长回文子字符串
			mx = len;
			ans = s.substr((i - len + 1)/2, len - 1);
		}
		p[i] = len;
	}
	return ans;
}
Copy<br><br><br>回文子串
返回字符串s的回文子串数量
<br><br>不重叠回文子字符串的最大数目
给定一个字符串str和一个正数k<br>
你可以随意把str切分成多个子串<br>
目的是找到某一种划分方案，有尽可能多的回文子串<br>
并且每个回文子串都要求长度&gt;=k、且彼此没有重合的部分<br>
返回最多能划分出几个这样的回文子串
<br><br>拉拉队排练
长度前k名的奇数长度回文子串长度乘积<br>
给定一个字符串s和数值k，只关心所有奇数长度的回文子串<br>
返回其中长度前k名的回文子串的长度乘积是多少<br>
如果奇数长度的回文子串个数不够k个，返回-1
<br><br>最长双回文串
最长双回文串长度<br>
输入字符串s，求s的最长双回文子串t的长度<br>
双回文子串就是可以分成两个回文串的字符串<br>
比如"aabb"，可以分成"aa"、"bb"
<br>]]></description><link>https://blog.allenygy.vip/algorithm/string/manacher-algorithm.html</link><guid isPermaLink="false">Algorithm/String/Manacher-Algorithm.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:05:12 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Algorithm/STRING/Manacher-7.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Algorithm/STRING/Manacher-7.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-tooltip-position="top" aria-label="Aho-Corasick" data-href="Aho-Corasick" href="algorithm/string/aho-corasick.html" class="internal-link" target="_self" rel="noopener">AC自动机</a>]]></title><description><![CDATA[ 
 <br>]]></description><link>https://blog.allenygy.vip/algorithm/string/aho-corasick.html</link><guid isPermaLink="false">Algorithm/String/Aho-Corasick.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:52:27 GMT</pubDate></item><item><title><![CDATA[<a data-href="Algorithm" href="algorithm/algorithm.html" class="internal-link" target="_self" rel="noopener">Algorithm</a>]]></title><description><![CDATA[ 
 <br>]]></description><link>https://blog.allenygy.vip/algorithm/algorithm.html</link><guid isPermaLink="false">Algorithm/Algorithm.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 05:01:47 GMT</pubDate></item><item><title><![CDATA[<a data-href="DCN-Assignment1" href="computer-network/assignment/dcn-assignment1.html" class="internal-link" target="_self" rel="noopener">DCN-Assignment1</a>]]></title><description><![CDATA[ 
 <br><br><br>What is the OSI model?<br><br> There are 7 layers in the in OSI Model<br>
<br>Physical Layer

<br>It is concerned with transmitting raw bits over a communication channel.


<br>Data Link Layer

<br>It is to transform a raw transmission facility into a line that appears free of undetected transmission errors to the network layer.


<br>Network Layer

<br>It controls the operation of the subnet.


<br>Transport Layer

<br>It is to accept data from above, split it up into smaller units if need be, pass these to the network layer, and ensure that the pieces all arrive correctly at the other hand.


<br>Session Layer

<br>It allows users on different machines to establish sessions between them.


<br>Presentation Layer

<br>It is concerned with the syntax and semantics of the information transmitted.


<br>Application Layer

<br>It contains a variety of protocols that are commonly needed by users, such as HTTP, Email, etc.


<br><br>There are no Session Layer and Presentation Layer in TCP/IP models<br><br>A company’s computer network is the backbone of its business as it connects all its computers and related devices, allowing staff to work more efficiently across the organization. Suppose a commercial company has about 8000 staff. As a computer officer in the company, you are required to design a computer network for that company. Note that network design involves evaluating and understanding how all the elements of the network link together and how they can be made to run as efficiently as possible. Please answer the following questions.<br><br>
<br>Star topology will be used in this network
<br><br>
<br>Central Connection Point (Hub, Switch, or Router)
<br>Nodes (Computers, Printers, Servers, etc.)
<br>Cabling
<br><br>
<br>Cost: This includes the initial setup expenses as well as ongoing maintenance and operation costs. Effective design balances affordability with performance and scalability requirements.
<br>Stability: A stable network ensures consistent availability and reliability, minimizing downtime and supporting productivity. This involves choosing dependable hardware and implementing redundancy where necessary.
<br>Scalability: The network should be able to grow and adapt to increased demands without extensive redesigns. This means planning for future expansions in users, devices, and data volumes.
<br>Performance: Network performance affects data transmission speed and efficiency. A well-designed network minimizes latency and maximizes throughput to provide a smooth user experience.
<br>Complexity: While some complexity might be necessary for functionality, a simpler network is generally easier to manage and troubleshoot. The goal is to find the optimal balance that meets the network's objectives without unnecessary complication.
<br><br><img alt="Star" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Topology/Star.png" referrerpolicy="no-referrer"><br><br>The CRC method is used to transmit a bit-stream of  with the generator polynomial . <br><br><br>
Frame: <br>
Message after 3 zero bits are appended: <br>
Reminder:  <br><br>Show that this error is detected at the receiver’s end.<br><br>
Receive Frame: <br>
Receive Data: <br>
Calculate Reminder: <br>
<br>
 it can detect the error<br><br><br><img alt="1001 1000" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DCN/AS-1/Manchester.png" referrerpolicy="no-referrer"><br><br><br><br>  the Hamming code for the bit-stream is<br>1010 1010 1010 1010 0<br><br>Error correction, and error-detection, and retransmission can be used to tackle error bits in data communication. State two reasons why some applications use error correction instead of error detection and retransmission.<br>
<br>For some application that need Real-time or Low latency, Delays in processes such as waiting for retransmissions can degrade the quality of service and the user experience.
<br>In environments where communication channels are inherently noisy or prone to high error rates (e.g., deep space communications, underwater communications), it may not be practical or efficient to retransmit data every time an error is detected.
<br><br>The Internet of Things (IoT) is doing great in many fields and services. Numerous IoT applications can ease our commercial operations. Suppose you are a project leader in a software house, and your team is required to write a proposal about IoT innovation. Please suggest what kind of application you would propose and why.<br>Proposal:<br>
<br>A Smart Waste Management System. This system would leverage IoT technology to optimize waste collection and processing in urban areas.
<br>Why:<br>
<br>A Smart Waste Management System utilizing IoT technology offers a holistic solution to urban waste challenges by enhancing environmental sustainability, reducing operational costs through optimized routes and schedules.
]]></description><link>https://blog.allenygy.vip/computer-network/assignment/dcn-assignment1.html</link><guid isPermaLink="false">Computer-Network/Assignment/DCN-Assignment1.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:26:13 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Topology/Star.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Topology/Star.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="USTC-L1" href="computer-network/ustc-l1.html" class="internal-link" target="_self" rel="noopener">USTC-L1</a>]]></title><description><![CDATA[ 
 <br><br><br>
<br>网络

<br>节点与边构成的大小形状无关的拓扑
<br>电话网，社交网络....


<br>计算机网络---具体构成角度

<br>联网计算机构成的系统
<br>节点

<br>主机节点，及其运行的应用程序 ⬛
<br>数据交换节点 ⭕️

<br>路由器、交换机等网络设备 既不是源也不是目标，转发数据
<br>根据层次不同可分

<br>中继器
<br>交换机 链路层
<br>路由器 网络层
<br>负载均衡设备 更高层






<br>边：通信链路

<br>接入网链路<a data-footref="[inline0" href="https://blog.allenygy.vip/about:blank#fn-1-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[1]</a>：主机连接到互联网的链路
<br>骨干链路<a data-footref="[inline1" href="https://blog.allenygy.vip/about:blank#fn-2-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[2]</a>：路由器间的链路


<br>协议：

<br>对等层实体在通信过程当中的应该遵守的规则的集合，包括语法、语义和时序
<br>协议定义了两个或多个通信实体之间交换的报文格式和次序，以及在报文传输和/或接收/或其他事件方面所采取的动作

<br>PDU：协议数据单元


<br>按照层次不同

<br>物理层协议
<br>链路层协议

<br>网络层协议

<br>IP


<br>传输层协议

<br>TCP
<br>UDP


<br>应用层协议








<br>互联网：从具体组成角度
“网络的网络”

<br>数以亿计、互联的计算设备

<br>主机 = 端系统 end system host
<br>运行网络应用程序


<br>通信链路

<br>光纤、同轴电缆、无线电、卫星
<br>传输速率=带宽（bps）bit / second


<br>分组交换设备：转发分组（packets）

<br>路由器和交换机



<br>
<br>Internet 标准

<br>RFC: Request for comments
<br>IEFC: Internet Engineering Task Force


<br>互联网： 从服务角度

<br>使用通信设施进行通信的分布式应用

<br>Web、VoIP、email、分布式游戏....


<br>通信基础设施为 apps 提供编程接口（通信服务）

<br>将发送和接收数据的 apps 与互联网连接起来
<br>为 app 应用提供服务选择类似与邮政服务

<br>无连接 不可靠的服务
<br>面相连接的可靠服务





<br><br><br><br>
<br>
<br>Access<a href="https://blog.allenygy.vip/about:blank#fnref-1-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
<br>Backbone<a href="https://blog.allenygy.vip/about:blank#fnref-2-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
]]></description><link>https://blog.allenygy.vip/computer-network/ustc-l1.html</link><guid isPermaLink="false">Computer-Network/USTC-L1.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:57:31 GMT</pubDate></item><item><title><![CDATA[<a data-href="Transport-Layer" href="computer-network/transport-layer.html" class="internal-link" target="_self" rel="noopener">Transport-Layer</a>]]></title><description><![CDATA[ 
 <br><br><br>
<br>Operation of TCP 

<br>When a sender transmits a segment, it also starts a timer.
<br>When the segment arrives at the destination, the receiving TCP entity sends back a segment (with data if any) bearing an acknowledgement number equal to the next sequence number it expects to receive.
<br>If the sender’s timer goes off before the acknowledgement is received, the sender transmits the segment again.


<br>3-way handshaking 

<br><img alt="3-way handshaking" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/3way.png" referrerpolicy="no-referrer">
<br>To release a connection, either party can send a TCP segment with the FIN bit set.


<br><br><img alt="TCP-Segments" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/TCP-Segments.png" referrerpolicy="no-referrer"><br><br>The main focus of congestion control and quality of service is data traffic.<br>
<br>In congestion control we try to avoid traffic congestion.
<br>In quality of service, we try to create an appropriate environment for the traffic.
<br>So, before talking about congestion control and quality of service, we discuss the data traffic itself.
<br><img alt="Traffic Profile" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/TrafficProfile.png" referrerpolicy="no-referrer"><br><br>In general, we can divide congestion control mechanisms into two broad categories: open-loop congestion control (prevention) and closed-loop congestion control (removal).<br>
<br>Open-loop

<br>Retransmission Policy
<br>Window Policy 
<br>Acknowledgement Policy 
<br>Discard Policy 
<br>Admission Policy 


<br>Closed-loop 

<br>Back Pressure
<br>Choke Packet
<br>Implicit signaling
<br>Explicit signaling


<br>Metrics Used to Monitor a Subnet for Congestion<br>
<br>Percentage of all packets discarded for lack of buffer space;
<br>Average of queue lengths;
<br>Number of packets that time out and are retransmitted;
<br>Average packet delay;
<br>Standard deviation of packet delay, etc.
]]></description><link>https://blog.allenygy.vip/computer-network/transport-layer.html</link><guid isPermaLink="false">Computer-Network/Transport-Layer.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:27:16 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/3way.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/3way.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Standardized-Networks" href="computer-network/standardized-networks.html" class="internal-link" target="_self" rel="noopener">Standardized-Networks</a>]]></title><description><![CDATA[ 
 <br><br><br>Hub is a repeater with some additional network management functionality (such as performance or accounting management)<br>Work on <a data-tooltip-position="top" aria-label="Physical-Layer" data-href="Physical-Layer" href="https://blog.allenygy.vip/computer-network/physical-layer.html" class="internal-link" target="_self" rel="noopener">Physical Layer</a> <br>
<br>定义：Hub是一种网络设备，用于将多个以太网设备连接在一起，使它们能够作为一个网络段进行通信。
<br>工作层次：物理层（OSI模型第1层）。
<br>工作原理：Hub通过广播的方式将收到的数据包发送到所有连接的端口，无论数据包的目的地是哪个设备。
<br>优点：价格低廉，易于安装和使用。
<br>缺点：效率低，所有端口共享带宽，容易发生碰撞（Collision），不适合大规模网络。
<br><br>Bridge: bridge operates on Ethernet frames and thus a layer-2 device. It does the following two functions:<br>
<br>Filtering: determine whether a frame should be forwarded to some interface or should just be dropped.
<br>Forwarding: determine the interfaces to which a frame should be directed.
<br>Work on <a data-tooltip-position="top" aria-label="Data-Link-Layer" data-href="Data-Link-Layer" href="https://blog.allenygy.vip/computer-network/data-link-layer.html" class="internal-link" target="_self" rel="noopener">Data Link Layer</a> <br>
<br>定义：Bridge是一种网络设备，用于连接两个或多个网络段，主要用于分割网络冲突域。
<br>工作层次：数据链路层（OSI模型第2层）。
<br>工作原理：Bridge根据MAC地址表转发数据帧，只将数据帧发送到目的地所在的网络段，减少不必要的流量。
<br>优点：减少网络冲突，提升网络效率。
<br>缺点：管理复杂度高，不支持多播和广播控制。
<br><br>
<br>Router: router is a store-and-forward packet switch that forward packets using network-layer addresses (layer-3).
<br>Although a bridge is also a store- and-forward packet switch, it forwards packets using LAN addresses.
<br>As a network administrator, how to choose between bridge and router?
<br>Work on <a data-tooltip-position="top" aria-label="Network-Layer" data-href="Network-Layer" href="https://blog.allenygy.vip/computer-network/network-layer.html" class="internal-link" target="_self" rel="noopener">Network Layer</a> <br>
<br>定义：Router是一种网络设备，用于连接不同的网络，能够根据IP地址进行数据包转发。
<br>工作层次：网络层（OSI模型第3层）。
<br>工作原理：Router根据路由表和IP地址选择最佳路径，将数据包转发到目的地网络。
<br>优点：能够连接不同类型的网络，支持复杂的路由选择协议，提供广域网（WAN）连接。
<br>缺点：成本较高，配置和管理相对复杂。
<br><br>
<br>
Switch: switch is in essence a high-performance multi-interface bridge. The difference between a bridge and switch:

<br>
Bridges usually two or four interfaces, whereas switches have dozens of interfaces (e.g., 24 ports).

<br>
Switches are usually used to connect individual computers, and operate in a full-duplex mode.

<br>Work on <a data-tooltip-position="top" aria-label="Data-Link-Layer" data-href="Data-Link-Layer" href="https://blog.allenygy.vip/computer-network/data-link-layer.html" class="internal-link" target="_self" rel="noopener">Data Link Layer</a> <br>
<br>定义：Switch是一种网络设备，用于连接多个设备，能够根据MAC地址进行数据帧的交换和转发。
<br>工作层次：数据链路层（OSI模型第2层），一些高端交换机也支持网络层功能（第3层交换）。
<br>工作原理：Switch通过MAC地址表将数据帧准确地转发到目标设备所在的端口，提高网络效率和安全性。
<br>优点：高效的数据帧转发，减少碰撞，支持全双工通信，适合大规模网络。
<br>缺点：比Hub稍贵，配置和管理比Hub复杂。
<br><br>
<br>
工作层次：

<br>Hub：物理层（第1层）。
<br>Bridge：数据链路层（第2层）。
<br>Router：网络层（第3层）。
<br>Switch：数据链路层（第2层），部分支持网络层（第3层）。


<br>
数据转发方式：

<br>Hub：广播方式，将数据包发送到所有端口。
<br>Bridge：基于MAC地址，将数据帧发送到目标网络段。
<br>Router：基于IP地址，选择最佳路径将数据包转发到目标网络。
<br>Switch：基于MAC地址，精准转发数据帧到目标设备。


<br>
使用场景：

<br>Hub：小型网络，简单的设备互连。
<br>Bridge：分割冲突域，提高网络效率。
<br>Router：连接不同网络，实现跨网络通信。
<br>Switch：大规模网络，高效数据传输和交换。


<br><br>
<br>Hub：适用于小型、简单网络，通过广播转发数据。
<br>Bridge：用于连接和分割网络段，减少冲突。
<br>Router：连接不同网络，基于IP地址转发数据包。
<br>Switch：高效的数据帧交换设备，适合大规模网络。
]]></description><link>https://blog.allenygy.vip/computer-network/standardized-networks.html</link><guid isPermaLink="false">Computer-Network/Standardized-Networks.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:27:10 GMT</pubDate></item><item><title><![CDATA[<a data-href="Physical-Layer" href="computer-network/physical-layer.html" class="internal-link" target="_self" rel="noopener">Physical-Layer</a>]]></title><description><![CDATA[ 
 <br><br><br>The French mathematician J.B. Fourier proved that any reasonably behaved period function, g(t) with period T can be constructed as the sum of a number of sines and cosines:<br><br>Where  is the fundamental frequency,  and  are the sine and cosine amplitudes of the  harmonics, and c is a constant.<br><br><img alt="Transmission Medium and Physical Layer" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/TMPH.png" referrerpolicy="no-referrer"><br><br>Transmission media 

<br>Guide wired

<br>Twisted-pair cable
<br>Coaxial cable 
<br>Fiber-optic


<br>Unguided wireless

<br>Free space



<br><img alt="Classes of Transmission Media" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/TypeofTransmissionMedia.png" referrerpolicy="no-referrer"><br><br>
<br>Guided media, which are those that provide a conduit from one device to another.
<br>Include twisted-pair cable, coaxial cable, and fiberoptic cable.
<br><br>
<br>A twisted pair consists of two insulated copper wires, typically about 1 mm think.
<br><img alt="Twisted-pair" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Twisted-Pair.png" referrerpolicy="no-referrer">
]]></description><link>https://blog.allenygy.vip/computer-network/physical-layer.html</link><guid isPermaLink="false">Computer-Network/Physical-Layer.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:27:04 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/TMPH.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/TMPH.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Network-Layer" href="computer-network/network-layer.html" class="internal-link" target="_self" rel="noopener">Network-Layer</a>]]></title><description><![CDATA[ 
 <br><br><br> An IP datagram consists of a header part and a text part. 
Copy<br><br><img alt="Ipv4" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/IPv4.png" referrerpolicy="no-referrer"><br>
<br>IPv4 Header

<br>The header has a 20-byte fixed part and a variable length optional part.

<br>Fixed Part include:

<br>Version 
<br>IHL
<br>TOS
<br>Total Length 
<br>Identification 
<br>DF and MF
<br>Fragment offset
<br>TTL 
<br>Protocol 
<br>Header checksum
<br>Source address and destination address






<br><br><br>Version: to keep track of which version of the protocol the datagram belongs to. 4 bit<br><br>IHL: to provide the length of the header, in 32-bit words. 4 bit<br>
- When the value is 5, which applies no options are present.<br><br>TOS: (Type of service) to distinguish between different classes of services. 8 bit<br>
- Three-bit precedence field and three flags, D, T, and R {Delay, Throughput and Reliability}.  3 bit<br>
- 三位优先字段（precedence field）和三标志位（D、T、R）用于指示数据报的服务质量需求和优先级。这些字段通常位于IPv4首部的服务类型（Type of Service, TOS）字段中。<br><br>这个表格展示了服务类型字段的不同比特组合及其对应的描述。每种组合表示数据报在传输过程中不同的服务质量要求，例如默认服务、最小化成本、最大化可靠性、最大化吞吐量和最小化延迟。<br><br>Total Length: to provide the length of the datagram (including header and data). 16 bit<br><br>
<br>Identification: to identify each datagram. 16 bit
<br><br>
<br>DF and MF: don’t fragment, and more fragments. 3 bit
<br>Fragment offset: To tell where in the current datagram this fragment belongs. 13 bit
<br><br>
<br>Time to live: a counter used to limit packet lifetimes. 8 bit
<br><br>
<br>Protocol: to tell which protocol process to give it to (e.g., TCP or UDP). 8 bit
<br>Header checksum: to detect errors in the datagram. 16 bit
<br><br><img alt="Address Classification" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Addressclassification.png" referrerpolicy="no-referrer"><br>
<br>
Source address and destination address 32 bit

<br>
Unique: no two machines on the Internet have the same IP address.

<br>32-bit long.<br><br><br>总结：IPv4首部的基本部分是20字节（160位），但如果包含选项字段，长度可能会超过20字节。选项字段的长度是可变的，最大可达40字节，因此整个IPv4首部的最大长度是60字节。<br><br><img alt="IPv6" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/IPv6.png" referrerpolicy="no-referrer"><br><br>
<br>Three transition strategies

<br>Dual stack
<br>Tunneling
<br>Header translation 


<br><br><img alt="Dual Stack" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Transition-DualStack.png" referrerpolicy="no-referrer"><br><br><img alt="Tunneling" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Transition-Tunneling.png" referrerpolicy="no-referrer"><br><br><img alt="Header Translation" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Translation-Header.png" referrerpolicy="no-referrer"><br><br><br>
<br>The network layer supervises the handling of the packets by the underlying physical networks.
<br>We define this handling as the delivery of a packet.
<br>Direct and indirect delivery
<br><img alt="Delivery" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Delivery.png" referrerpolicy="no-referrer"><br><br>
<br>Forwarding means to place the packet in its route to its destination. 转发
<br>Forwarding requires a host or a router to have a routing table.
<br>When a host has a packet to send or when a router has received a packet to be forwarded, it looks at this table to find the route to the final destination.
<br><br>Shortest Path Routing <br>
<br>To study the routing algorithms, a graph is commonly used to represent a subnet.
<br>Each node of the graph represents a router and each arc of the graph represents a communication line.
<br>The path length can be measured in terms of the number of hops, the geographic distance, etc.
<br><br>Dijkstra Algorithm

<br>Set the value of the initial node to zero and set all other nodes to infinity.
<br>Mark all nodes unvisited. Set the initial node as starting point.
<br>For the current node, consider all of its unvisited neighbors and calculate their tentative distances.
<br>Mark the current node as visited and remove it from the unvisited set. A visited node will never be checked again.
<br>If the destination node has been marked visited or if the smallest tentative distance among the nodes in the unvisited set is infinity, then stop. The algorithm has finished.
<br>Set the unvisited node marked with the smallest tentative distance as the next current node and go back to step 3.

<br><br>
<br>Every incoming packet is sent out on every outgoing line except the one it arrived on. 
<br>To solve the vast numbers of duplicate packets, a hop counter is introduced.
<br>The hop counter is contained in the header of each packet.
<br>It decremented at each hop. The packet will be discarded when the counter reached zero.
<br><br>
<br>It is a dynamic routing algorithm.
<br>Each router maintains a table giving the best known distance to each destination and which line to use to get there.
<br>These tables are updated by exchanging information with their neighbors.
<br>An entry of routing tables contains two parts: the preferred outgoing line to be used for the destination, and an estimate of the distance to that destination.
<br>]]></description><link>https://blog.allenygy.vip/computer-network/network-layer.html</link><guid isPermaLink="false">Computer-Network/Network-Layer.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:26:58 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/IPv4.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/IPv4.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Dcn-Review" href="computer-network/dcn-review.html" class="internal-link" target="_self" rel="noopener">Dcn-Review</a>]]></title><description><![CDATA[ 
 <br><br><br><br>
<br>Protocol 
<br>Sender
<br>Message
<br>Medium 
<br>Receiver
<br><br>
<br>Simplex
<br>Half-duplex 
<br>Full-duplex
<br><br><br>
<br>Assumption: noise free in the channel
<br>Formula: 

<br>B = Bit Rate (bit/sec)
<br>F = Channel Bandwidth in Hertz 
<br>M = Number of levels in a signal (two for binary)


<br><br>
<br>In reality, the signal may be corrupted by electrical noise. 
<br>Formula: 

<br>B = Actual Bit Rate (bit/sec) 
<br>F = Channel Bandwidth in Hertz 
<br>S = Signal Power in watts 
<br>N = Noise Power in watts


<br><br>
<br>
The signal-to-noise ratio is often given in decibels.

<br>
<br>


<br>
Assume that  = 36 and the channel bandwidth is 2 MHz.

<br>
<br>


<br><br>
<br>
Physical Layer: 

<br>It is concerned with transmitting raw bits over a communication channel. 
<br>This layer deals with the issues including mechanical, electrical, timing interfaces, and the physical transmission medium.


<br>
Data Link Layer: 

<br>It is to transform a raw transmission facility into a line that appears free of undetected transmission errors to the network layer.


<br>
Network Layer:

<br>It controls the operation of the subnet. 
<br>It routes packets from source to destination. 

<br>The routing algorithm can be static or dynamic.




<br>
Transport Layer: 

<br>It is to accept data from upper layers.
<br>Split it up into smaller units if need be, pass these to the network layer, 
<br>Ensure that the pieces all arrive correctly at the other hand.


<br>
Session Layer: 

<br>It allows users on different machines to establish sessions between them.


<br>
Presentation Layer:

<br>It is concerned with the syntax and semantics of the information transmitted.


<br>
Application Layer: 

<br>It contains a variety of protocols that are commonly needed by users.

<br>Such as HTTP, Email, etc.




<br><br>Physical Layer: <br>
<br>It is concerned with transmitting raw bits over a communication channel. 
<br>This layer deals with the issues including mechanical, electrical, timing interfaces, and the physical transmission medium.
<br><br>Guided media, which are those that provide a conduit from one device to another.<br>
<br>Guide wired

<br>Twisted-pair cable
<br>Coaxial cable 
<br>Fiber-optic


<br><br>
<br>Mode

<br>Multimode

<br>Step index
<br>Graded index 


<br>Single mode


<br><br>Unguided media transport electromagnetic waves without using a physical conductor.<br>
<br>Unguided wireless

<br>Free space


<br>Two common signal encoding methods:<br>
<br>Frequency hopping spread spectrum (e.g., Bluetooth)
<br>Direct sequence spread spectrum (e.g.,CDMA mobile network)
<br>The Electromagnetic Spectrum<br>
<br>Propagation Methods 

<br>Ground Propagation 
<br>Sky Propagation 
<br>Line-of-sight Propagation 


<br><br>Data Link Layer: <br>
<br>It is to transform a raw transmission facility into a line that appears free of undetected transmission errors to the network layer.
<br><br>
<br>Character Count
<br>Flag bytes with byte stuffing
<br>Starting and ending flags with bit stuffing
<br><br><br>
<br>Parity Check
<br>Two-dimensional Parity Check
<br>Cyclic Redundancy Check (CRC)
<br><br><br>
<br>Hamming Distance
<br>Hamming Code
<br><br>
<br>
Error detection: 

<br>To send additional information, so incorrect data can be detected and rejected.


<br>
Error correction: 

<br>To send additional information, so incorrect data can be corrected and accepted.

<br>Error correction is the additional ability to reconstruct the original data.




<br><br>
<br>Stop-and-Wait Protocols
<br>Sliding Window Protocols
<br><br>
<br>Channelization: 

<br>Frequency-Division Multiple Access (FDMA)
<br>Time-Division Multiple Access (TDMA)
<br>Code-Division Multiple Access (CDMA)


<br>Random Access Protocols:

<br>Aloha 
<br>Carrier Sense Multiple Access
<br>CSMA with Collision Detection 
<br>CSMA with Collision Avoidance


<br>Controlled-Access Protocols: Collision-Free Protocol

<br>Reservation
<br>Polling
<br>Token passing 


<br><br>Network Layer:<br>
<br>It controls the operation of the subnet. 
<br>It routes packets from source to destination. 

<br>The routing algorithm can be static or dynamic.


<br><br>
<br>IP is a protocol which governs the data format of packets sent over the Internet.
<br>The main functions provided by IP are addressing and network routing.
<br><br><br><br>
<br>Version 
<br>Type of service
<br>Total length
<br>Time to live
<br>Source address, destination address
<br><br>
<br>Version 
<br>Traffic class
<br>Flow label 
<br>Payload length 
<br>Next header 
<br>Hop limit
<br><br><br>
<br>Dual stack
<br>Tunneling 
<br>Header translation
<br><br>Network routing selects a path over an internetwork to transmit one or more packets from the source to the destination.<br><br><br><br><br><br>Transport Control Protocol (TCP)<br>
<br>Source port and destination port: to identify the local end points of the connections.
<br>Sequence number and acknowledgement number
<br>TCP header length: to tell how many 32-bit words are contained in the header
<br>Six 1-bit flags
<br>Window size: to tell how many bytes may be sent starting at the byte acknowledged.
<br>Checksum
<br>Options: to provide a way to extend the header
<br><br>User Datagram Protocol (UDP)<br>
<br>Connectionless protocol
<br>Provide a way for applications to send encapsulated IP datagrams and send them without having to establish a connection.
<br>8-byte header 
<br>UDP Datagram Header
<br><br><br>
<br>API stands for application programming interface. 
<br>Socket API is specifically designed for the network programming interface.
<br><br>Socket is an abstraction through which an application may send and receive data. <br>
<br>A socket is uniquely identified together by 

<br>Internet address
<br>End-to-end protocol (e.g. TCP or UDP)
<br>Port number


<br><br>
<br>Stream socket is designed for TCP, which provides reliable byte stream service. 
<br>Datagram socket is specifically designed for UDP, which provides best-effort datagram service.
<br><br><br>
<br>WSAStartup
<br>socket 
<br>connect 
<br>(send, recv) (recusive) 
<br>closesocket
<br>WSACleanup
<br><br>
<br>WSAStartup
<br>socket 
<br>bind
<br>listen
<br>accept
<br>(recv, send) (recursive)
<br>closesocket (pair up with accept)
<br>WASCleanup.
<br><br><br>int socket_desc=socket(AF_INET,SOCK_STREAM,0); 
if (socket_desc==-1) perror("Create socket");
Copy<br><br>struct sockaddr_in address;
/* type of socket created in socket() */ 
address.sin_family = AF_INET; 
address.sin_addr.s_addr = INADDR_ANY; /* 7000 is the port to use for connections */ 
address.sin_port = htons(7000); /* bind the socket to the port specified above */ 
bind(socket_desc,(struct sockaddr *)&amp;address,sizeof(address));
Copy<br><br>listen(socket_desc,3);
Copy<br><br>int addrlen; 
struct sockaddr_in address;
addrlen = sizeof(struct sockaddr_in);
new_socket = accept(socket_desc, (struct sockaddr *)&amp;address, &amp;addrlen); if (new_socket&lt;0) perror("Accept connection");
Copy<br><br>char *message="This is a message to send\n\r"; 
send(socket_desc, message, strlen(message), 0);
Copy<br><br>int bufsize=1024; /* a 1K buffer */
char *buffer=malloc(bufsize);
recv(socket_desc,buffer,bufsize,0);
Copy<br><br>closesocket(msg_sock); 
// close(socket_desc);
WSACleanup();
Copy<br><br>#include &lt;process.h&gt;
for(int i = 0; i &lt; 100; i++){ 
	_beginthread(accept_conn, 0, NULL ); 
}//for loop 
_endthread();
// create a function to accept a connection 
void accept_conn(void *dummy) { 
// doing something here 
}
Copy<br><br><br>
<br>Standard Ethernet 10 Mbps
<br>Fast Ethernet  100 Mbps
<br>Gigabit Ethernet  1 Gbps
<br>Ten Gigabit  Ethernet 10 Gbps
<br><br>Data transmission time <br><br>
<br>  = Cable length （线缆长度）
<br> = Propagation speed （传播速度）
<br> = Bit rate （比特率，单位为比特/秒）
<br> = Minimum data size （最小数据大小）
<br><br><br>Hub is a repeater with some additional network management functionality (such as performance or accounting management)<br>Work on <a data-tooltip-position="top" aria-label="Physical-Layer" data-href="Physical-Layer" href="https://blog.allenygy.vip/computer-network/physical-layer.html" class="internal-link" target="_self" rel="noopener">Physical Layer</a> <br>
<br>定义：Hub是一种网络设备，用于将多个以太网设备连接在一起，使它们能够作为一个网络段进行通信。
<br>工作层次：物理层（OSI模型第1层）。
<br>工作原理：Hub通过广播的方式将收到的数据包发送到所有连接的端口，无论数据包的目的地是哪个设备。
<br>优点：价格低廉，易于安装和使用。
<br>缺点：效率低，所有端口共享带宽，容易发生碰撞（Collision），不适合大规模网络。
<br><br>Bridge: bridge operates on Ethernet frames and thus a layer-2 device. It does the following two functions:<br>
<br>Filtering: determine whether a frame should be forwarded to some interface or should just be dropped.
<br>Forwarding: determine the interfaces to which a frame should be directed.
<br>Work on <a data-tooltip-position="top" aria-label="Data-Link-Layer" data-href="Data-Link-Layer" href="https://blog.allenygy.vip/computer-network/data-link-layer.html" class="internal-link" target="_self" rel="noopener">Data Link Layer</a> <br>
<br>定义：Bridge是一种网络设备，用于连接两个或多个网络段，主要用于分割网络冲突域。
<br>工作层次：数据链路层（OSI模型第2层）。
<br>工作原理：Bridge根据MAC地址表转发数据帧，只将数据帧发送到目的地所在的网络段，减少不必要的流量。
<br>优点：减少网络冲突，提升网络效率。
<br>缺点：管理复杂度高，不支持多播和广播控制。
<br><br>
<br>Router: router is a store-and-forward packet switch that forward packets using network-layer addresses (layer-3).
<br>Although a bridge is also a store- and-forward packet switch, it forwards packets using LAN addresses.
<br>As a network administrator, how to choose between bridge and router?
<br>Work on <a data-tooltip-position="top" aria-label="Network-Layer" data-href="Network-Layer" href="https://blog.allenygy.vip/computer-network/network-layer.html" class="internal-link" target="_self" rel="noopener">Network Layer</a> <br>
<br>定义：Router是一种网络设备，用于连接不同的网络，能够根据IP地址进行数据包转发。
<br>工作层次：网络层（OSI模型第3层）。
<br>工作原理：Router根据路由表和IP地址选择最佳路径，将数据包转发到目的地网络。
<br>优点：能够连接不同类型的网络，支持复杂的路由选择协议，提供广域网（WAN）连接。
<br>缺点：成本较高，配置和管理相对复杂。
<br><br>
<br>
Switch: switch is in essence a high-performance multi-interface bridge. The difference between a bridge and switch:

<br>
Bridges usually two or four interfaces, whereas switches have dozens of interfaces (e.g., 24 ports).

<br>
Switches are usually used to connect individual computers, and operate in a full-duplex mode.

]]></description><link>https://blog.allenygy.vip/computer-network/dcn-review.html</link><guid isPermaLink="false">Computer-Network/Dcn-Review.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:27:16 GMT</pubDate></item><item><title><![CDATA[<a data-href="Data-Link-Layer" href="computer-network/data-link-layer.html" class="internal-link" target="_self" rel="noopener">Data-Link-Layer</a>]]></title><description><![CDATA[ 
 <br><br>The data link layer combines the following 3 functions to achieve the delivery of data from one node to another. 

<br>Framing 
<br>Flow control 
<br>Error control

<br><br>The data link layer needs to pack bits into frames, so that each frame is distinguishable from another.<br>
<img alt="Framing" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/OS/Framing.png" referrerpolicy="no-referrer"><br><br>Character Count 
Use a field in the header to specify the number of the characters in the frame.

<br><img alt="CharacterCount" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/CharacterCount.png" referrerpolicy="no-referrer"><br>
易出错

<br><br>Flag bytes with byte stuffing

<br>Each frame starts and ends with special bytes.
<br>If the flag byte’s bit pattern occurs in that data, a special escape byte (ESC) will be inserted just before the bit pattern.<br>
<img alt="Framing-FBBS" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Framing-FBBS.png" referrerpolicy="no-referrer">

<br><br>Starting and ending flags with bit stuffing 

<br>Each frame begins and ends with a special bit pattern, 01111110.
<br>If the sender encounters five consecutive 1s in the data, a 0 bit will be inserted just after 1s.
<br><img alt="Framing-FBBS" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Framing-SEFBS.png" referrerpolicy="no-referrer">

<br><br>Finally Goal
Check Each data frame is correct?

<br>Sender send data{k bits} and check bit{n-k}
<br>Receiver receive data and Check bit

<br>According data calculate check bit compare 2 check bit



<br><br><img alt="ErrorControl-sender" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/ErrorControl-sender-1.png" referrerpolicy="no-referrer"><br>
<img alt="ErrorControl-Receiver" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/ErrorControl-Receiver.png" referrerpolicy="no-referrer"><br><br>Parity Check
 Append a parity bit to the end of a block of data (e.g., there are d bits in a block).<br>
分为偶数校验和奇数校验

<br>Even parity scheme: the sender includes one additional bit and chooses its value such that the total number of 1s in the d+1 bits (the original information plus a parity bit) is even.
<br>Odd parity scheme: the parity bit value is chosen such that there is an odd number of 1s.<br>
<img alt="Parity Check" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/ParityCheck.png" referrerpolicy="no-referrer">

<br><br>Two-dimensional Parity Check 
Two-dimensional parity is a generalization of single-bit ParityCheck.png 

<br>In this scheme, the data is formed as a rectangular matrix j bits wide and i bits high.
<br>A parity value is computed for each row and column. It has following properties:

<br>A single bit error can be detected.
<br>If there is a single error, we can use the column and row indices to identify the bit that was corrupted and correct that error.



<br> 2D Parity Check 
让我们通过一个具体的例子来说明二维奇偶校验（2D Parity Check）是如何工作的。假设我们有一个由二进制数据组成的3x3矩阵，我们想要通过添加行校验位和列校验位，以及一个额外的校验位来确保数据的完整性。

假设初始数据矩阵如下：
1 0 1
0 1 0
1 1 0
Copy
我们的目标是添加校验位，使得每行和每列的总和都是偶数（这里我们选择偶校验作为例子）。

首先，对于每一行，我们计算一个校验位，使得包括校验位在内的每一行的总位数（即1的数量）是偶数。

<br>第一行：1 0 1 有两个1，已经是偶数，所以校验位是0。
<br>第二行：0 1 0 有一个1，不是偶数，所以校验位是1。
<br>第三行：1 1 0 有两个1，已经是偶数，所以校验位是0。

添加行校验位后的矩阵：
1 0 1 | 0
0 1 0 | 1
1 1 0 | 0
Copy

然后，对于每一列（包括新添加的行校验位），我们也计算一个校验位，以确保每列的1的数量是偶数。

<br>第一列：1 0 1 有两个1，校验位是0。
<br>第二列：0 1 1 有两个1，校验位是0。
<br>第三列：1 0 0 有一个1，校验位是1。
<br>行校验列：0 1 0 有一个1，校验位是1。

添加列校验位后的矩阵：
1 0 1 | 0
0 1 0 | 1
1 1 0 | 0
------+---
0 0 1 | 1
Copy

最终，我们得到一个包含行校验位和列校验位的矩阵，还有一个右下角的额外校验位，用于整个矩阵的校验：
1 0 1 | 0
0 1 0 | 1
1 1 0 | 0
------+---
0 0 1 | 1
Copy
在这个例子中，每行和每列的1的数量都是偶数，包括最后添加的校验位行和校验位列。这样，在数据传输或存储过程中，如果任何单一位发生变化（变成错误），接收方可以通过检查行和列的校验位来发现并确定错误的具体位置。如果只有一位出错，那么错误可以被精确地定位和纠正。然而，如果有多个错误，这种方法可能只能检测到错误存在，而无法精确定位或纠正所有错误。
<br><br>Cyclic Redundancy Check (CRC)
CRC treats bit streams as representations of polynomials with coefficients of 0 and 1 only.

<br>Modulo-2 arithmetic is used for computing CRC.
<br>In modulo-2, there are no carriers for addition or borrows for subtraction.
<br>When the polynomial code method is employed, the sender and receiver must agree upon a generator polynomial, G(x) in advance.

<br>CRC Process
 To compute the checksum for some frame with m bits, corresponding to the polynomial  , we have following steps: 	

<br>Let  be the degree of . 
<br>Append zero bits to the low-order end of the frame so it now contains bits and corresponds to the polynomial 
<br>Divide  into  using modulo-2 division.
<br>Subtract the remainder from  using modulo-2 subtraction.
<br>Append the remainder to the end of  to form the transmitted data frame.

To detect the error, the receiver divides the checksummed frame by . If there is a remainder, there has been a transmission error.
<br>CRC Example
<img alt="CRC" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/CRC.png" referrerpolicy="no-referrer">
<br><br>
<br>The use of error-correcting codes is often referred to as forward error correction (FEC).
<br>Basic concepts<br>
-  Each block of data is mapped into an n-bit block, which consists of m data bits and r redundant. This n-bit block is referred to as an n-bit codeword.<br>
- Hamming distance is defined as the number of bit positions in which two code-words differ. For example (Hamming distance = 3):
Hamming Distance



<br>When transmission, each m-bits sequence is mapped into n-bit codeword. For example,  is mapped to  in the codeword table.<br><br>When the receiver receives an invalid codeword (detects an error), then the valid codeword that is closest to it (minimum hamming distance) is selected.<br><br>Hamming code---二进制的妙用
Design to correct single bit errors.<br>
Consists of two kinds of bits: check-bit and data-bit.<br>
The check-bits are in the positions which are power of 2 (i.e., 1, 2, 4, 8, etc);<br>
The data-bits are in the rest position  (3, 5, 6, 7, 9, etc)<br>
Each check bit forces the parity of some collection of bits, including itself, to be even (or odd). 每个检验位对一组特定 位数进行包括其本身 进行奇偶检验
<br><br>The number of check bits can be obtained by:<br><br>c is the number of check bit<br>
d is the number of data bit <br><br><br>]]></description><link>https://blog.allenygy.vip/computer-network/data-link-layer.html</link><guid isPermaLink="false">Computer-Network/Data-Link-Layer.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:26:45 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/OS/Framing.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/OS/Framing.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Computer-Network" href="computer-network/computer-network.html" class="internal-link" target="_self" rel="noopener">Computer-Network</a>]]></title><description><![CDATA[ 
 <br><br><br><br><br><br><br><br><br><br><br>]]></description><link>https://blog.allenygy.vip/computer-network/computer-network.html</link><guid isPermaLink="false">Computer-Network/Computer-Network.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:51:01 GMT</pubDate></item><item><title><![CDATA[<a data-href="Basic-Concepts" href="computer-network/basic-concepts.html" class="internal-link" target="_self" rel="noopener">Basic-Concepts</a>]]></title><description><![CDATA[ 
 <br><br>
<br>The term telecommunication means communication at a distance.
<br>The word data refers to information presented in whatever form is agreed upon by the parties creating and using the data. 
<br>Data communications are the exchange of data between two devices via some form of transmission medium such as a wire cable.
<br><br><img alt="Data Communication Components" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/protocol.png" referrerpolicy="no-referrer"><br>
<br>Five components of data communication

<br>Sender
<br>Medium
<br>Receiver
<br>Protocol
<br>Message


<br>Network Protocol

<br>Communication node is machine
<br>All communication activity in the Internet is controlled by protocols
<br>Protocols define formats, order of sending and receiving of messages, and the actions that the reception initiates

<br><br>
<br>Simplex 单向 单向同时只有一路信号

<br>TV


<br>Half-duplex 半双工 双向同时只有一路信号

<br>Interphone


<br>Full-duplex 全双向 双向同时有两路信号<br>
<img alt="DataFlow" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Dataflow.png" referrerpolicy="no-referrer">
<br><br><br>
<br>Analog signals are continuous electrical signals that vary in time. 模拟信号
<br>Digital signals are non-continuous. 数字信号<br>
- They consist of pulses or digits with discrete levels or values.<br>
- The value of each pulse is constant.<br>
- Digital signals usually have two amplitude levels such as 1 or 0, HIGH or LOW.<br>
<img alt="Signal" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Signals.png" referrerpolicy="no-referrer">
<br><br>
<br>Less sensitive to the interferences (e.g., noise, magnetic field) 对扰动不敏感
<br>Easier for further processing (e.g., error correction, storage, etc.) 方便后续处理<br>
<img alt="NoiseSignal" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/NoiseSignal.png" referrerpolicy="no-referrer">
<br><br><br>
<br>Non-return to zero digital encoding scheme 不归零数字编码方案

<br>‘1’ bit is sent as a high value and ‘0’ bit is sent as a low value.
<br>The receiver may lose synchronization because the data may contain long runs of consecutive bits with the same value [no changes in voltage].


<br>Manchester digital encoding scheme  曼彻斯特数字编码方案

<br>The digital data is represented as: ‘0’ bit by a voltage from low to high; ‘1’ bit by a voltage from high to low.
<br>Manchester encoding is a synchronous clock encoding technique to encode the clock and data of a synchronous bit stream.
<br>数字数据表示为:“0”位由电压由低到高; “1”位由电压由高到低。 曼切斯特编码是一种同步时钟编码技术，用于对同步比特流的时钟和数据进行编码。
<br><img alt="Manchester" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/EncodingScheme/Manchester.png" referrerpolicy="no-referrer">
<br>Efficiency : 50%


<br>4B/5B digital encoding scheme 

<br>It produces a signal for a group of bits each time, rather than outputting a signal for each individual bit.
<br>Each time, a 4-bit input data (16 different bit patterns) is encoded as a 5-bit data (32 different bit patterns).
<br>By carefully choosing the 5-bit patterns which always contain two '1's even if the input data is all '0's, the clock synchronizations can be achieved.
<br>它每次为一组位产生信号，而不是为每个单独的位输出信号。 每次，4位输入数据(16种不同的位模式)被编码为5位数据(32种不同的位模式)。 通过仔细选择总是包含两个'1'的5位模式，即使输入数据都是'0'，也可以实现时钟同步。
<br>Efficiency : 80%


<br><br>
<br>AM - Amplitude Modulation  调幅

<br>Carrier载波
<br>On/Off 机械的表达

<br>Presence of the carrier:1
<br>Absence (or no carrier) :0


<br><img alt="AM" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/AM.png" referrerpolicy="no-referrer">


<br>FM - Frequency Modulation 调频

<br>A 0 is represented by the original carrier frequency
<br>A 1 by a much higher frequency (the cycles are spaced closer together).
<br><img alt="FM" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/FM.png" referrerpolicy="no-referrer">
<br>Frequency Modulation modifies the frequency of the carrier to represent the 1s or 0s. 操纵频率表示0/1


<br>PM - Phase Modulation 调相

<br>载波相位在每次出现1位时切换，但在0位时不受影响。 
<br>这些位被定时以符合特定的载波周期数。
<br><img alt="PM" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/PM.png" referrerpolicy="no-referrer">


<br><br>
<br>Pulse Coding Modulation 脉冲编码调制

<br>Sampling 采样

<br>是模拟-数字转换过程中的第一步，涉及按照特定的时间间隔（采样率）测量连续模拟信号的瞬时值。采样率必须至少是信号中最高频率的两倍，这是根据奈奎斯特定理来决定的，以确保信号可以被无失真地重建。


<br>Quantitation  量化

<br>采样后的步骤是量化，这个过程涉及将每个采样点的模拟值映射到最接近的数字级别。量化步骤确定了信号的数字表示可以取的不同值的数量。在图像中，量化被表示为一系列的水平线，每一条线对应一个量化级别。每个采样值被"量化"到最接近的这些水平线上。在量化过程中，采样值是用比特数表示的，而这个比特数（8位到24位）决定了可能的量化级别的数量，也就是量化精度。




<br><img alt="Convert Signal" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/ConvertSignals.png" referrerpolicy="no-referrer">
<br>PCM samples the signal from 8 to 192 thousand times per second; each sample is represented by 8 to 24 bits.
<br><br>
<br>
<br>Assumption: noise free in the channel
<br>Formula:  

<br>B = Bit Rate (bit/sec)
<br>F = Channel Bandwidth in Hertz
<br>M = Number of levels in a signal (two for binary)


<br>
<br>In reality, the signal may be corrupted by electrical noise.
<br>Formula: 

<br>B = Actual Bit Rate (bit/sec)
<br>F = Channel Bandwidth in Hertz
<br>S = Signal Power in watts 
<br>N = Noise Power in watts


<br><br>

<br><br>
<br>A network is a set of devices(often referred to as nodes) connected by communication links.
<br>A node can be a computer, printer, or any other device capable of sending and/or receiving data generated by other nodes on the network.
<br><br>
<br>The computer networks can classified as the following 4 categories

<br>Local loop
<br>LANs
<br>MANs
<br>WANs


<br><br>
<br>It refers to the “last mile” of analog phone line that goes from the Exchange Centre to your house. 指从交换中心到您家的 "最后一英里 "模拟电话线。

<br>Voice lines 话频线路
<br>Modem (56 kbps) 调制解调器
<br>ISDN (Integrated Services Digital Network): 2 x 64 kbps digital lines 
<br>ADSL (Asymmetrical Digital Subscriber Line): up to 8 Mbps
<br>Cable Modems (up to 30 Mbps)  电缆调制解调器
<br>Network cable


<br><br>
<br>LANs are privately-owned networks within a single building or campus of up to a few kilometers in size.
<br>LANs run at speeds of 10Mbps to 10Gbps, have low delay, and make very few errors.
<br>The topologies 拓扑 of LANs are various: Bus, Ring, Star, etc.
<br><br>
<br>MANs are networks that connect LANs together within a city. 

<br>Example: Cable television network 


<br><br>
<br>WANs connect LANs together between cities.
<br>A WAN spans a large geographical area, often a country or continent.
<br><br>
<br>Many networks exists in the world with different hardware and software;  
<br>To communicate, it is better to connect different networks together.
<br>A collection of interconnected networks is called an internetwork or internet (which is used in a generic sense, in contrast to the worldwide Internet).
<br><br><br>Networks are recognized as a stack of layers or levels, each one built upon the one below it.<br>
<br>Each layer offers certain services to the higher layers, shielding those layers from the details of how the offered services are implemented.
<br>Between each pair of adjacent layers is an interface. The interface defines which primitives operations and services the lower layer makes available to the upper one.每一对相邻层之间都有一个接口。接口定义了下层向上层提供哪些基本操作和服务。
<br><br>Management of complex systems:<br>
<br>Modularization simplifies 

<br>Design 
<br>Maintenance
<br>Updating of a system


<br>Explicit structure allows

<br>Identification of the individual parts
<br>Relations among them


<br>Clear structure: layering

<br>Layered reference model
<br>Goal: different implementation of one layer fit with all implementations of other layers


<br><br>
<br>Addressing: Every layer needs a mechanism for identifying senders and receivers.
<br>Rules of data transfer: simplex or duplex, no. of channels
<br>Error control: Both sender and receiver must agree on some sort of error-detecting and error-correcting codes.
<br>Sequence: The protocol must provide solution for receiver to reassemble the messages properly.
<br>Flow control: The protocol should provide a mechanism for sender and receiver to regulate the transmission rate.
<br>Routing: A mechanism must be provided to choose a route when there are multiple paths between source and destination.
<br><br><br>
<br>To establish a connection, the sender, receiver and the subnet conduct a negotiation about parameters to be used, such as maximum message size, quality of service required, etc.

<br>The Quality of Service can be characterized in terms of Data Loss Rate, Delay Jitter, Data Rate, etc.
<br>Application Example: File transfer


<br><br>
<br>Each message carries the full destination address, and each one is routed through the system independent of all the others. 
<br>No negotiation is needed between sender and receiver.
<br><br>A service is formally specified by a set of primitives (operations) available to a user process to access the service. These primitives tell the service to perform some action or report on an action taken by a peer entity.<br><br><br>
<br>Network Topology refers to the layout of a network.
<br>Different configurations of network cable, computers and devices form different topologies.<br>
<img alt="Topology" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Topology.png" referrerpolicy="no-referrer">
<br><br>
<br>Bus topology: All devices are connected to a common backbone.
<br><img alt="Bus" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Topology/Bus.png" referrerpolicy="no-referrer">
<br>Advantages 

<br>Easy to connect a computer or peripheral to a linear bus. 方便连接
<br>Requires less cable length than a star topology. 耗材少


<br>Disadvantages

<br>Entire network shuts down if there is a break in the main cable. 不可靠
<br>Terminators are required at both ends of the backbone cable.
<br>Difficult to identify the problem if the entire network shuts down. o Not meant to be used as a stand-alone solution in a large building.


<br><br>
<br>Ring topology

<br>In a ring network, every device has exactly two neighbors for communication purposes 管理复杂


<br>All messages travel through a ring in the same direction (either "clockwise" or "counterclockwise")
<br><img alt="Ring" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Topology/Ring.png" referrerpolicy="no-referrer">
<br><br>
<br>Star topology

<br>A star topology is designed with each node (file server, workstations, and peripherals) connected directly to a central network hub or concentrator.
<br>Data on a star network passes through the hub or concentrator before continuing to its destination.
<br>The hub or concentrator manages and controls all functions of the network.
<br>It also acts as a repeater for the data flow.


<br>Advantages Current-connections

<br>Easy to install and wire.
<br>No disruptions to the network then connecting or removing devices.
<br>Easy to detect faults and to remove parts.


<br>Disadvantages

<br>Requires more cable length than a linear topology.
<br>If the hub or concentrator fails, nodes attached are disabled.
<br>More expensive than linear bus topologies because of the cost of the concentrators.


<br><img alt="Star" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Topology/Star.png" referrerpolicy="no-referrer">
<br><br>
<br>A tree topology combines characteristics of star and linear bus topologies.
<br>Tree topologies allow for the expansion of an existing network. 

<br>For example, enabling schools to configure a network for labs.


<br>Advantages

<br>Point-to-point wiring for individual segments.
<br>Supported by several hardware and software venders. 


<br>Disadvantages

<br>Overall length of each segment is limited by the type of cabling used.
<br>If the backbone line breaks, the entire segment goes down.
<br>More difficult to configure and wire than other topologies. 


<br><img alt="Tree" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Topology/Tree.png" referrerpolicy="no-referrer">
<br><br>
<br>A Mesh topology consists of a network where every device on the network is physically connected to every other device on the network.
<br>Advantages

<br>It provides a great deal of performance and reliability. 


<br>Disadvantages

<br>However the complexity and difficulty of creating one increases geometrically as the number of nodes on the network increases.


<br><img alt="Mesh" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/Topology/Mesh.png" referrerpolicy="no-referrer">
<br><br>
<br>Open System Interconnection (OSI) Model has seven layers.

<br>Physical Layer
<br>Data Link Layer
<br>Network Layer
<br>Transport Layer
<br>Session Layer
<br>Presentation Layer
<br>Application Layer


<br><img alt="OSI" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/OSI.png" referrerpolicy="no-referrer">
<br><img alt="OSI" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/OSI_Exchange.png" referrerpolicy="no-referrer">
]]></description><link>https://blog.allenygy.vip/computer-network/basic-concepts.html</link><guid isPermaLink="false">Computer-Network/Basic-Concepts.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:26:31 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/protocol.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Network/protocol.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Application-Layer" href="computer-network/application-layer.html" class="internal-link" target="_self" rel="noopener">Application-Layer</a>]]></title><description><![CDATA[ 
 <br>]]></description><link>https://blog.allenygy.vip/computer-network/application-layer.html</link><guid isPermaLink="false">Computer-Network/Application-Layer.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:26:24 GMT</pubDate></item><item><title><![CDATA[Assignment-1]]></title><description><![CDATA[ 
 <br><br><br>
<br>
Define what a Turing machine is.

<br>Turing machine is the abstract model of all computers.
<br>A Turing machine consists of a tape divided into cells, a moving read/write head, a state register storing the state of the Turing machine.


<br>
What is a UTM?

<br>UTM is a Turing machine that could simulate all other Turing machines.


<br><br>
<br>Describe the seven levels of transformations of a computer system.
<br>
<br>The seven levels of transformations in a computer system represent the progression from identifying a problem to the physical realization in a device. It starts with understanding the problem and formulating an algorithm, then translating it into a program. The program is mapped to an instruction set architecture, which is further implemented in a microarchitecture. At a lower level, the microarchitecture is translated into circuits, and finally, these circuits are realized in physical devices.
 

<br><br>
<br>
Explain the fetch-decode-execute cycle of the von Neumann Architecture.

<br>the control unit fetch the next instruction from the memory
<br>the instruction is decoded into a language that the ALU understands
<br>data operands are fetched from the memory into the registers inside CPU
<br>the ALU executes the instruction and places the result into the registers or memory


<br><br>
<br>Given 8 bits, represent the numbers +53 and -109 into binary using the following approach: 1) Signed-magnitude; 2) One’s complement; 3) Two’s complement.
<br>
<br>+53:

<br>Signed-magnitude: 00110101
<br>One’s complement: 00110101
<br>Two’s complement: 00110101


<br>-109

<br>Signed-magnitude: 11101101
<br>One’s complement: 10010010
<br>Two’s complement: 10010011


<br><br>
<br>Convert -57.625 into binary using 32 bits floating number representation. Show your steps.
<br>
<br>-57.625 in binary using 32 bits floating number representation:

<br>1100 0010 0110 0110 1000 0000 0000 0000


<br><br>
<br>Consider two hexadecimal numbers: x434F4D50 and x55544552. What values do they represent for each of the five data types shown?
<br><br><br><br><br>
<br>The following Turing Machine is supposed to count in base 2. Fill in the missing rules.
<br>{
   "name": "Binary Increment",
   "max_state": 25,
   "symbols": "xyzabc01$@",
   "tape": "100",
   "position": 2,
   "rules": [
      [ 0, "#", "1", 1, "R" ],
      [ 0, "0", "1", 1, "R" ],
      [ 0, "1", "0", 0, "L" ],
      [ 1, "#", "#", 0, "L" ],
      [ 1, "0", "0", 1, "R" ],
      [ 1, "1", "1", 1, "R" ]
   ]
}
Copy<br><br>
<br>
Show that 

<br>

<br>Using truth table; (5 points)


<br><br>
<br>

<br>Using Boolean identities; (5 points)


<br><br>
<br>
<br><br>a. Write the Boolean expression in sum-of-products form.<br>
<br>
<br>b. Write the Boolean expression in product-of-sums form.<br>
<br>
<br>c. Simplify the sum-of-products form using Boolean identities;<br>
<br>
<br>
<br>
<br>d. Draw the logical circuit diagram for the simplified Boolean expression;<br><img alt="CO-logic" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/logic.png" referrerpolicy="no-referrer"><br><br>
<br>Simplify the above Boolean expression using K-MAP.
<br><br>
<br>
]]></description><link>https://blog.allenygy.vip/computer-organization/assignment/as1/co-assignment-1.html</link><guid isPermaLink="false">Computer-Organization/Assignment/As1/Co-Assignment-1.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 17:50:09 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/logic.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/logic.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Co-Assignment-2" href="computer-organization/assignment/as2/co-assignment-2.html" class="internal-link" target="_self" rel="noopener">Co-Assignment-2</a>]]></title><description><![CDATA[ 
 <br><br><br>For the following transistor-level circuit, fill in the truth table. What is the logical expression of Z in terms of A and B? (12 points)<br><br><br><br>Fibonacci numbers are the sequence of numbers Fn defined by the linear recurrence equation  where . It is conventional to define . Given a word size of four bits, design a circuit to detect if a given input binary number  is a Fibonacci number or not. Show the following steps: (20 points)<br>
<br>Truth Table
<br><br>
<br>Sum of Product
<br><br>
<br>Simplify the logical expression using logical  identities
<br><br><br><br>
<br>Simplify the logical expression using K-MAP.
<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/K-MAP.png" referrerpolicy="no-referrer"><br><br>
<br>Draw the logical circuit and verify it.
<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Fibonacci.png" referrerpolicy="no-referrer"><br><br>Draw a combinational logic circuit of an eight-input multiplexor where the inputs (D7, D6, D5, D4, D3, D2, D1, D0) are each one-bit variables. Label the values of inputs and outputs of each gate of the circuit, assuming the eight inputs have the values (1, 0, 0, 1, 1, 1, 0, 0) respectively, and assuming D1 is selected. [Note: Assume you have an 3-8 decoder to use as a black box and do not draw the decoder circuit which is part of the multiplexor.] (8 points)<br><img alt="502y6j" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/502y6j.png" referrerpolicy="no-referrer"><br><br>Investigate the operation of the following circuit. Assume the initial state is 0000. Trace the outputs (the Qs) as the clock ticks and determine the purpose of the circuit. You must show your trace to complete your answer. (10 points)<br>
<img alt="JRr3J4" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/JRr3J4.png" referrerpolicy="no-referrer"><br>
<br>
Equation

<br>
Clock equation

<br>


<br>
Dirve equation

<br>
<br>
<br>
<br>


<br>
State equation

<br>Feature equation: 
<br>
<br>
<br>
<br>




<br>
State

<br><br> <br>
<br>
<img alt="StateDiagram" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/StateDiagram.png" referrerpolicy="no-referrer"><br>
This state diagram describes the function of a four-bit binary right-cycling shifter.<br><br>Complete the truth table for the following sequential circuit: (8 points)<br><img alt="4f6xhs" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/4f6xhs.png" referrerpolicy="no-referrer"><br><br><br>Design a finite state machine (FSM) for a counter that counts through the 3-bit prime numbers downwards and loop: . Assume the counter starts with initial prime set to 111 as its first 3 bit prime number. (12 points)<br>
<br>You need to provide the state transition diagram. Assume that the state is stored in three D Flip Flops. Hint: The set of all 3-bit prime numbers includes 2, 3, 5 and 7. (4 points)
<br>
<br>State Diagram
<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/StateDiagram-2.png" referrerpolicy="no-referrer"><br>
<br>Design the sequential circuit for the counter. The circuit is driven by the clock. The output is a 7 segment LED display. The various digits from 0 through 9 can be displayed using a 7-segment display as shown in the following figure.
<br><br><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br><img alt="zGv0xW" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/zGv0xW.jpg" referrerpolicy="no-referrer">]]></description><link>https://blog.allenygy.vip/computer-organization/assignment/as2/co-assignment-2.html</link><guid isPermaLink="false">Computer-Organization/Assignment/As2/Co-Assignment-2.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:02:58 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/K-MAP.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/K-MAP.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="CO-Assignment-3" href="computer-organization/assignment/as3/co-assignment-3.html" class="internal-link" target="_self" rel="noopener">CO-Assignment-3</a>]]></title><description><![CDATA[ 
 <br><br><br>Suppose a 32-bit instruction takes the following format: (10 points)<br>If there are 225 opcodes and 120 general purpose registers<br>
<br>What is the minimum number of bits required to represent the OPCODE? Explain why. (2 points)
<br>minimun number of bits to represent the opcode: 8 bits<br>
There are 225 opcodes  <br>
so we need at least 8 bits to represent the opcode<br>
<br>What is the minimum number of bits required to represent the Destination Register (DR)? Explain why. (2 points)
<br>minimun number of bits to represent the : 7 bits<br>
There are 120 General purpose registers <br>
so we need at least 7 bits to represent the opcode<br>
<br>What is maximum number of UNUSED bits in the instruction encoding? Explain why. (2 points)
<br>opcode: 8 bits<br>
DR: 7 bits<br>
SR1: 7 bits<br>
SR2: 7 bits<br>Unused bits: 32-8-21= 3 bits<br>
<br>Suppose the address space contains  memory locations and the addressability is 32 bits. How many bytes can the memory store in total?
<br>There are  bytes the memory can store in total.<br>
<br>
<br>How many address lines are necessary? How many data lines are necessary?
<br>32 address lines are necessary<br>
32 data lines are necessary<br><br>The LC-3 does not have an opcode for the logical function OR. That is, there is no instruction in the LC-3 ISA that performs the OR operation. However, we can write a sequence of instructions to implement the OR operation. The four instruction sequence below performs the OR of the contents of register 1 and register 2 and puts the result in register 3. Fill in the two missing instructions so that the four instruction sequence will do the job.<br>(1): 1001 100 001 111111<br>
(2): 1001 101 010 111111   <br>
(3): 0101 110 100 000 101<br>
(4): 1001 111 110 111111   <br><br>Address X3010:  1110 0110 0011 1111<br>
Address X3011:  0110 1000 1100 0000<br>
Address X3012:  0110 1101 0000 0000<br>
<br>Explain what each instruction does. (6 points)
<br>In the first instruction: <br>
It firstly extend the 9 bits offset  into 16 bits then add PC<br>
x3F+x3011=x3050<br>
 &lt;- x3050<br>In the second instruction: <br>
It firstly extend the 6 bits offset  into 16 bits, then add the content store in register , finally according the result of add operation find the address in memory then the content to the register .<br>In the third instruction: <br>
It firstly extend the 6 bits offset  into 16 bits, then add the content store in register , finally according the result of add operation find the address in memory then the content to the register .<br>
<br>What is that value to be loaded into R6? (2 points)
<br><br>
<br>
<br>
 X<br>
 X<br>
 X<br>
<br>We could replace the three-instruction sequence with a single instruction. What is it?  Write the instruction in binary. (2 points)
<br><br>
<br><br>Suppose the following LC-3 program is loaded into memory starting at location x30FF: (12 points)<br>
<br>Explain what each instruction does. (10 points)
<br>x30FF 1110 001 00000001<br>
<br>
x3100 0110 010 001 000010<br>
<br>
x3101 1111 0000 00100101<br>
<br>
x3102 0001 010 001 000001<br>
<br>
x3103 0001 010 010 000010<br>
<br>X30FF: Load x3100 to <br>
X3100: M[R1+2]-&gt;R2 Load the value of M[R1+2](x1441) to R2<br>
X3101: TRAP x25<br>
X3102: R1+R1-&gt;R2 R2=x6200<br>
X3103: R2+R2-&gt;R2 R2=xC400<br>
<br>If the program is executed, what is the value in R2 at the end of execution? (2 points)
<br>=<br><br>
<br>Construct the symbol table for the following LC-3 assembly language program. (10 points)
<br>AGAIN x3002<br>
ASCII x3009<br>
NEG x300A<br>
DSR x300B<br>
DDR x300C<br>
<br>Assemble it into binary machine code line by line by hand. (30 points)
<br>.ORIG 0011 0000 0000 0000<br>
x3000 0010 0000 0000 1000<br>
x3001 0010 0010 0000 1000<br>
x3002 1010 0100 0000 1000<br>
x3003 0000 0111 1111 1110<br>
x3004 1011 0000 0000 0111<br>
x3005 0001 0000 0010 0001<br>
x3006 0001 0100 0000 0001<br>
x3007 0000 1011 1111 1010<br>
x3008 1111 0000 0010 0101<br>
x3009 0000 0000 0100 0001<br>
x300A 1111 1111 1011 0110<br>
x300B 1111 1110 0000 0100<br>
x300C 1111 1110 0000 0110<br>
<br>What does the program do? (10 points)
<br>It print “ABCDEFGHI” on the console.]]></description><link>https://blog.allenygy.vip/computer-organization/assignment/as3/co-assignment-3.html</link><guid isPermaLink="false">Computer-Organization/Assignment/As3/CO-Assignment-3.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:03:19 GMT</pubDate></item><item><title><![CDATA[<a data-href="Co-Assignment-4" href="computer-organization/assignment/as4/co-assignment-4.html" class="internal-link" target="_self" rel="noopener">Co-Assignment-4</a>]]></title><description><![CDATA[ 
 <br><br><br>Answer:<br>
<br>R1 is not to be set to zero. R1 will not be detected at assembly or run time.
<br>'SUM' is not a valid numeric literal, and it is also not in the symbol table either. This error will be detected in assembly
<br><br>Answer:<br>In this program, if the numbers that start in Memory[x4000] end with numbers 0, smaller than x8000(32768)， then it will be multiplied by two. Otherwise, it will not be changed.<br><br>Ans:<br>      .ORIG x3000 
      AND R2,R2,#0
      LD R1,DIVIDND
      NOT R1,R1
      ADD R1,R1,#1
      LD R3,DIVISOR
LOOP  ADD R3,R3,R1
      BRn DONE
      ADD R2,R2,#1
      BRnzp LOOP
DONE  LD R4,DIVIDND
      ADD R3,R4,R3
      LEA R0, Info
      PUTS
      HALT
DIVISOR .FILL #30
DIVIDND .FILL #100
Info .STRINGZ "Example: R1 = 30, R6 = 100. Therefore 100/30, R2 = 3 and R3 = 10."
    .END
Copy<br><br>Answer:<br>
<br>
Interrupts: Using interrupts for handling I/O provides the advantage of allowing the processor to perform other tasks while waiting for I/O operations to complete. When an I/O device has finished its operation, it triggers an interrupt, allowing the CPU to immediately handle the data transfer or task associated with the I/O device. This approach is more efficient as it doesn't waste CPU cycles continuously checking the status of the I/O device.

<br>
Polling: Polling involves the CPU constantly checking the status of an I/O device to determine if it needs attention or has completed its task. It's simpler to implement but can be less efficient than using interrupts because it ties up the CPU in a loop, consuming processing power even when the I/O device doesn't need immediate attention. Polling might be used in scenarios where the hardware doesn't support interrupts or when the overhead of handling interrupts is too high compared to the frequency of I/O operations.

<br><br>Answer:<br>The last instruction in the interrupt service program is usually "RTI" (opcode 1000). It returns from the Interrupt Pops PSR and PC of the Supervisor stack, recovering the conditional code from the PSR. If necessary (i.e., if the current permission mode is User), revert from Saved.USP to a user stack pointer to R6.]]></description><link>https://blog.allenygy.vip/computer-organization/assignment/as4/co-assignment-4.html</link><guid isPermaLink="false">Computer-Organization/Assignment/As4/Co-Assignment-4.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:03:26 GMT</pubDate></item><item><title><![CDATA[Lab8]]></title><description><![CDATA[ 
 <br><br>.ORIG x3000
	LD R1, HELLO
	STI R1, TRAP_26
	TRAP x26
	HALT

HELLO .FILL x3006
TRAP_26 .FILL X0026
	
	ST R7, ADDRESS
	LEA R0 SHELLO
	PUTS
	LD R7, ADDRESS
	RET

ADDRESS .FILL x046A
SHELLO .STRINGZ "Hello, world!"
	.END 

Copy<br>
<br>At first, loading the program that print hello's address to R1.
<br>Then using STI to load this address to x0026.
<br>Finally I can use trapx26 to print "Hello,world".
]]></description><link>https://blog.allenygy.vip/computer-organization/lab/lab8.html</link><guid isPermaLink="false">Computer-Organization/Lab/Lab8.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 13:49:22 GMT</pubDate></item><item><title><![CDATA[Lab7]]></title><description><![CDATA[ 
 <br><br>Assembling the following assembly program first by hand and then verify your result using the assembler. Write a report describe the assembling process. Your report file should include the symbol table and the machine code in binary for the assembly code and other related information to describe the assembling process.<br>.ORIG x3050
LD R1,SIX
LD R2,NUMBER
AND R3,R3,#0
AGAIN ADD R3,R3,R2
      ADD R1,R1,#-1
      BRp AGAIN
HALT
NUMBER .FILL #1
SIX .FILL x0006
.END
Copy<br>x3050  x2207 LD R1, SIX<br>
x3051  x2405 LD R2, NUMBER<br>
x3052  x56E0 AND R3, R3, #0<br>
x3053 AGAIN x16C2 ADD R3, R3, R2<br>
x3054  x127F  ADD R1, R1, #-1<br>
x3055  x03FD  BRp AGAIN<br>
x3056  xF025  HALT<br>
x3057 NUMBER  x0001<br>
x3058 SIX x0006<br>
<br>Symbol table
<br><br>
<br>
Machine code<br>
0011 0000 0000 0000<br>
x3050 0010 0010 0000 0111<br>
x3051 0010 0100 0000 0101<br>
x3052 0101 0110 1110 0000<br>
x3053 0001 0110 1101 0010<br>
x3054 0001 0010 0111 1111<br>
x3055 0000 0011 1111 1101<br>
x3056 1111 0000 0010 0101<br>
x3057 0000 0000 0000 0001<br>
x3058 0000 0000 0000 0110

<br>
Process add R2 6 times, and store the result in R3

<br>
R3 = 6

]]></description><link>https://blog.allenygy.vip/computer-organization/lab/lab7.html</link><guid isPermaLink="false">Computer-Organization/Lab/Lab7.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 13:49:22 GMT</pubDate></item><item><title><![CDATA[Lab]]></title><description><![CDATA[ 
 <br><br><br>What does the following code? (There are 3 instructions.)<br>0011000000000000<br>
1001001001111111<br>
0001010001100001<br>
0001010000000010<br>  <br>
   <br>
   <br><br>Input the following code and try to understand what it does by executing it step by step. (There are 6 instructions.)<br>LEA R1, x2FFE<br>
ADD R2, R1, #14<br>
AND R2, R2, #0<br>
ADD R2, R2, #5<br>
STR R2, R1, #14<br>
LDI R3, x2FFD<br>Firstly, it load x2FFE to R1<br>
then ADD 14 to R1's content and store it into R2<br>
then AND 0 with R2 and store its result to R2<br>
then ADD 5 to R2 and store its result to R2<br>
then Store R2's content to the address that is R1's content plus 14<br>
finally x2FFD plus PC's content then find the address's content,using this content to find the address and load the content to R3<br><br>Write a LC3 machine code program to print out “Hello World!”. Hint: consider to use Trap instruction PUTS.<br>1110 0000 0000 0010<br>
1111 0000 0010 0010<br>
1111 0000 0010 0101<br>
0000 0000 0100 1000]]></description><link>https://blog.allenygy.vip/computer-organization/lab/lab6.html</link><guid isPermaLink="false">Computer-Organization/Lab/Lab6.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 13:49:22 GMT</pubDate></item><item><title><![CDATA[Problem]]></title><description><![CDATA[ 
 <br><br>Select any ISA instruction you have learned in the class, and analyze the process of the fetch-decode-execution cycle step by step. It should contain change of the state and change of the registers values, and PC, IR, MAR and MDR.<br><br>
<br>Fetch:<br>
Load the address stored in the Program Counter (PC) into the Memory Address Register (MAR).<br>
Send a "read" signal from MAR to memory to fetch the instruction.<br>
Store the fetched instruction into the Instruction Register (IR).<br>
Increment the Program Counter (PC) to point to the next instruction.
<br>Decode:<br>
Extract the opcode from the Instruction Register (IR).<br>
Decode the opcode to recognize the instruction as an ADD operation.
<br>Execute:<br>
Fetch the source operands (Src1 and Src2) from the registers specified by the instruction's fields.<br>
The Arithmetic Logic Unit (ALU) receives Src1 and Src2 values from the registers.<br>
ALU performs the addition operation: ALU_result = Src1 + Src2.<br>
Store the result (ALU_result) in the designated destination register (Dst).
]]></description><link>https://blog.allenygy.vip/computer-organization/lab/lab5.html</link><guid isPermaLink="false">Computer-Organization/Lab/Lab5.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 13:49:22 GMT</pubDate></item><item><title><![CDATA[Lab3]]></title><description><![CDATA[ 
 <br><br>
<br>From the specifications of the circuit, determine the required number of inputs and outputs, and assign a letter symbol to each.
<br>
<br>Input: 3 
<br>Output: 1 
<br>
<br>Derive the truth table that defines the required relationship between inputs and outputs.
<br><br>
<br>Obtain the SOP and simplified Boolean functions of each outputs as function of the input variables. (You can also use the K-Map to obtain the simplest Boolean function.)
<br>
<br>
<br>
<br>Draw the logic diagram.
<br><img alt="Lab3" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/Lab3.png" referrerpolicy="no-referrer">
<img alt="BL5eKv" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/BL5eKv.png" referrerpolicy="no-referrer"><br>
<br>Verify the correctness of the design.
]]></description><link>https://blog.allenygy.vip/computer-organization/lab/lab3.html</link><guid isPermaLink="false">Computer-Organization/Lab/Lab3.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 13:49:22 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/Lab3.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/Lab3.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Lab2]]></title><description><![CDATA[ 
 <br><br><br>
<br>Signed-magnitude: 803B
<br>1'complement: FFC4
<br>2'complement: FFC5
<br><br>1101 1011 0101 0000 0010 0000 0110 0000<br>
<br>Decimal form: $ -5.858239\times 10^{16}$
<br><br>
<br>C2378000
<br><br>
<br>'5' : 53
<br>'T' : 84
<br><br>
<br>'您': 0x60a8
<br>'好': 0x597d
]]></description><link>https://blog.allenygy.vip/computer-organization/lab/lab2.html</link><guid isPermaLink="false">Computer-Organization/Lab/Lab2.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 13:49:22 GMT</pubDate></item><item><title><![CDATA[<a data-href="Microarchitecture" href="computer-organization/lecture/microarchitecture.html" class="internal-link" target="_self" rel="noopener">Microarchitecture</a>]]></title><description><![CDATA[ 
 <br><br>
<br>
Microarchitecture connects circuits and ISA together.<br>
ISA = Instruction Set Architecture

<br>
ISA specifies what hardware does, but not how

<br>ISA defines the instruction code


<br>
Microarchitecture specifies how it does it

<br>Microarchitecture determine how it work it


<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Microarchitecture.png" referrerpolicy="no-referrer"><br>
<br>The ISA is the interface of a processor as seen by an assembly language programmer<br>
or compiler writer
<br>Micro-architecture transfers the ISA into an implementation
<br>For a given ISA, there might be many different microarchitectures
<br>An architecture is a collection of circuits connected
<br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/John_von_Neumann.png" referrerpolicy="no-referrer" style="max-width: 100%;"><img alt="VNA" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/VNA.png" referrerpolicy="no-referrer"><br>
<br>Memory
<br>CPU

<br>Register
<br>ALU
<br>CU


<br>I/O
<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Stored-Program-Computer.png" referrerpolicy="no-referrer"><br>
<br>Memory stores not only data, but coded instructions that make up a computer program
<br>CPU fetches and executes – interprets - successive instructions of the program
<br>Program is simply data for the interpreter – as in a Universal Turing Machine!
<br>Single expandable resource pool – main memory
<br>constrains both data and program size


<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/Lc-3.png" referrerpolicy="no-referrer"><br><br>
<br>Address space 

<br>means: there are  block


<br>Addressability 
<br>Each block store 16-bit instruction

<br>Each block represent by a Hexadecimal code

<br>x0000
<br>x0001
<br>....


<br>Address 逐行递增


<br>Memory is store element
<br>Basic Operations

<br>LOAD

<br>read a value from a memory location


<br>STORE<br>
- write a value to a memory location<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/Memory.png" referrerpolicy="no-referrer">


<br><br>
<br>MAR: Memory Address Register (D flip-flops)
<br>MDR: Memory Data Register (D flip-flops)<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/MAR-MDR.png" referrerpolicy="no-referrer">
<br>
<br>To read a location (A):

<br>Write the address (A) into the MAR.
<br>Send a “read” signal to the memory.
<br>Read the data from MDR.


<br>To write a value (X) to a location (A):

<br>Write the data (X) to the MDR.
<br>Write the address (A) into the MAR.
<br>Send a “write” signal to the memory.


<br><br>
<br>The brain of the computer
<br>It is the part that actually executes the machine instructions
<br>Inside the CPU

<br>Data path

<br>Registers


<br>Control Path

<br>IR (instruction register), PC (program counter), FSM (finite state machine)




<br><br>
<br>Register is store element

<br>Achieved by D filp-flop


<br>8 Register

<br>Each register represent by 3 bit to record its address

<br>000 
<br>001 
<br>010 
<br>...
<br>110 
<br>111 




<br>Source Register 1 
<br>Source Register 2 
<br>Destination Register 
<br><img alt="Register" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/Register.png" referrerpolicy="no-referrer"><br>
<br>Why register?<br>
Closer to processing unit, allow quicker access to intermediate results instead of going to memory
<br><br>Perform arithmetic and logic operations (AND, NOT, ADD) on values stored in registers<br>
<br>ADD  
<br>AND  
<br>NOT A
<br>PASS A
<br><br>Control Unit: a finite state machine coordinates execution of the program<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/CU.png" referrerpolicy="no-referrer"><br>
IR Get the Instruction from Memory through PC's address<br>
<br>PC Program Counter

<br>It stores the next instruction address
<br>In each clock, PC+=1
<br>In x86 architecture also called IP Instruction Pointer


<br>IR Instruction Register

<br>Current Instruction


<br>Control Unit as a Finite State Machine<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/CU-FSM.png" referrerpolicy="no-referrer">
<br><br>
<br>Devices for getting data into and out of memory
<br>Each device has its own interface, usually a set of registers like the memory’s MAR and MDR

<br>keyboard: data register (KBDR) and status register (KBSR)
<br>console: data register (DDR) and status register (DSR)


<br><br>
<br>The instruction is the most basic unit of computer processing.
<br>One instruction specifies two things:

<br>opcode: operation to be performed
<br>operands: data/locations to be used for operation


<br>An instruction is encoded as a sequence of bits (just like data!)
<br>Control unit interprets instruction
<br>A computer’s instructions and their formats is known as its Instruction Set Architecture (ISA).
<br><br>
<br>opcode: 0001
<br>steering bit IR[5]
<br>If IR[5]=0<br>ADD DST SR1 000 SR2
0001 xxx xxx 000 xxx
Copy<br>
<br>operands: Src1,Src2,Dst

<br>Src1+Src2-&gt;Dst


<br>If IR[5]=1<br>ADD DST SR1 1 xxxxx
0001 xxx xxx 1 xxxxx
Copy<br>
<br>operands: Src1,Dst,xxxxx

<br>Src1+xxxxx-&gt;Dst


<br><br>
<br>
opcode: 0110

<br>
operands: Src,Dst

<br>
Load the value in memory location Src into register Dst

<br>
Move [Base + Offset] to Dst

<br>
Load memory content at address (R3 + 6) to R2

<br>LDR DST SRC offset
0110 xxx xxx xxxxxx
Copy<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/LDR.png" referrerpolicy="no-referrer"><br><br>
<br>Fetch
<br>Decode
<br>Evaluate Address
<br>Fetch operands
<br>Execute
<br>Store result
<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/instruction-process.png" referrerpolicy="no-referrer"><br><br>PC-MAR-MDR-IR<br>Load next instruction (at address stored in PC)<br>
from memory into Instruction Register (IR).<br>
<br>Load contents of PC into MAR.
<br>Send “read” signal to memory.
<br>Read contents of MDR, store in IR.
<br>Then increment PC, so that it points to the next instruction in sequence.<br>
<br>PC becomes PC+1.
<br><br>First identify the opcode.<br>
<br>In LC-3, this is always the first four bits of instruction.
<br>A 4-to-16 decoder asserts a control line corresponding to the desired opcode.
<br><br>
<br>For instructions that require memory access, compute address used for access.
<br>Examples:

<br>add offset to base register (as in LDR)
<br>add offset to PC (or to part of PC)


<br><br>
<br>Obtain source operands needed to perform operation.
<br>Examples:

<br>load data from memory (LDR)
<br>read data from register file (ADD)


<br><br>
<br>Perform the operation, using the source operands.
<br>Examples:

<br>send operands to ALU and assert ADD signal
<br>do nothing (e.g., for loads and stores)


<br><br>
<br>Write results to destination (register or memory)
<br>Examples:

<br>result of ADD is placed in destination register
<br>result of memory load is placed in destination register


<br>for store instruction, data is stored to memory
<br><br>
<br>In the FETCH phase, PC is incremented by 1 automatically (counter)
<br>Other Sequence

<br>if-then, loop, function call
<br>Achieved by special instruction that changes the content of PC

<br>Jumps (unconditionals)
<br>Branches (conditional)




<br><br>Set the PC to the value obtained by adding an offset to a register.<br>JMPR 000 BASE offset
1100 000 011 000110
Copy<br>Add the value of 6 (offset) to the contents of R3 (Base),and load the result into the PC<br>This becomes the address of the next instruction to fetch.<br><br>The clock is a signal that keeps the control unit moving.<br>
<br>
At each clock “tick,” control unit moves to the next machine cycle -- may be next instruction or next phase of current instruction.

<br>
Stopping the Computer

<br>Stopping the instruction cycle requires stopping the clock


<br><br>
<br>Three basic kinds of instructions:

<br>computational instructions (ADD, AND, …)
<br>data movement instructions (LD, ST, …)
<br>control instructions (JMP, BRnz, …)


<br><br>
<br>Computer = processing unit + memory system + I/O

<br>Processing unit = control + data path

<br>Control = FSM Finite state machine

<br>Inputs = machine instruction,datapath condition
<br>Outputs = register transfer control signal, ALU operation codes
<br>Instruction interpretation = instruction fetch, decode, execute, write


<br>Datapath = function units +registers

<br>All logic used to process information

<br>Functional units = ALU, multipliers,dividers...
<br>Register = PC program counter, IR instruction register, storage registers








]]></description><link>https://blog.allenygy.vip/computer-organization/lecture/microarchitecture.html</link><guid isPermaLink="false">Computer-Organization/Lecture/Microarchitecture.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:25:43 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Microarchitecture.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Microarchitecture.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="ISA" href="computer-organization/lecture/isa.html" class="internal-link" target="_self" rel="noopener">ISA</a>]]></title><description><![CDATA[ 
 <br><br>
<br>ISA specifies what hardware does, but not how

<br>ISA defines the instruction code


<br>Microarchitecture specifies how it does it

<br>Microarchitecture determine how it work it<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/ISA_overview.png" referrerpolicy="no-referrer">


<br>The ISA specifies all the information about the computer that the software has to know.<br>
<br>Memory

<br>Address space (how many locations?)
<br>Addressability (word or byte, word size)


<br>Registers

<br>Number (how many?)
<br>Type


<br>Instructions

<br>Operations
<br>Data types
<br>Addressing modes


<br><br>
<br>Lc-3 is a finite state machine<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/FSM.png" referrerpolicy="no-referrer">
<br><br>
<br>Address space 

<br>means: there are  block


<br>Addressability 
<br>Each block store 16-bit instruction

<br>Each block represent by a Hexadecimal code

<br>x0000
<br>x0001
<br>....


<br>Address 逐行递增


<br>Memory is store element
<br>Basic Operations

<br>LOAD

<br>read a value from a memory location


<br>STORE<br>
- write a value to a memory location<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/Memory.png" referrerpolicy="no-referrer">


<br><br>
<br>
features:<br>
Special storaqge devices that are inside the GPU.<br>
Fast to access 1 clock cycle<br>
General Purpose Register GPR: accessible instructions

<br>
Register is store element

<br>Achieved by D filp-flop


<br>
Register File

<br>8 GPRs

<br>Each register represent by 3 bit to record its address

<br>000 
<br>001 
<br>010 
<br>...
<br>110 
<br>111 




<br>Source Register 1 
<br>Source Register 2 
<br>Destination Register 


<br>
Other special purpose registers:

<br>MAR,MDR
<br>PC,IR
<br>Condition codes: P,Z,N
<br>KBDR,KBSR,DDR,DSR


<br><img alt="Register" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/Register.png" referrerpolicy="no-referrer"><br><br>
<br>Opcode What the instruction does
<br>Operands What the operation acts on
<br>In Lc-3<br>
<br>4 bits opcode (15)
<br>2 Sources and 1 destination<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/instruction.png" referrerpolicy="no-referrer">
<br><br><br><br>
<br>
'Immediate' addressing mode

<br>
ADD 0001

<br>
AND 0101

<br>---- --- --- --- ---
ADD  DST SR1 000 SR2
0001 xxx xxx 000 xxx

---- --- --- --- ---
AND  DST SR1 000 SR2
0001 xxx xxx 000 xxx
Copy<br>When string bit is 0 the addressing mode is "register mode"<br>
Otherwise is "immediate mode"<br>---- --- --- - -----
ADD  DST SR1 1 Imm5
0001 xxx xxx 1 Imm5

---- --- --- - -----
AND  DST SR1 1 Imm5
0001 xxx xxx 1 Imm5
Copy<br>Imm5 is a const integer and imm5 will be extend to 16 bits when it be calcuted.<br>
<br>subtract

<br>2's complement


<br>OR

<br>


<br>Set Zero

<br>AND 0000 0000 0000 0000


<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/AND-ADD_imm5.png" referrerpolicy="no-referrer"><br>
<br>NOT 1001 Register Addressing mode
<br>---- --- --- -------
NOT  DST SRC 111111
1001 Reg Reg 111111
Copy<br><br>
<br>
Load read data from memory to register

<br>LD 0010 direct mode
<br>LDI 1010 base+offset mode
<br>LDR 0110 indirect mode


<br>
Store write data from register to memory

<br>ST 0011 direct mode
<br>STI 1011 base+offset mode
<br>STR 0111 indirect mode


<br>
Load effectively address compute address

<br>LEA 1110 immediate mode - does not access memory


<br>---- ---   ----------
LEA  DR/SR addr.gen.bits
1110 DR/SR addr.gen.bits
Copy<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/LEA_address_mode.png" referrerpolicy="no-referrer"><br><br>
<br>BR 0000
<br>JMP/RET 1100
<br>JSR/JSSR 0100
<br>RTI 0111
<br>TRAP 1111
<br><br>
<br>2's complement integers
<br><br>
<br>3 single bit registers (set to 1 or cleared to 0)

<br>N: when value written was negative
<br>Z: when value written was zero
<br>P: when value written was positive


<br>Affected each time any register is written
<br>Condition codes are read by conditional branch instructions
<br><br>5 addressing modes<br>
<br>Explicitly in the instruction itself 立即寻址
<br>In register 寄存器寻址
<br>In memory 内存寻址

<br>Pc-relative mode: 
<br>Base+offset mode: 
<br>Indirect mode: the address of a location that contains the address of the operand (indirect)


<br><br>
<br>LD

<br>opcode 0010
<br>effective address=(PC)+SEXT(IR[8:0])


<br>---- ---  ---------
LD   Dst  
0010 Reg  
Copy<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/lc-3/LD_address_mode.png" referrerpolicy="no-referrer"><br>
<br>ST

<br>Opcode 0011
<br>effective address=(PC)+SEXT(IR[8:0])


<br>---- ---  ----------
ST   Dst  
0011 Reg  
Copy<br>
<br>offset 9 bits
<br>operand must be within 256 locations of the instruction<br><br>
<br>LDR

<br>opcode 0110
<br>effective address = (BaseRegister)+offset


<br>---- ---  ---   ------
LDR  Dst  BaseR offset
0110 Reg  Reg
Copy<br>
<br>offset 6 bits
<br>Base+offset can address any location in memory<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/LDR_address_mode.png" referrerpolicy="no-referrer"><br>
<br>STR

<br>opcode 0111
<br>effective address = (BaseRegister)+offset


<br>---- ---  ---   ------
STR  Dst  BaseR offset
0111 Reg  Reg
Copy<br><br>
<br>
An address is first formed exactly the same way as with LD and ST

<br>
This address contains the address of the operand.

<br>
Just like base+offset, indirect mode can also address any location in the memory.

<br>
Memory has to be accessed twice in order to get the address of the operand

<br>
LDI

<br>opcode 1010
<br>pointer address = (PC) + SEXT(IR[8:0])
<br>effective address = Mem[(PC)+SEXT(IR[8:0])]


<br>---- ---  ---------
LDI  Dst  Addr.Gen.bits
1010 Reg  Addr.Gen.bits
Copy<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/LDI_address_mode.png" referrerpolicy="no-referrer"><br>
<br>STI

<br>opcode 1011
<br>pointer address = (PC) + SEXT(IR[8:0])
<br>effective address = Mem[(PC)+SEXT(IR[8:0])]


<br><br>
<br>
Lc-3 has 3 conditional code registers

<br>N negative
<br>Z zero
<br>P positive


<br>
set by any instruction that stores a value to a register

<br>ADD,AND,NOT,LD,LDR,LDI,LEA


<br>
BR

<br>opcode 0000


<br>---- --- ---------
BR   NZP offset
0000 NZP offset
Copy<br>when condition is satisfied PC=PC+offset<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Lc-3/BR_DataPath.png" referrerpolicy="no-referrer"><br>
<br>JMP jump OR goto

<br>opcode 1100


<br>---- --- ---   ------
JMP  000 BaseR 000000
1100 000 Reg   000000
Copy<br>unconditional jump<br>
PC jump to Reg<br>
<br>TRAP Invoke a system routine

<br>opcode 1111


<br>---- ---- --------
TRAP 0000 trapvec
1111 0000
Copy<br>PC is set to the instruction TRAP]]></description><link>https://blog.allenygy.vip/computer-organization/lecture/isa.html</link><guid isPermaLink="false">Computer-Organization/Lecture/ISA.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:25:37 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/ISA_overview.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/ISA_overview.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="From-Transistors-to-Gates" href="computer-organization/lecture/from-transistors-to-gates.html" class="internal-link" target="_self" rel="noopener">From-Transistors-to-Gates</a>]]></title><description><![CDATA[ 
 <br><br><img width="" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-ClaudeShannon.png" referrerpolicy="no-referrer"><br>
<br>
Claude Shannon

<br>His master's thesis in 1937, A Symbolic Analysis of Relay and Switching Circuits, is considered as "possibly the most important, and also the most famous, master's thesis of the century.”
<br>He came up with the idea that electrical switches can be used to do Boolean logic
<img alt="SwitchtoBooleanExpression" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-SwitchtoBooleanExpression.png" referrerpolicy="no-referrer">



<br>
Relay 继电器

<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Relay.png" referrerpolicy="no-referrer">

<br>
Vacuum Tube 真空管

<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-VacuumTube.png" referrerpolicy="no-referrer" style="max-width: 100%;">

<br>
Transitor 晶体管

<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Transistor.png" referrerpolicy="no-referrer">

<br><br>A transistor is a discrete electronic component that can behave like a switch 可视为开关<br>
<br>Tiny, cheap, flexible and reliable

<br>onducts when VGS is high (N Type transistor) (close)
<br>Blocks when VGS is 0 (open)


<br><br>Complementary Metal-Oxide Semiconductor 互补金属氧化物半导体<br>
<br>Two types: P-type (positive) and N-type (negative)

<br>P-type

<br>Open (insulating) if gate is “on” = 1 激活时(1)阻断
<br>Closed (conducting) if gate is “off” = 0 休眠时(0)导通


<br>N-type

<br>Open if gate is “off” = 0 激活时(1)导通
<br>Closed if gate is “on” = 1 休眠时(0)阻断




<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-COMS.png" referrerpolicy="no-referrer"><br><br>Boolean functions are implemented in digital computer circuits called logic gates.<br>
<br>A gate is an electronic device that produces a result based on two or more input values.
<br>In reality, gates consist of one to six transistors, but digital designers think of them as a single unit.
<br>Integrated circuits contain collections of gates suited to a particular purpose.
<br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-InverterGate.png" referrerpolicy="no-referrer"><br>
<br>In = 0v -&gt; P conduct N insulate -&gt; Out is 1 (2.9 v)
<br>In = 1v -&gt; P insulate N conduct -&gt; Out is 0 (0 v)
<br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-AND/NAND.png" referrerpolicy="no-referrer"><br>AND consists of NAND and NOT gates.<br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-NorGate.png" referrerpolicy="no-referrer"><br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-ORGate.png" referrerpolicy="no-referrer"><br>OR Gate consists of NOR and NOT gates.<br><br>A universal gate is a gate which can implement any Boolean function without need to use any other gate type.<br>
<br>The NAND and NOR gates are universal gates.
<br>Demorgans'Law

<br>
<br>


<br><br>
<br>
<br>
<br>
<br><br>
<br>
<br>
<br>
<br>Demorgans'Law 记忆技巧<br>
<br> 帽子不变,一分一和

<br>
<br>


]]></description><link>https://blog.allenygy.vip/computer-organization/lecture/from-transistors-to-gates.html</link><guid isPermaLink="false">Computer-Organization/Lecture/From-Transistors-to-Gates.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:25:31 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-ClaudeShannon.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-ClaudeShannon.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="From-Gates-to-Circuits-II-Sequential-Circuits" href="computer-organization/lecture/from-gates-to-circuits-ii-sequential-circuits.html" class="internal-link" target="_self" rel="noopener">From-Gates-to-Circuits-II-Sequential-Circuits</a>]]></title><description><![CDATA[ 
 <br><br><br>Sequential circuits’ output depends not only on its current inputs, but also its previous inputs (current state)<br>  =    <br>
<img alt="tylAV6" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/tylAV6.jpg" referrerpolicy="no-referrer"><br><br>
<br>It should be able to hold a single bit, 0 or 1.
<br>You should be able to read the bit that was saved.
<br>You should be able to change the bit. There are only two choices:

<br>Set the bit to 1
<br>Reset, or clear, the bit to 0.


<br><br><img alt="No7sF8" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/No7sF8.jpg" referrerpolicy="no-referrer"><br>
<br>
Input:

<br>: set
<br>: rese
<br>


<br>
Output:

<br>


<br>
Set Function:<br>
When  <br>
Then change  lock the state 

<br>
Reset Function:<br>
When  <br>
Then change  lock the state 

<br>When    <br>
   reach first<br>
    reach first<br>
This results in a J-K flip-flop<br>
<img alt="PRXb7m" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/PRXb7m.jpg" referrerpolicy="no-referrer"><br>
<br>
For inputs SR = 00, the next value of Q could be either or 1, depending on the current value of Q.

<br>
So the same inputs can yield different outputs, depending on whether the latch was previously set or reset.

<br>
This is very different from the combinational circuits that we’ve seen so far, where the same inputs always yield the same outputs.

<br>
4-bit latch

<br><img alt="5eYPUT" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/5eYPUT.jpg" referrerpolicy="no-referrer"><br><br>
<br>Enable 实现锁存功能

<br>当Enable为0时: S,R皆为0电路锁存


<br><img alt="S8vJZG" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/S8vJZG.jpg" referrerpolicy="no-referrer"><br><br>
<br>与SR—NOR Latch 类似
<br><img alt="MRA63x" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/MRA63x.jpg" referrerpolicy="no-referrer">
<img alt="fIX38c" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/fIX38c.jpg" referrerpolicy="no-referrer"><br><br>
<br>There is a finite time delay between a change in the inputs of a gate and any change in the output. This time is called gate delay.(栅极延迟)
<br>In order to avoid glitches, we want to design storage elements that only accept input when ordered to so We use a clock to be the control input that gives orders to the circuit about when to change states
<br><br>A clock is a special circuit that produces electrical pulses<br>
Clock speed is generally measured in megahertz (Mhz), or millions of pulses per second<br>
A clock is used by a sequential circuit to decide when to update the state of the circuit 决定何时更新电路状态<br>
inputs to the circuit can only affect the storage element at given, discrete instances of time<br><img alt="CJX7UK" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/CJX7UK.jpg" referrerpolicy="no-referrer"><br><br>
<br>Edge-triggered: allowed to change their states on either the rising or falling edge of the clock signal
<br>Level-triggered: allowed to change state whenever the clock signal is either high or low
<br>Technically, a latch is level triggered, whereas a flip-flop is edge triggered<br>
锁存器是电平触发，触发器是边缘触发
<br><br>
<br>When C is 1, the circuit acts just like the NOR gate S-R latch.
<br>When C is 0, the Set and Reset inputs are disabled
<br>The latch can change only when C is true<br>
<img alt="HphHwT" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/HphHwT.jpg" referrerpolicy="no-referrer">
<br><br><img alt="uH3Pxy" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/uH3Pxy.jpg" referrerpolicy="no-referrer"><br>When {J=1,K=0,C=1} work like a SR latch<br>
When {J=0,K=1,C=1} work like a SR latch<br>
When {J=1,K=1} Q 状态反转<br><br>
<br>
It stores one bit of information

<br>
The output changes only when the value of D changes

<br>
an output value of 1 means the circuit is currently “storing” a value of 1

<br>
A D flip-flop is a true representation of physical computer memory<br>
<img alt="jNaCls" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/jNaCls.jpg" referrerpolicy="no-referrer">

<br>
D 实现设置/重置 0/1

<br>
EN 实现 锁存 当EN为0 电路锁存<br>
<img alt="D-SR-Latch" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/D-SR-Latch.png" referrerpolicy="no-referrer">

<br><br>
<br>4 input lines, 4 output lines and a WE (Write Enable) line (also called clock)
<br>WE实现锁定输出状态
<br><img alt="Cj6sQJ" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/Cj6sQJ.jpg" referrerpolicy="no-referrer"><br><br><img alt="iYeQJk" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/iYeQJk.jpg" referrerpolicy="no-referrer">
<img alt="mxxLHK" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/mxxLHK.jpg" referrerpolicy="no-referrer"><br>B0 (t+1) = JK (1, 1) = NOT B0(t)<br>
B1 (t+1) = JK (B0(t), B0(t))<br>
B2 (t+1)= JK (B0(t)B1(t), B0(t)B1(t))<br>
B3 (t+1)= JK (B0(t)B1(t)B2(t), B0(t)B1(t)B2(t))<br><br>可以说是三个4-bit register组合<br>
Decoder 选择 其中一条线路<br>
输出则为 的 中的一个<br>
以选择为例，输出 的 <br>
<br>The inputs lines: In0, In1, and In2
<br>Address lines: S0 and S1
<br><img alt="MfeAxu" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/MfeAxu.jpg" referrerpolicy="no-referrer"><br>
<br>Write a word to the memory
<br>

<br>An address is asserted on S0 and S1.


<br>

<br>WE (write enable) is set to high.


<br>

<br>The decoder using S0 and S1 enables only one AND gate, selecting a given word in memory.


<br>

<br>The line selected in Step 3 combined with the clock and WE select only one word.


<br>

<br>The write gate enabled in Step 4 drives the clock for the selected word.


<br>

<br>When the clock pulses, the word on the input lines is loaded into the D flip-flops.


<br><br>
<br>Let’s assume a very simple microprocessor with 10 address lines (1KB memory)
<br>Let’s assume we wish to implement all its memory space and we use 128 x 8 memory chips
<br>SOLUTION

<br>We will need 8 memory chips (8x128=1024)
<br>Chip selection: We will need 3 address lines to select each one of the 8 chips
<br>Memory location selection inside each chip: Each chip will need 7 address lines to address its internal memory cells
<br>Address: 000 0000000 ()()


<br><img alt="ivrwmk" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/ivrwmk.jpg" referrerpolicy="no-referrer">
具有10根地址线的简单微处理器（可寻址1KB内存）使用128 x 8存储芯片的方法。<br>具体来说：<br>
<br>
10根地址线的微处理器（1KB内存）：

<br>这个微处理器有10根地址线，这意味着它可以寻址 (2^{10}) 个不同的内存位置，可访问1KB（1千字节）的内存。


<br>
存储芯片：

<br>为了覆盖整个内存空间，选择了128 x 8存储芯片。每个芯片的容量为128个存储位置（128个地址），每个存储位置可存储8位（1字节）。


<br>
所需存储芯片数量：

<br>由于总内存空间为1KB，每个芯片的容量为128个存储位置，因此需要总共8个芯片（(1 \text{KB} / 128 \text{每芯片的位置})）来容纳整个内存空间（(8 \text{芯片} \times 128 = 1024 \text{位置})）。


<br>
芯片选择：

<br>为了选择8个存储芯片中的每一个，使用3根地址线。使用3根地址线可以选择8个芯片中的任意一个（因为 (2^3 = 8)）。


<br>
每个芯片内存位置的选择：

<br>在每个芯片内部，需要7根地址线来寻址内部存储单元。这7根线帮助选择每个芯片中128个存储位置中的特定一个。


<br>
地址：000 0000000：

<br>这是一个示例地址。前三位数（000）用于选择8个存储芯片中的一个。剩下的7位数（0000000）用于在选定的芯片内选择特定的存储位置，其中每个芯片有128个可用的存储位置。


<br><br>
<br>Sequential circuits can remember their previous inputs
<br>Sequential circuits require clocks to control their changes of states
<br>The basic sequential circuit unit is the flip-flop: SR, JK and D flip-flop
<br>Examples: registers, binary counter and memory
]]></description><link>https://blog.allenygy.vip/computer-organization/lecture/from-gates-to-circuits-ii-sequential-circuits.html</link><guid isPermaLink="false">Computer-Organization/Lecture/From-Gates-to-Circuits-II-Sequential-Circuits.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:25:02 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/tylAV6.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/tylAV6.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Finite-State-Machine" href="computer-organization/lecture/finite-state-machine.html" class="internal-link" target="_self" rel="noopener">Finite-State-Machine</a>]]></title><description><![CDATA[ 
 <br><br><br>
<br>The output of a sequential circuit is a function of the current input and the previous state 时序电路的输出是当前输入和先前状态的函数
<br>The state is stored in the storage element 状态存储在存储元件中
<br>The new state is also a function of the previous state and the current input 新状态也是前一个状态和当前输入的函数
<br><img alt="20KSlQ" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/20KSlQ.jpg" referrerpolicy="no-referrer"><br><br>
<br>A system is a finite state machine if it has the following five properties:  

<br>A finite number of states 有限状态
<br>A finite number of external inputs 有限外部输入
<br>A finite number of external outputs 有限外部输出
<br>An explicit specification of all allowed state transitions 所有合法状态转换的明确规范
<br>An explicit specification of the rules for each external output value 每个外部输出值的规则的明确规范


<br><br>
<br>Each state is shown with a circle, labeled with the state value – the contents of the circle are the outputs
<br>An arc represents a transition to a different state, with the inputs indicated on the label<br>
每个状态都用一个圆圈显示，并标有状态值 - 圆圈的内容是输出<br>
圆弧表示向不同状态的过渡，输入在标签上指示
<br><img alt="kOuuts" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/kOuuts.jpg" referrerpolicy="no-referrer"><br>
<br>3-bit counter
<br><img alt="1sA1to" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/1sA1to.jpg" referrerpolicy="no-referrer"><br>
<br>
A Danger Sign

<br>
当开关断开<br>
If the switch is turned off, all the lights are turned off and remain off

<br>
当开关闭合<br>
When the switch is in the ON position, the controller directs the lights as follows: During one unit of time, all lights will be off. In the next unit of time, lights 1 and 2 will be on. The next unit of time, lights 1, 2, 3, and 4 will be on. Then all five lights will be on. Then the sequence repeats: no lights on, followed by 1 and 2 on, followed by 1, 2, 3, and 4 on, and so forth.<br>
<img alt="WQStkW" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/WQStkW.png" referrerpolicy="no-referrer" style="max-width: 100%;"> <img alt="LfonWY" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/LfonWY.png" referrerpolicy="no-referrer">

<br>当All-on到All-off  输入0或1都可以实现而不是同时输入<br><img alt="5Nd4hq" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/5Nd4hq.png" referrerpolicy="no-referrer">
<img alt="Lrhv6a" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/Lrhv6a.png" referrerpolicy="no-referrer"><br>
<br>First, the two external inputs: the switch and the clock. The switch determines whether the finite state machine will transition through the four states or whether it will transition to state A, where all lights are off. The other input (the clock) controls the transition from state A to B, B to C, C to D, and D to A by controlling the state of the storage elements. We will see how, momentarily.
<br>Second, there are two storage elements for storing state information. Since there are four states, and since each storage element can store one bit of information, the four states are identified by the contents of the two storage elements: A (00), B (01), C (10), and D (11). Storage element 2 contains the high bit; storage element 1 contains the low bit. For example, the danger sign controller is in state B when storage element 2 is 0 and storage element 1 is 1.
<br>Third, combinational logic circuit 1 shows that the on/off behavior of the lights is controlled by the storage elements. That is, the input to the combinational logic circuit is from the two storage elements, that is, the current state of the finite state machine.
<br>Finally, combinational logic circuit 2 shows that the transition from the current state to the next state depends on the two storage elements and the switch. If the switch is on, the output of combinational logic circuit 2 depends on the state of the two storage elements.
<br><br>
<br>A Turing machine is a finite state machine plus a tape memory.
<br>Each transition may be accompanied by an operation on the tape (move, read, write).
<br>Its total possible configurations are arbitrarily large, regardless of the size of the program; it expands towards infinity.
<br>Turing machines have more computational power than FSM.
]]></description><link>https://blog.allenygy.vip/computer-organization/lecture/finite-state-machine.html</link><guid isPermaLink="false">Computer-Organization/Lecture/Finite-State-Machine.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:24:23 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/20KSlQ.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/20KSlQ.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Boolean-Algebra-from-Bits-to-Logic" href="computer-organization/lecture/boolean-algebra-from-bits-to-logic.html" class="internal-link" target="_self" rel="noopener">Boolean-Algebra-from-Bits-to-Logic</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Computers represent information by bit (Binary digit)
<br>A bit has two possible values, namely 0 and 1.
<br>A bit can be used to represent a truth value, true and false.
<br>Therefore bits operations correspond to the logical operations in Boolean Algebra.
<br><br>
<br>A function is a relation that uniquely associates members of one set with members of another set
<br>A Boolean function has

<br>At least one Boolean variable
<br>At least one Boolean operator
<br>At least one input from the set {0,1}


<br>It produces an output that is also a member of the set {0,1}
<br>
<br>Precedence

<br>NOT top priority,
<br>followed by AND
<br>then OR<br>
<img alt="CO-Boolean-Identities" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Boolean-Identities.png" referrerpolicy="no-referrer">


<br><br>
<br>There are two canonical forms

<br>Sum-of-products
<br>Product-of-sums


<br><br>
<br>Also called Disjunctive Normal Form (DNF) 析取范式
<br>Look at ONE<br>
<img alt="DNF" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-DNF.png" referrerpolicy="no-referrer">
<br><br>
<br>Also called Conjunctive Normal Form (CNF) 合取范式
<br>Look at ZERO<br>
<img alt="CNF" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-CNF.png" referrerpolicy="no-referrer">
]]></description><link>https://blog.allenygy.vip/computer-organization/lecture/boolean-algebra-from-bits-to-logic.html</link><guid isPermaLink="false">Computer-Organization/Lecture/Boolean-Algebra-from-Bits-to-Logic.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:24:05 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Boolean-Identities.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Boolean-Identities.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="What-is-a-Computer" href="computer-organization/lecture/what-is-a-computer.html" class="internal-link" target="_self" rel="noopener">What-is-a-Computer</a>]]></title><description><![CDATA[ 
 <br><br>
<br>
Definition:

<br>electronic, digital, general purpose computing machine that automatically follows a step-by-step list of instructions for solving a problem.
<br>This step-by-step list of instructions that a computer follows is also called a computer program.


<br>
Computer Part:  case, motherboard, CPU, RAM, power supply, hard drive, graphic cards.

<br><br>
<br>
In 1936, British mathematician Alan Turing developed a hypothetical device, the Turing machine, which is the abstract model of all computers

<br>
A Turing machine consists of

<br>a tape divided into cells
<br>a moving read/write head
<br>a state register storing the state of the Turing machine
<br>a finite table of instruction specifying what the machine does when reading the content of the current cell:

<br>move right/left; erase/write a symbol; change the state




<br>
All things that can be computed can be computed by a Turing machine

<br><br>
<br>Turing described a Turing machine that could simulate all other Turing machines.

<br>inputs: data + a description of computation (Turing machine)


<br>A computer is a Universal Turing Machine!
<br><br>
<br>Generation Zero: Mechanical Calculating Machines (1642-1945)  机械计算机
<br>The First Generation: Vacuum Tube Computers (1945-1953)  真空管计算机
<br>The Second Generation: Transistor Computers (1954-1965)  晶体管计算机
<br>The Third Generation: Integrated Circuit (IC) Computers (1965-1980)  集成电路计算机
<br>The Fourth Generation: VLSI Computers (1980-) (very large scale integration computer)
<br><br>
<br>
stored-program architecture

<br>
Both data and program are stored in the memory

<br>
A Central Processing Unit (CPU)

<br>Control unit 控制单元
<br>Arithmetic Logic Unit (ALU) 计算逻辑单元
<br>Registers
<br>IR: Current Instruction
<br>PC: store the address of next instruction


<br>
Main memory

<br>
I/O- system

<br>
a single path between the main memory and CPU, called the von Neumann bottleneck<br>
<img alt="The von Neumann Architecture" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-vonNeumannArchitecture.png" referrerpolicy="no-referrer">

<br><br>
<br>Fetch-decode-execute cycle

<br>the control unit fetch the next instruction from the memory 控制单元取指令
<br>the instruction is decoded into a language that the ALU understands 解码
<br>data operands are fetched from the memory into the registers inside CPU 从内存获取数据操作数到寄存器
<br>the ALU executes the instruction and places the result into the registers or memory 计算逻辑单元执行指令并把结果放到内存或寄存器


<br><br>
<br>CPU and memory are separate
<br>All data and code are in the memory
<br>CPU is usually faster than memory
<br>CPU is forced to wait for needed data to be transferred to or from memory
<br><br><img alt="System-bus-model" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-System-bus-model.png" referrerpolicy="no-referrer"><br><br>
<br>User level: applications such as qq.exe  app
<br>High level language: C, Java, C++ program language
<br>Assembly language
<br>Operating system
<br>Machine Language: Instruction Set A
<br>Control level: micro-code or hardwired
<br>Digital logic: circuits, gates
<br><br><img alt="Levels-of-Transformations" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Levels-of-Transformations-1.png" referrerpolicy="no-referrer"><br>
<img alt="Levels-of-Transformations" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Levels-of-Transformations-2.png" referrerpolicy="no-referrer"><br>
<br>Problem -&gt; Algorithm -&gt; Program -&gt; Instr Set Architecture -&gt; Microarch -&gt; Circuits -&gt; Device
<br><br>
<br>Instruction Set Architecture (ISA): instructions that a CPU can execute
<br>Microarchitecture: implementation of ISA
<br>Circuits: Details of electrical circuits
<br>Devices (transistors): Circuits are built by interconnecting transistors
<br>Bits: Transistors operate on bits (“0” or “1”) that represent data and information
<br><br><img alt="Layers-of-Transformations" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Layers-of-Transformations.png" referrerpolicy="no-referrer"><br>
<img alt="Hardware&amp;Software" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Hardware&amp;Software.png" referrerpolicy="no-referrer"><br>
<br>Whatever can be done by hardware can also be done by software, and vice versa
<br>Hardware implementations are faster but fixed
<br>Software implementations are more flexible but slower
]]></description><link>https://blog.allenygy.vip/computer-organization/lecture/what-is-a-computer.html</link><guid isPermaLink="false">Computer-Organization/Lecture/What-is-a-Computer.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:25:49 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-vonNeumannArchitecture.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-vonNeumannArchitecture.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="From-Machine-Language-to-Assembly-Language" href="computer-organization/lecture/from-machine-language-to-assembly-language.html" class="internal-link" target="_self" rel="noopener">From-Machine-Language-to-Assembly-Language</a>]]></title><description><![CDATA[ 
 <br><br>Assembler is a program that turns symbols into binary machine instructions.<br><br>
<br>Each line of a program is one of the following:

<br>an instruction
<br>an assembler directive (or pseudo-op)
<br>a comment


<br>Whitespace (between symbols) and case are ignored.
<br>Comments (beginning with “;”) are also ign
<br><br>LABEL OPCODE OPERANDS COMMENTS<br>
<br>optional: Label, Comments
<br>mandatory: Opcode, Operands
<br><br>
<br>Opcodes:

<br>reserved symbols that correspond to LC-3 instructions
<br>example: ADD, AND, LD, LDR


<br>Operands：

<br>Registers:
<br>Numbers: #(DEC) or x(HEX)
<br>Label: symbolic name oof memory location


<br><br>placed  at the beginning of the line<br>
assigns a symbolic name to the address corresponding to line<br>Loop ADD R1,R1,#-1
     Brp LOOP
Copy<br><br>
<br>Anything after a semincolon is comments
<br>Ignored by assembler
<br>Used by humans to document/ understand programs
<br>Tips for useful comments:

<br>avoid restating the obvious, as “decrement R1”
<br>provide additional insight, as in “accumulate product in R6”
<br>use comments to separate pieces of program


<br><br>Pseudo-operations<br>
<br>Do not refer to operations executed by program
<br>used by assembler
<br>look like instruction, but "opcode" starts whith dots
<br>]]></description><link>https://blog.allenygy.vip/computer-organization/lecture/from-machine-language-to-assembly-language.html</link><guid isPermaLink="false">Computer-Organization/Lecture/From-Machine-Language-to-Assembly-Language.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:25:19 GMT</pubDate></item><item><title><![CDATA[<a data-href="From-Gates-to-Circuits-I-Combinational-Circuits" href="computer-organization/lecture/from-gates-to-circuits-i-combinational-circuits.html" class="internal-link" target="_self" rel="noopener">From-Gates-to-Circuits-I-Combinational-Circuits</a>]]></title><description><![CDATA[ 
 <br><br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Basic-Building-Blocks.png" referrerpolicy="no-referrer"><br>
<br>AND/NAND
<br>OR/NOR/XOR
<br>NOT
<br>3 representations logically equivalent to one another<br>
<br>Truth table
<br>Logic expression
<br>Logic circuit
<br><br>The integration of large numbers of tiny transistors into a small chip<br>
<br>Two Types of Circuits

<br>Combinational logic circuits 组合逻辑电路
<br>Sequential logic circuits 时序逻辑电路


<br><br>
<br>Circuit with no memory 无内存
<br>Multiple inputs, multiple outputs, one Boolean function for each output
<br>Abstracted as a package or a black box 可抽象成黑箱
<br>Implementation described by one of

<br>n-input-, m-output-column truth table
<br>boolean function for each output variable
<br>logic diagram (possibly using other packages)


<br><br>Only add two single bits together (a, b), s is the sum and c is the carry bit<br>
仅实现两个单bit二进制加法<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Half-Adder.png" referrerpolicy="no-referrer"><br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Half-Adder-Circuit.png" referrerpolicy="no-referrer"><br>Half Adder:<br>
半加器用于对两个单比特（二进制位）进行加法运算，产生两个输出结果：和（Sum）和进位（Carry）。<br>
- 输入：两个待相加的二进制位 <br>
- 输出：<br>
- 和（Sum）: 即A和B的异或结果，表示当前位相加的结果。<br>
- 进位（Carry）：，即A和B的与运算结果，表示当前位相加是否产生进位。<br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Full-Adder-Circuit.png" referrerpolicy="no-referrer"><br>Full Adder:<br>
全加器用于对三个单比特（二进制位）进行加法运算，包括两个输入位（A和B）和上一位的进位（Cin），产生两个输出结果：和（Sum）和新的进位（Carry）。<br>
- 输入：三个待相加的二进制位（A、B和Cin）。<br>
- 输出：<br>
- 和（Sum）：(A ⊕ B) ⊕ Cin，即当前位相加的结果，考虑了上一位的进位。<br>
- 进位（Carry）：(A ∧ B) ∨ ((A ⊕ B) ∧ Cin)，表示下一位相加是否产生进位，综合考虑了当前位和上一位的进位。<br>
<br>半加器处理两个输入位的加法运算，产生Sum和Carry
<br>全加器处理三个输入位的加法运算，产生 和（Sum）和新的进位（Carry），能够考虑前一位的进位情况
<br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/4-bit-adder.png" referrerpolicy="no-referrer"><br>feeding the Carry Out of one circuit into the Carry In of the circuit immediately to its left<br>"Ripple-Carry Adder"（连锁进位加法器）之所以被称为这个名称，是因为它的进位传递机制类似于水波纹在水面扩散的方式。它是一种最基本的加法器设计，用于将两个二进制数字相加。<br>在Ripple-Carry Adder中，当两个二进制数字的每一位相加后产生进位时，这个进位会向下一位的相加操作传递。这个传递的过程就像水波纹在水面扩散一样，从一位传递到下一位，依次传递到最高位。这一连串的进位传递是串行进行的，因此它的名字中包含了"Ripple"这个词。<br><br>A decoder uses the inputs and their respective values to select one specific output line.<br>
<br> inputs to a maximum of  outputs
<br>个输入最多可以有个输出
<br>All memory addresses in a computer are specified as binary numbers.<br>
When a memory address is referenced (whether for reading or forwriting), the computer first has to determine the actual address.<br>
Decoder（译为解码器）是数字电路中的一个常见组件，它用于将输入的编码信号转换成特定的输出信号，根据输入信号的不同编码，Decoder产生不同的输出信号。Decoder有多种用途，包括：<br>
<br>
控制逻辑：Decoder用于生成控制信号，这些信号用于控制其他数字电路的操作。例如，它可以用于选择特定的操作模式，启用或禁用特定功能等。

<br>
地址解码：在微处理器和微控制器中，Decoder用于解码指令地址，以确定下一步执行的指令或操作。

<br>Decoder是数字电路中的一种重要元件，用于将输入信号从一种编码形式转换为另一种有意义的输出信号，从而实现数据选择、控制、解码和路由等功能。<br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/A2-4Decoder.png" referrerpolicy="no-referrer"><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/noYq2M.jpg" referrerpolicy="no-referrer"><br>2-4 Decoder（也称为2输入4输出解码器）是一种特定类型的解码器，它具有两个输入线和四个输出线。它的主要功能是将两个输入线的组合编码映射到四个输出线，其中每个输入组合对应一个输出线。<br>一般情况下，2-4 Decoder的真值表如下：<br><br><br>
<br>A multiplexer behaves like a channel selector
<br>It selects a single output from several inputs.
<br>The particular input chosen for output is determined by the value of the multiplexer's control lines.
<br>To be able to select among n inputs, log2 n control lines are needed
<br>多个输入一个输出  由控制线路选择选择输出线路
<br><br>4-to-1 Multiplexer（四选一多路器）是数字电路中的一个常见组件，用于从多个输入信号中选择一个输出信号。它有四个数据输入（通常称为I0、I1、I2和I3），两个控制输入（通常称为S0和S1），一个电源开关（E），一个输出（通常称为Y）。<br>4-to-1 Multiplexer的运行原理如下：<br>
<br>
控制输入：S1和S0是控制输入，它们确定要从哪一个数据输入传递到输出。这两个控制线有四种可能的组合：00、01、10和11，分别对应着选择I0、I1、I2和I3作为输出。

<br>
数据输入：有四个数据输入（I0、I1、I2和I3），每个数据输入上都可以连接一个不同的输入信号。

<br>
输出：根据S1和S0的状态，Multiplexer会选择一个数据输入作为输出。例如，如果S1=0且S0=1，那么Multiplexer会将D1的值传递到输出Y。

<br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Multiplexer.png" referrerpolicy="no-referrer">
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/4-1Multiplexer.png" referrerpolicy="no-referrer"><br><br>decoder在最开始选择走哪条路<br>
multiplexer在中间选择线路通过<br><br><br>
<br>实现4个功能 AND OR NOT ADD
<br>如图F0,F1进入decoder 选择将要实现的功能
<br>右下角实现 ADD<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/1-bitALU.png" referrerpolicy="no-referrer">
<br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/2-bit-ALU.png" referrerpolicy="no-referrer"><br><br>
<br>From the design specification, obtain the truth table
<br>From the truth table, derive the Sum of Products Boolean Expression.
<br>Use Karnaugh Map to minimize the Boolean expression.
<br>Use logic gates to implement the simplified Boolean Expression.
<br>Verify the result.
<br><br>
<br>Three outputs:

<br>G (“Greater”) should be 1 only when A &gt; B
<br>E (“Equal”) should be 1 only when A = B
<br>L (“Lesser”) should be 1 only when A &lt; B


<br><br><img alt="NaX6TI" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/NaX6TI.jpg" referrerpolicy="no-referrer"><br><br>
<br>G: 
<br>E: 
<br>L: 
<br><img alt="vH5EJb" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/vH5EJb.jpg" referrerpolicy="no-referrer">]]></description><link>https://blog.allenygy.vip/computer-organization/lecture/from-gates-to-circuits-i-combinational-circuits.html</link><guid isPermaLink="false">Computer-Organization/Lecture/From-Gates-to-Circuits-I-Combinational-Circuits.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:24:46 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Basic-Building-Blocks.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO/Basic-Building-Blocks.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Circuit-Design" href="computer-organization/lecture/circuit-design.html" class="internal-link" target="_self" rel="noopener">Circuit-Design</a>]]></title><description><![CDATA[ 
 <br><br><br>
<br>Find Input and Output
<br>Truth Table
<br>K-Map Simplify
<br>Circuit  
<br><br><br>
<br>Write Equations

<br>Clock equation 时钟方程
<br>Output equation 输出方程
<br>Drive equation 驱动方程
<br>State equation 状态方程


<br>List State

<br>状态表
<br>状态图
<br>时序图


<br>Function

<br>功能
<br>是否自启动 存在无效状态则不能自启动


<br><br>Investigate the operation of the following circuit. Assume the initial state is 0000. Trace the outputs (the Qs) as the clock ticks and determine the purpose of the circuit. You must show your trace to complete your answer.<br><img alt="JRr3J4" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/JRr3J4.png" referrerpolicy="no-referrer"><br>
<br>Equation

<br>Clock equation

<br>


<br>Ouput equation

<br>None


<br>Dirve equation

<br>
<br>
<br>
<br>


<br>State equation

<br>Feature equation: 
<br>
<br>
<br>
<br>




<br>State
<br><br>Valid status<br>
<br>
Invalid status<br>
<br><br>
<br>State Diagram
<br>State Equation
<br>Output Equation
<br>Flip-Flop
<br>Circuit
<br><br>Design a finite state machine (FSM) for a counter that counts through the 3-bit prime numbers downwards and loop: . Assume the counter starts with initial prime set to 111 as its first 3 bit prime number. (12 points)<br>
<br>You need to provide the state transition diagram. Assume that the state is stored in three D Flip Flops. Hint: The set of all 3-bit prime numbers includes 2, 3, 5 and 7. (4 points)
<br>
<br>State Diagram
<br><img alt="StateDiagram-2" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/StateDiagram-2.png" referrerpolicy="no-referrer"><br>
<br>Design the sequential circuit for the counter. The circuit is driven by the clock. The output is a 7 segment LED display. The various digits from 0 through 9 can be displayed using a 7-segment display as shown in the following figure.
<br><br><br>
<br>
<br>
<br>
<br>
<br>
<br><img alt="zGv0xW" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/zGv0xW.jpg" referrerpolicy="no-referrer">]]></description><link>https://blog.allenygy.vip/computer-organization/lecture/circuit-design.html</link><guid isPermaLink="false">Computer-Organization/Lecture/Circuit-Design.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:24:13 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/JRr3J4.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/JRr3J4.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Bits-Data-Representation-and-Manipulation" href="computer-organization/lecture/bits-data-representation-and-manipulation.html" class="internal-link" target="_self" rel="noopener">Bits-Data-Representation-and-Manipulation</a>]]></title><description><![CDATA[ 
 <br><br><br>
<br>1 BIT = Binary digITs; 1 bit: 0 or 1
<br>1 Byte = 8 bits
<br>A word is a fixed-sized piece of data handled as a unit
<br><br>
<br>Numeric Data Representation

<br>Unsigned integers
<br>Signed integers

<br>Sign-magnitude
<br>1’s complement
<br>2’s complement


<br>Real number representation
<br>Floating-point numbers


<br>Non-numeric Data Representation
<br> bits represent  things.<br><br><br><img alt="Binary-Decimal" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Binary-Decimal.png" referrerpolicy="no-referrer"><br><br>
<br>The left most bit (the most significant bit) is used as the sign bit. 最左位数表示正负

<br> represents +
<br> represents -


<br><br>
<br>the remaining bits indicate the magnitude 剩余数字表示数字
<br>Problem: there will be 2 zero: 0000/1000
<br><br>
<br>the complement of its positive counterpart 除了第一位数剩余数字作反码操作
<br><br>
<br>one greater than the 1’s complement of the positive value
<br><br>
<br>For positive number： Signed-magnitude, 1's complement, 2's complement forms are the same.正数原码反码补码一样
<br>After two backcode complements, the original number can be obtained 经过两次反码，补码操作可得到原数
<br>For binary odd number, the most right bit must be one.
<br>For Hexadecimal number each bit represents 4bits binary number
<br><br>
<br>Scientific notation: 
<br><br>Represented by 16 bits<br>
<br>16 bits: 1 for sign; 5 for exponent; 10 for Mantissa
<br>Exponent bias (offset): 24 -1 =15; range: [-14, 15]

<br>01111 represents 0 in exponent


<br><img alt="Half-Precision" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-HalfPrecisionFloating.png" referrerpolicy="no-referrer"><br>
<img alt="Half-Precision" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Half-Precision-Floating-example.png" referrerpolicy="no-referrer"><br><br>
<br>32 bits: 1 for sign; 8 for exponent; 23 for Mantissa<br>
<img alt="Single-point-floating-number" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Single-point-floating-number.png" referrerpolicy="no-referrer">
<br><br>
<br>Textual information
<br>Audio information
<br>Colors &amp; Images
<br>Video information
<br><br>
<br>
The American Standard Code for Information Interchange

<br>
7 bits to represent 128 characters

<br>0~31: control characters
<br>32~127: symbols, digits and letters


<br>
48 represents '0'

<br>
65 represents 'A'

<br>
97 represents 'a'<br>
<img alt="ASCII-code" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ASCII-Code.png" referrerpolicy="no-referrer">

<br><br>
<br>16 bits
<br>Support unlimited characters
<br>To permit backward compatibility, ASCII is a subset of Unicode.
<br><br>
<br>A microphone converts sound to an analog electrical signal
<br>An analog-to-digital converter (ADC) converts the analog signal to a digital signal through sampling
<br>CD audio, for example, has a sampling rate of 44.1 kHz (44,100 samples per second)
<br>An digital-to-analog converter performs the reverse process, from a digital to an analog signal
<br>An analog signal can be amplified and send to a speaker to produce sound
<br><br>
<br>A video consists of a stream of frames, or images, displayed at n&gt;16 frames per second
<br>An Image consist of a collection of pixels
<br>Pixels are tiny dots of color
<br>A pixel’s color is represented by a binary number, its RGB value
<br>Thus a video can be seen as a huge binary number
<br><br>
<br>Binary Arithmetic Operations

<br>Addition and subtraction
<br>Sign Extension
<br>Overflow


<br>Boolean Logic Operations

<br>AND
<br>OR
<br>NOT
<br>XOR


]]></description><link>https://blog.allenygy.vip/computer-organization/lecture/bits-data-representation-and-manipulation.html</link><guid isPermaLink="false">Computer-Organization/Lecture/Bits-Data-Representation-and-Manipulation.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:23:48 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Binary-Decimal.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Binary-Decimal.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Computer-Organization" href="computer-organization/computer-organization.html" class="internal-link" target="_self" rel="noopener">Computer-Organization</a>]]></title><description><![CDATA[ 
 <br><br><br><br><br><br><br><br><br><br><br><br>]]></description><link>https://blog.allenygy.vip/computer-organization/computer-organization.html</link><guid isPermaLink="false">Computer-Organization/Computer-Organization.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:25:49 GMT</pubDate></item><item><title><![CDATA[<a data-href="Train-2" href="contest/lanqiao/train-2.html" class="internal-link" target="_self" rel="noopener">Train-2</a><a data-tooltip-position="top" aria-label="https://blog.csdn.net/weixin_43914593/article/details/135329367" rel="noopener" class="external-link" href="https://blog.csdn.net/weixin_43914593/article/details/135329367" target="_blank"></a>]]></title><description><![CDATA[ 
 <br><br>ans;                              //答案，常常用全局变量表示
void dfs(层数，其他参数){
    if (到达目的地、或者出局){    //到达最底层，或者满足条件退出 
        更新答案ans;              //答案一般用全局变量表示，ans是最优解
        return;                   //递归返回，即返回到上一层
    }
    (剪枝)                        //在进一步DFS之前剪枝
    for (用i遍历下一层所有可能的情况)    //对每一个情况继续DFS 
        if (used[i] == 0) {        //如果状态i没有处理过，就可以进入下一层dfs
            used[i] = 1;           //标记状态i为已经使用，在后续dfs时不能再使用
            dfs(层数+1，其他参数);      //下一层，即搜小规模后继续dfs
            used[i] = 0;           //恢复状态i，回溯时，不影响上一层对这个状态的使用
        }
    return;                        //返回到上一层
}

Copy<br><br>#include&lt;bits/stdc++.h&gt;
using namespace std;x
int n;
int vis[10];    // 访问标记
int a[10];      //需要做全排列的数组
int b[10];      //当前DFS得到的全排列
void dfs(int step) {
    if (step == n+1) {     //已经对n个数做了全排列，输出全排列
        for (int i=1; i&lt;=n; i++)
            printf("%5d",b[i]);
        printf("\n");
        return;            //结束，不再继续DFS
    }
    for (int i = 1; i &lt;= n; i++) {    //遍历每个a[i]，放进全排列中
        if (vis[i] == 0) {   // 数字a[i]不在前面得到的排列中
            b[step] = a[i];  // 把a[i]放进排列
            vis[i] = 1;      // 保存现场：a[i]不能在后面继续用
            dfs(step+1);     // 继续把后面的数放进排列
            vis[i] = 0;      // 恢复现场：a[i]重新可以使用
        }
    }
    return;
}
int main() {
    cin &gt;&gt; n;
    for (int i=1; i&lt;=n; i++)  a[i]=i;   //赋值得到n个数
    dfs(1);  //对a[1]~a[n]做全排列
    return 0;
}
Copy<br><br>#include&lt;bits/stdc++.h&gt;
using namespace std;
int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};  //四个方向
char g[100][100];
int n = 30, m = 60;
int dfs(int x, int y){      //当前位于坐标[x,y]
    if (g[x][y] == '0')   return 0;
    g[x][y] = '0';         //把这个点从1改为0，后面不再搜它
    int ans = 1;           //统计这个连通块的大小
    for (int i = 0; i &lt; 4; i++ ) {           //遍历它的4个邻接
        int nx = x + dx[i], ny = y + dy[i];   //一个邻居的坐标
        if (nx&lt;0 || ny&lt;0 || nx&gt;=n || ny&gt;=m)   continue;    //这个邻居是否在边界内
        ans += dfs(nx, ny);
    }
    return ans;
}
int main(){
    for (int i = 0; i &lt; n; i++ )  cin &gt;&gt; g[i];
    int ans = 0;
    for (int i = 0; i &lt; n; i++ )
        for (int j = 0; j &lt; m; j++ )
            if (g[i][j] == '1')
                ans = max(ans, dfs(i, j));
    cout &lt;&lt; ans;
    return 0;
}

Copy<br><br>#include&lt;bits/stdc++.h&gt;
using namespace std;
const int N = 1010;
char mp[N][N];                //地图
int vis[N][N]={0};            //标记是否搜过
int d[4][2] = {{0,1}, {0,-1}, {1,0}, {-1,0}}; //四个方向
int flag;                     //用于标记这个岛中是否被完全淹没
void dfs(int x, int y){
    vis[x][y] = 1;            //标记这个'#'被搜过。注意为什么放在这里
    if( mp[x][y+1]=='#' &amp;&amp; mp[x][y-1]=='#' &amp;&amp;
        mp[x+1][y]=='#' &amp;&amp; mp[x-1][y]=='#'   )
        flag = 1;             //上下左右都是陆地，这是一个高地，不会淹没
    for(int i = 0; i &lt; 4; i++){     //继续DFS周围的陆地
        int nx = x + d[i][0], ny = y + d[i][1];
        if(vis[nx][ny]==0 &amp;&amp; mp[nx][ny]=='#')    //注意为什么要判断vis[][]                
            dfs(nx,ny);             //继续DFS未搜过的陆地，目的是标记它们
    }
}
int main(){
    int n;   cin &gt;&gt; n;
    for (int i = 0; i &lt; n; i++)   cin &gt;&gt; mp[i];
    int ans = 0 ;
    for(int i = 0; i &lt; n; i++)    //DFS所有像素点
        for(int j = 0; j &lt; n; j++)
            if(mp[i][j]=='#' &amp;&amp; vis[i][j]==0){
                flag = 0;         //假设这个岛被淹
                dfs(i,j);         //找这个岛中有没有高地，如果有,置flag=1
                if(flag == 0) ans++;   //这个岛确实被淹了，统计被淹没岛的数量    
            }
    cout&lt;&lt;ans&lt;&lt;endl;
    return 0;
}

Copy]]></description><link>https://blog.allenygy.vip/contest/lanqiao/train-2.html</link><guid isPermaLink="false">Contest/Lanqiao/Train-2.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:26:36 GMT</pubDate></item><item><title><![CDATA[<a data-href="Train-1" href="contest/lanqiao/train-1.html" class="internal-link" target="_self" rel="noopener">Train-1</a>]]></title><description><![CDATA[<a class="tag" href="https://blog.allenygy.vip/?query=tag:Experience" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Experience</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:Experience" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Experience</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:Experience" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Experience</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:Experience" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Experience</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:Hint" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Hint</a> 
 <br><br><a data-tooltip-position="top" aria-label="https://www.lanqiao.cn/problems/592/learning/" rel="noopener" class="external-link" href="https://www.lanqiao.cn/problems/592/learning/" target="_blank">门牌号</a><br>#include &lt;iostream&gt;
using namespace std;
int main(){
 int count=0;
 for (int i = 0; i &lt; 2021;i++){
  int num = i;
  while(num){
   if(num % 10 == 2) count++;
   num /= 10;
  }
 }
 cout&lt;&lt;count;
 return 0;
}
Copy<br><a href="https://blog.allenygy.vip?query=tag:Experience" class="tag" target="_blank" rel="noopener">#Experience</a>:<br>
循环取模:<br>int mode=0;
while(num){
 mode = num % 10;
 num /= 10;
}
Copy<br><a data-tooltip-position="top" aria-label="https://www.lanqiao.cn/problems/1443/learning/" rel="noopener" class="external-link" href="https://www.lanqiao.cn/problems/1443/learning/" target="_blank">卡片</a><br>#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
int main(){
 vector&lt;int&gt; nums(10, 2021);
 for (int i = 1;; i++){
  int num = i;
  while (num){
   nums[num % 10] -= 1;
   if (nums[num % 10] &lt; 0){ 
    cout &lt;&lt; i-1;
    return 0;
   }
   num /= 10;
  }
 }
 return 0;
}
Copy<br><a href="https://blog.allenygy.vip?query=tag:Experience" class="tag" target="_blank" rel="noopener">#Experience</a><br>
注意边界：当碰到是用不了卡片的情况时，只能拼出上一张卡片<br>
看到题解：新发现！把1消掉就结束了，感觉还是有点问题<br>
<a data-tooltip-position="top" aria-label="https://www.lanqiao.cn/problems/610/learning/" rel="noopener" class="external-link" href="https://www.lanqiao.cn/problems/610/learning/" target="_blank">分数</a><br>#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;
int main(){
 int a = pow(2,19);
 int b = 2*a-1;
 cout&lt;&lt;b&lt;&lt;"/"&lt;&lt;a; 
 return 0;
}
Copy<br><a href="https://blog.allenygy.vip?query=tag:Experience" class="tag" target="_blank" rel="noopener">#Experience</a><br>
math库 pow(base, power)<br>
以及分数用a/b表示<br>
<a data-tooltip-position="top" aria-label="https://www.lanqiao.cn/problems/611/learning/" rel="noopener" class="external-link" href="https://www.lanqiao.cn/problems/611/learning/" target="_blank">日期问题</a><br>
<a href="https://blog.allenygy.vip?query=tag:Experience" class="tag" target="_blank" rel="noopener">#Experience</a><br>
闰年判断：<br>if((x%4==0&amp;&amp;x%100!=0)||x%400==0) return 1;
else return 0;
Copy<br><a data-tooltip-position="top" aria-label="https://www.lanqiao.cn/problems/2096/learning/" rel="noopener" class="external-link" href="https://www.lanqiao.cn/problems/2096/learning/" target="_blank">顺子日期</a><br>
<a data-tooltip-position="top" aria-label="https://www.lanqiao.cn/problems/2107/learning/" rel="noopener" class="external-link" href="https://www.lanqiao.cn/problems/2107/learning/" target="_blank">修剪灌木</a><br><br>假设点i刚被修剪完为0，然后会向右/向左跑一趟，端点会被遍历1次，i与端点间的点会被遍历两次 而重新修剪i的当天早上（因为是傍晚修剪，所以当天也会被算上）达到最大高度，然后置零 也就是说：<br>
最大长度=中间节点数*2+1（端点）+1（自生）==max(左边/右边节点数)*2<br>
左边端点数：i-1<br>
右边端点数：n-i<br>#include &lt;iostream&gt;
using namespace std;  
int main() {
 int n; cin&gt;&gt;n; 
    for(int i = 1;i&lt;=n;i++) cout&lt;&lt;max(i-1,n-i)*2&lt;&lt;endl; 
    return 0; 
}
Copy<br><a data-tooltip-position="top" aria-label="https://www.lanqiao.cn/problems/1461/learning/" rel="noopener" class="external-link" href="https://www.lanqiao.cn/problems/1461/learning/" target="_blank">最少砝码</a><br>
<a href="https://blog.allenygy.vip?query=tag:Hint" class="tag" target="_blank" rel="noopener">#Hint</a><br>
一个砝码最多称到1<br>
两个砝码最多称到4<br>
三个砝码最多称到13<br>
推出公式为：新一级的砝码最大称重=上一级砝码上限 × 3 + 1<br>#include &lt;iostream&gt;
using namespace std;
int main(){
 int N=0;
 cin&gt;&gt;N;
 int sum=0;
 for(int i=1;i&gt;0;i++){
  sum=sum*3+1;
  if(N&lt;=sum){
   cout&lt;&lt;i;
   break;
  }
 }
 return 0;
}
Copy]]></description><link>https://blog.allenygy.vip/contest/lanqiao/train-1.html</link><guid isPermaLink="false">Contest/Lanqiao/Train-1.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:26:26 GMT</pubDate></item><item><title><![CDATA[<a data-href="Weekly-Contest-402" href="contest/leetcode/weekly-contest-402.html" class="internal-link" target="_self" rel="noopener">Weekly-Contest-402</a><a data-tooltip-position="top" aria-label="https://leetcode.cn/contest/weekly-contest-402/" rel="noopener" class="external-link" href="https://leetcode.cn/contest/weekly-contest-402/" target="_blank"></a>]]></title><description><![CDATA[<a class="tag" href="https://blog.allenygy.vip/?query=tag:T1" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T1</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T2" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T2</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T3" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T3</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T4" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T4</a> 
 <br><br><br>给你一个整数数组&nbsp;hours，表示以&nbsp;小时&nbsp;为单位的时间，返回一个整数，表示满足&nbsp;i &lt; j&nbsp;且&nbsp;hours[i] + hours[j]&nbsp;构成&nbsp;整天&nbsp;的下标对&nbsp;i,&nbsp;j&nbsp;的数目。<br>
整天&nbsp;定义为时间持续时间是 24 小时的&nbsp;整数倍&nbsp;。<br>
例如，1 天是 24 小时，2 天是 48 小时，3 天是 72 小时，以此类推。<br>暴力没什么好说的<br>class Solution {
public:
    int countCompleteDayPairs(vector&lt;int&gt;&amp; hours) {
        vector&lt;int&gt; remainderCount(24, 0);
        int count = 0;
        for (int hour : hours) {
            int remainder = hour % 24;
            int complement = (24 - remainder) % 24;
            count += remainderCount[complement];
            remainderCount[remainder]++;
        }
        return count;
    }
};
Copy<br><br>给你一个整数数组&nbsp;hours，表示以&nbsp;小时&nbsp;为单位的时间，返回一个整数，表示满足&nbsp;i &lt; j&nbsp;且&nbsp;hours[i] + hours[j]&nbsp;构成&nbsp;整天&nbsp;的下标对&nbsp;i,&nbsp;j&nbsp;的数目。<br>
整天&nbsp;定义为时间持续时间是 24 小时的&nbsp;整数倍&nbsp;。<br>
例如，1 天是 24 小时，2 天是 48 小时，3 天是 72 小时，以此类推。<br>模运算技巧+哈希优化<br>$<br><br><br>class Solution {
public:
    long long countCompleteDayPairs(vector&lt;int&gt;&amp; hours) {
        vector&lt;int&gt; remainderCount(24, 0);
        long long count = 0;
        for (int hour : hours) {
            int remainder = hour % 24;
            int complement = (24 - remainder) % 24;
            count += remainderCount[complement];
            remainderCount[remainder]++;
        }
        return count;
    }
};
Copy<br><br>统计每个元素的出现次数，记到哈希表 cnt 中。将哈希表的 key 整理到数组 a 中，把 a 按照从小到大的顺序排序。<br>定义 dfs(i) 表示从 a[0] 到 a[i] 中选择，可以得到的伤害值之和的最大值。<br>考虑 a[i] 选或不选：<br>
<br>不选：问题变成从 a[0] 到 a[i-1] 中选择，可以得到的伤害值之和的最大值，即 。
<br>选：那么伤害值等于 a[i]-2 和 a[i]-1 的数不能选，问题变成从 a[0] 到 a[j-1] 中选择，可以得到的伤害值之和的最大值，其中 j 是最小的满足  的数。那么 。<br>
两种情况取最大值，得
<br><br>递归边界：dfs(−1)=0。没有数可以选，伤害值之和为0。<br>递归入口：dfs(n−1)，即答案。注意这里 n 是 a 的长度，即 power 中的不同元素个数。<br>代码实现时，j 的计算可以用二分查找，也可以暴力用循环查找。<br>class Solution {
public:
    long long maximumTotalDamage(vector&lt;int&gt;&amp; power) {
        unordered_map&lt;int,int&gt;cnt;
        for(int x:power){
            cnt[x]++;
        }
        vector&lt;pair&lt;int,int&gt;&gt;a(cnt.begin(),cnt.end());
        ranges::sort(a);
        int n = a.size();
        vector&lt;long long&gt;f(n+1);
        for(int i = 0, j=0; i &lt; n; i++){
            auto&amp; [x,c]=a[i];
            while(a[j].first &lt; x - 2){
                j++;
            }
            f[i+1]=max(f[i],f[j]+(long long)x*c);
        }
        return f[n];
        
    }
};
Copy<br>]]></description><link>https://blog.allenygy.vip/contest/leetcode/weekly-contest-402.html</link><guid isPermaLink="false">Contest/Leetcode/Weekly-Contest-402.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:25:08 GMT</pubDate></item><item><title><![CDATA[<a data-href="Weekly-Contest-381" href="contest/leetcode/weekly-contest-381.html" class="internal-link" target="_self" rel="noopener">Weekly-Contest-381</a>(<a rel="noopener" class="external-link" href="https://leetcode.cn/contest/weekly-contest-381/" target="_blank">https://leetcode.cn/contest/weekly-contest-381/</a>)]]></title><description><![CDATA[<a class="tag" href="https://blog.allenygy.vip/?query=tag:T1" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T1</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T2" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T2</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T3" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T3</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T4" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T4</a> 
 <br><br><br>class Solution { 
public: 
	int minimumPushes(string word) {
		unordered_map&lt;char,int&gt;map; 
		for(int i=0;i&lt;word.size();i++){ 
			map[word[i]]++; 
		} 
		if(map.size()&lt;=8){ 
			return word.size(); 
		} 
		vector&lt;int&gt; v(map.size(),0);
		int i=0; 
		for (const auto&amp; pair : map) { 
			v[i++]= pair.second; 
		} 
		sort(v.begin(), v.end(), greater&lt;int&gt;()); 
		for(int i=0;i&lt;v.size();i++){ 
			cout&lt;&lt;" "&lt;&lt;v[i]; 
		} 
		int count=1; int bit=1; int res=0;
		for(int i=0;i&lt;v.size();i++){ 
			if(count&lt;=8){ 
				res+=v[i]*bit; count++; 
			} else{ count=1; i--; bit+=1; 
			} 
		} 
		return res; 
	} 
};
Copy<br><br>class Solution { 
public: 
	vector&lt;int&gt; countOfPairs(int n, int x, int y) { 
		vector&lt;int&gt; result(n, 0); 
		for (int house1 = 1; house1 &lt;= n-1; house1++) { 
			for (int house2 = house1+1; house2 &lt;= n; house2++) { 
				int distance = min(abs(house2 - house1), 
								min(abs(house1-x)+1+abs(house2-y), 
								abs(house1-y)+1+abs(house2-x)));
				 result[distance - 1]++; 
			} 
		} 
		for(int i=0;i&lt;n;i++) result[i]*=2; 
			return result; 
	} 
};
Copy<br><br>class Solution { 
public: 
	int minimumPushes(string word) { 
		unordered_map&lt;char,int&gt;map; 
		for(int i=0;i&lt;word.size();i++){ 
			map[word[i]]++; 
		} 
		if(map.size()&lt;=8){ 
			return word.size(); 
		} 
		vector&lt;int&gt; v(map.size(),0); 
		int i=0; 
		for (const auto&amp; pair : map) { 
			v[i++]= pair.second; 
		} sort(v.begin(), v.end(), greater&lt;int&gt;()); 
		for(int i=0;i&lt;v.size();i++){ 
			cout&lt;&lt;" "&lt;&lt;v[i]; 
		} 
		int count=1; int bit=1; int res=0; 
		for(int i=0;i&lt;v.size();i++){ 
			if(count&lt;=8){ 
				res+=v[i]*bit; count++; 
			} else{ 
				count=1; i--; bit+=1; 
			} 
		} 
		return res; 
	} 
};
Copy<br>]]></description><link>https://blog.allenygy.vip/contest/leetcode/weekly-contest-381.html</link><guid isPermaLink="false">Contest/Leetcode/Weekly-Contest-381.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:25:02 GMT</pubDate></item><item><title><![CDATA[<a data-href="Biweekly-Contest-123" href="contest/leetcode/biweekly-contest-123.html" class="internal-link" target="_self" rel="noopener">Biweekly-Contest-123</a>(<a rel="noopener" class="external-link" href="https://leetcode.cn/contest/biweekly-contest-123/" target="_blank">https://leetcode.cn/contest/biweekly-contest-123/</a>)]]></title><description><![CDATA[<a class="tag" href="https://blog.allenygy.vip/?query=tag:T1" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T1</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:灵神题解" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#灵神题解</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T2" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T2</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:灵神题解" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#灵神题解</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T3" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T3</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:灵神题解" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#灵神题解</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T4" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T4</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:灵神题解" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#灵神题解</a> 
 <br><br><br>
<br>排序
<br>判断三角形是否存在
<br>判断是什么三角形
<br><a href="https://blog.allenygy.vip?query=tag:灵神题解" class="tag" target="_blank" rel="noopener">#灵神题解</a><a data-tooltip-position="top" aria-label="https://leetcode.cn/problems/type-of-triangle-ii/solution/an-ti-yi-mo-ni-pythonjavacgo-by-endlessc-zq6e/" rel="noopener" class="external-link" href="https://leetcode.cn/problems/type-of-triangle-ii/solution/an-ti-yi-mo-ni-pythonjavacgo-by-endlessc-zq6e/" target="_blank">T1</a><br><br>
<br>同T4<br>
<a href="https://blog.allenygy.vip?query=tag:灵神题解" class="tag" target="_blank" rel="noopener">#灵神题解</a><a data-tooltip-position="top" aria-label="https://leetcode.cn/problems/find-the-number-of-ways-to-place-people-ii/solution/on2-you-ya-mei-ju-by-endlesscheng-z86d/" rel="noopener" class="external-link" href="https://leetcode.cn/problems/find-the-number-of-ways-to-place-people-ii/solution/on2-you-ya-mei-ju-by-endlesscheng-z86d/" target="_blank">T2</a>
<br><br>前缀和<br>s[0]=0
s[1]=nums[0]
s[2]=nums[0]+nums[1]
...
s[i]=nums[0]+...+nums[i-1]
s[i+1]=nums[0]+...+nums[i]
nums[i]+...+nums[j]
=nums[0]+...+nums[j]-(nums[0]+...+nums[i-1])
=s[j+1]-s[i]
Copy<br><br>
计算的最大值<br>
枚举 ，问题变成计算的最小值<br>
 或者 <br>
哈希表<br>class Solution {
public:
	long long maximumSubarraySum(vector&lt;int&gt;&amp; nums, int k) {
		unordered_map&lt;int,long long &gt; min_s;
		long long ans=LLONG_MIN;
		long long s=0;
		for(int x:nums){
			auto it =min_s.find(x+k);
			if(it != min_s.end()){
				ans=max(ans,s+x-it-&gt;second);
			}
			it =min_s.find(x-k);
			if(it !=min_s.end()){
				ans=max(ans,s+x-it-&gt;second);
			}
			it =min_s.find(x);
			if(it==min_s.end()||s&lt;it-&gt;second){
				min_s[x]=s;
			}
			s+=x;
		}
		return ans==LLONG_MIN?0:ans;
}

};
Copy<br><a href="https://blog.allenygy.vip?query=tag:灵神题解" class="tag" target="_blank" rel="noopener">#灵神题解</a><a data-tooltip-position="top" aria-label="https://leetcode.cn/problems/find-the-number-of-ways-to-place-people-i/solution/on2-you-ya-mei-ju-pythonjavacgo-by-endle-ii0q/" rel="noopener" class="external-link" href="https://leetcode.cn/problems/find-the-number-of-ways-to-place-people-i/solution/on2-you-ya-mei-ju-pythonjavacgo-by-endle-ii0q/" target="_blank">T3</a><br>class Solution: 
	def maximumSubarraySum(self, nums: List[int], k: int) -&gt; int: 			ans = -inf 
		min_s = defaultdict(lambda: inf) 
		s = 0 
		for x in nums: 
			min_s[x] = min(min_s[x], s)
			s += x 
			ans = max(ans, s-min(min_s[x - k], min_s[x + k]))
		return ans if ans &gt; -inf else 0 
Copy<br><br>class Solution {
public:
	int numberOfPairs(vector&lt;vector&lt;int&gt;&gt; &amp;points) {
		ranges::sort(points, [](const auto &amp;p, const auto &amp;q) {
			return p[0] != q[0] ? p[0] &lt; q[0] : p[1] &gt; q[1];	
		});
		int ans = 0, n = points.size();
		for (int i = 0; i &lt; n; i++) {
			int y0 = points[i][1];
			int max_y = INT_MIN;
			for (int j = i + 1; j &lt; n; j++) {
				int y = points[j][1];
				if (y &lt;= y0 &amp;&amp; y &gt; max_y) {
					max_y = y;
					ans++;
				}
			}
		}
		return ans;
	}
};
Copy<br><a href="https://blog.allenygy.vip?query=tag:灵神题解" class="tag" target="_blank" rel="noopener">#灵神题解</a><a data-tooltip-position="top" aria-label="https://leetcode.cn/problems/find-the-number-of-ways-to-place-people-ii/solution/on2-you-ya-mei-ju-by-endlesscheng-z86d/" rel="noopener" class="external-link" href="https://leetcode.cn/problems/find-the-number-of-ways-to-place-people-ii/solution/on2-you-ya-mei-ju-by-endlesscheng-z86d/" target="_blank">T4</a>]]></description><link>https://blog.allenygy.vip/contest/leetcode/biweekly-contest-123.html</link><guid isPermaLink="false">Contest/Leetcode/Biweekly-Contest-123.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:24:52 GMT</pubDate></item><item><title><![CDATA[<a data-tooltip-position="top" aria-label="https://leetcode.cn/contest/biweekly-contest-122" rel="noopener" class="external-link" href="https://leetcode.cn/contest/biweekly-contest-122" target="_blank">Biweekly-contest-122</a>]]></title><description><![CDATA[<a class="tag" href="https://blog.allenygy.vip/?query=tag:T1" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T1</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:woc，我是傻逼" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#woc，我是傻逼</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:灵神题解" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#灵神题解</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T2" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T2</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:分组循环" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#分组循环</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:灵神题解" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#灵神题解</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T3" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T3</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:还没开始" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#还没开始</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:灵神题解" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#灵神题解</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:T4" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#T4</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:还没开始" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#还没开始</a> <a class="tag" href="https://blog.allenygy.vip/?query=tag:灵神题解" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#灵神题解</a> 
 <br><br><br>
<br>开始的时候总想暴力，取第一个数然后两个for循环就过了
<br>后来看到HMZ，选第一个数然后直接sort取前两位

<br>说实话，我有点懵
<br>后来， <a href="https://blog.allenygy.vip?query=tag:woc，我是傻逼" class="tag" target="_blank" rel="noopener">#woc，我是傻逼</a>


<br><a href="https://blog.allenygy.vip?query=tag:灵神题解" class="tag" target="_blank" rel="noopener">#灵神题解</a><a data-tooltip-position="top" aria-label="https://leetcode.cn/problems/divide-an-array-into-subarrays-with-minimum-cost-i/solution/cong-onlogn-dao-onpythonjavacgo-by-endle-gmna" rel="noopener" class="external-link" href="https://leetcode.cn/problems/divide-an-array-into-subarrays-with-minimum-cost-i/solution/cong-onlogn-dao-onpythonjavacgo-by-endle-gmna" target="_blank">T1</a><br><br>
<br>刚开始想找规律来着，什么二进制数一的个数相同两者有无规律
<br>后来，直接模拟就好了把能排序的从小到大拍一遍，最后看整个数组能不能有序就完了
<br><a href="https://blog.allenygy.vip?query=tag:分组循环" class="tag" target="_blank" rel="noopener">#分组循环</a> 应用场景：找一段符合条件的连续的片段<br>
<br>外层循环

<br>记录每次循环开始时数组下标


<br>内层循环

<br>判断是否符合条件


<br>while i&lt;n:
	start=i
	while i&lt;n and [condition]:
		i+=1
	# 循环结束，从start到i-1是一个子数组
Copy<br><a href="https://blog.allenygy.vip?query=tag:灵神题解" class="tag" target="_blank" rel="noopener">#灵神题解</a><a data-tooltip-position="top" aria-label="https://leetcode.cn/problems/find-if-array-can-be-sorted/solution/jiao-ni-yi-ci-xing-ba-dai-ma-xie-dui-on-j3nik" rel="noopener" class="external-link" href="https://leetcode.cn/problems/find-if-array-can-be-sorted/solution/jiao-ni-yi-ci-xing-ba-dai-ma-xie-dui-on-j3nik" target="_blank">T2</a><br><br><a href="https://blog.allenygy.vip?query=tag:还没开始" class="tag" target="_blank" rel="noopener">#还没开始</a> 可能还没开始看题<br>
看完题解<br>
也就是说，拿到最小的数之后可以用这个数吧其他不是它的倍数的数消掉<br>
<br>假设最小的数只有一个，那么最后只剩它自己
<br>如果最小的数不止一个

<br>假设x不是m的倍数

<br>


<br>假设x都是m的倍数

<br>可以先消掉不是m的数
<br>剩余的数都相同两两配对




<br><a href="https://blog.allenygy.vip?query=tag:灵神题解" class="tag" target="_blank" rel="noopener">#灵神题解</a><a data-tooltip-position="top" aria-label="https://leetcode.cn/problems/minimize-length-of-array-using-operations/solution/on-nao-jin-ji-zhuan-wan-pythonjavacgo-by-2lea" rel="noopener" class="external-link" href="https://leetcode.cn/problems/minimize-length-of-array-using-operations/solution/on-nao-jin-ji-zhuan-wan-pythonjavacgo-by-2lea" target="_blank">T3</a><br><br><a href="https://blog.allenygy.vip?query=tag:还没开始" class="tag" target="_blank" rel="noopener">#还没开始</a> 可能还没开始看题<br>
<a href="https://blog.allenygy.vip?query=tag:灵神题解" class="tag" target="_blank" rel="noopener">#灵神题解</a><a data-tooltip-position="top" aria-label="https://leetcode.cn/problems/divide-an-array-into-subarrays-with-minimum-cost-ii/solution/liang-ge-you-xu-ji-he-wei-hu-qian-k-1-xi-zdzx/" rel="noopener" class="external-link" href="https://leetcode.cn/problems/divide-an-array-into-subarrays-with-minimum-cost-ii/solution/liang-ge-you-xu-ji-he-wei-hu-qian-k-1-xi-zdzx/" target="_blank">T4</a>]]></description><link>https://blog.allenygy.vip/contest/leetcode/biweekly-contest-122.html</link><guid isPermaLink="false">Contest/Leetcode/Biweekly-Contest-122.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:24:45 GMT</pubDate></item><item><title><![CDATA[<a data-href="Contest-Overview" href="contest/contest-overview.html" class="internal-link" target="_self" rel="noopener">Contest-Overview</a>]]></title><description><![CDATA[ 
 <br><br>]]></description><link>https://blog.allenygy.vip/contest/contest-overview.html</link><guid isPermaLink="false">Contest/Contest-Overview.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:35:39 GMT</pubDate></item><item><title><![CDATA[Hands on Data Analytics for Everyone]]></title><description><![CDATA[ 
 <br>
<br>此文基本包括了uic hands on data 这门课quiz和期末考的知识点， 高亮标注都是考点
<br>期末project 需要学习KNIME软件来建模  
<br><br><br>
<br>Autonomous Driving Car
<br>Industrial Production
<br>Investment in Financial Markets
<br>Scientific Research
<br>......
<br><br>
<br>Data Engineer: Database, Coding Skills (Computer Programming)
<br>Machine Learning Researcher: Math, Statistics, Machine Learning Knowledge (Math/Stat)
<br>Filed Knowledge: biology, business...
<br><br><br><br>
Data-&gt;Data Preparation-&gt;Model Training-&gt;Model Optimization-&gt;Model Testing
<br><br>
<br>Structured data can be processed by machine directly, while unstructured data cannot.
<br>For example the data on student grades collected by the Academic Registry are structured data while the content of student emails is unstructured.
<br>Structured data are stored in well designed database such as sales data of a company of the customer relationship management system of a company, while unstructured data could be collected and stored but not in specifically designed database such as phone calls and blog posting on weibo.
<br>Structured Data:  Excel
<br>Unstructured Data: E-mail, Wechat(Social-media)
<br><br>
<br>CSV (Comma-separated values)
<br>XML (Extensible Markup Language)
<br>JSON (JavaScript Object Notation)
<br>XLS (Microsoft Excel)
<br><br>
<br>Each line of the file is a data record.
<br>Each record consists of one or more attributes. The attributes are separated by commas.
<br><br>
第一条记录，可以是字段名:     Year,Make,Model,Description,Price<br>
每条记录占一行 以逗号为分隔符 e.g.(1997,Ford,E350,"ac, abs, moon",3000.00)<br>
逗号前后的空格会被忽略<br>
字段中包含有逗号，换行符，空格，该字段必须用双引号括起来<br>
字段中的双引号用两个双引号表示<br>
字段中如果有双引号，该字段必须用双引号括起来 aa,"bb,""cc" ctrl
<br><br>
<br>Categorical: noun
<br>Numeric: number
<br>Ordinal: High-Normal-Low
<br><br>If viewed as a pipeline, data analytics is the bridge that connects statistics and computer science.<br><br>It focuses on using statistical methods to discover insights from data, Statistics is more traditional and theoretical, Computer science focuses on solving all problem in a computable way, including topics in computability, algorithms, system design, networks, artificial intelligence, software engineering,etc.<br><br><br><br><br>Statistical measures can be used to describe a dataset<br>
<br>Range: 
<br>Min/Max value
<br>Mean: 
<br>Variance: 
<br>Standard deviation:  
<br>Median: The middle number<a data-footref="[inline0" href="https://blog.allenygy.vip/about:blank#fn-1-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[1]</a>
<br>Mode: Most frequently occurring value
<br><br>
<br>q%-quantile (0 &lt; q &lt; 100): The value for which q% of the values are smaller and 100-q% are larger. The median is the 50%-quantile
<br>Quartiles: 25%-quantile (1st quartile), median (2nd quartile), 75%-quantile (3rd quartile)
<br>Interquartile range(IQR): 
<br><br>
<br>Count the number of observations in the dataset(n).
<br>Sort the observations from smallest to largest.
<br>Find the first/second/third quartile<br>
Calculate n(1/4)<br>
If n(1/4) is an integer,then the first quartile is the mean of the numbers at this position n(1/4) and n(1/4)+1<br>
If n*(1/4) is not an integer , then round it up. The number at this position is the first quartile
<br><br><br><br><br>
<br>A bar chart is a simple way to depict the frequencies of the values of a categorical attribute.
<br><br>
<br>A histogram shows the frequency distribution for a numerical attribute.<br>
Difference:
<br>
Bar chart is discrete.<br>
Histogram is continuous.<br>
Bar chart is suitable for categorical data while histogram is for numeric data
<br><br>
<br>Choosing a low number of bins

The two peaks of the original distribution are no longer visible, and one gets the wrong impression that the distribution is unimodal.


<br>Choosing a high number of bins

Usually leads to a very scattered histogram in which it is difficult to distinguish true peaks from random peaks.


<br>Best Choise
<br><br>
<br>
Boxplot <a data-footref="[inline1" href="https://blog.allenygy.vip/about:blank#fn-2-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[2]</a>

<br>
Boxplots are a very compact way to visualize and summarize the main characteristics of a numeric attribute, through the median, the IQR, and possible outliers.

<br><br><br>
<br>In scatter plots two attributes are plotted against each other
<br>Can be enriched with additional features (color, shape, size)
<br>Suitable for small number of points; not suitable for large datasets
<br>Points can hide each other
<br><br><br><br>
<br>A matrix of scatter plots m×m where m is the number of attributes (data dimensionality)
<br>For m attributes there are m(m − 1)/2 possible scatter plots
<br><br><br>
<br>Similar idea of the Parallel Coordinates plot
<br>Axes are drawn in a star-like fashion intersecting in one point
<br>Suitable for small datasets
<br><br><br><br>Requires min-max-normalization of numeric columns<br>
<br>Ratio of missing values: If missing value &gt; threshold, then remove the column.
<br>Low variance: If variance &lt; threshold, then remove column. <a data-footref="[inline2" href="https://blog.allenygy.vip/about:blank#fn-3-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[3]</a>
<br>High Correlation: If(corr(var1,var2) &gt; threshold), then remove var1.
<br><br><br><br>
<br>Missing Completely At Random (MCAR): the probability that a value for X is missing does neither depend on the value of X nor on other variables. (Most serious)
<br>Missing At Random (MAR): the probability that Y is missing depends only on the value of X.
<br>Not Missing At Random (NMAR): the probability that Y is missing depends on the unobserved value of Y itself
<br><br>
<br>Ignore or delete the record
<br>Fill in (impute) missing value as “unknown”,mean/median/mode <a data-footref="[inline3" href="https://blog.allenygy.vip/about:blank#fn-4-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[4]</a>
<br><br>
<br>An outlier is a value or data object that is far away or very different from all or most of the other data.
<br>Errors in measurements or exceptional conditions that don't describe the common functioning of the underlying system.
<br><br><br>
<br>We know that a 200 year old person must be a mistake
<br>We know that “A” in a number corpus is an outlier
<br><br>
<br>Distance from the median
<br>Position in the distribution tails
<br><br>
<br>Quantile-based: Box plot
<br>Distribution-based: Z-Score
<br><br>
<br>min–max normalization  
<br>z-score standardization
<br>robust z-score standardization
<br>decimal scaling
<br><br><br>
<br>Categorical → Numerical: map categorical and ordinal values to a set of binary values
<br>Numerical → Categorical: Discretization (equal-width, equal-depth, V-optimal)
<br><br><br>Concatenation: (column do not change)<br>
<br>Unify database structures
<br>Remove duplicates
<br><br>Join: (column change)<br>
<br>Overrepresentation of items
<br>Data explosion
<br><br><br><br><br>The learner is provided with a set of data inputs together with the corresponding desired outputs<br>
<br>Data act as a “teacher”
<br>Classification &amp; Regression<br>
Example:
<br>teach kids to recognize different animals
<br>grade examinations with correct answer provided
<br><br>Training examples as input patterns, with no associated output<br>
<br>no “teacher”
<br>Clustering
<br>similarity measure exists to detect groupings/ clusterings<br>
Main differences: unsupervised learning has no “teacher”, supervised learning uses labeled input and<br>
output data, while an unsupervised learning does not
<br><br><br>The target variable that we’re trying to predict is continuous.  eg.(living areas and prices)<br><br>The target variable can take on only a small number of discrete values.  eg.(insurance)<br><br>Given a training set, to learn a function (hypothesis/model) f: X ⟼ Y, so that f(x) is a “good” predictor for the corresponding value of y.<br>
<br>
<br>The model is in linear in terms of parameters  and .
<br>Linear regression with one variable (univariate linear regression).
<br><br>
<br>Mean absolute error (MAE) 
<br>Mean squared error (MSE) 
<br>Root mean squared error (RMSE) 
<br>R-squared <a data-footref="[inline4" href="https://blog.allenygy.vip/about:blank#fn-5-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[5]</a><br>

<br><br>
<br>Training error/Empirical error: the error of the learner/model on the training data
<br>Generalization error: the error on the new data
<br><br><br>The percentage of test set tuples that are correctly classified by the classifier<br><br><br><br><br>
<br>Each internal nodedenotes a test on an attribute
<br>Each branch represents an outcome of the test
<br>Each leaf node holds a class label
<br><br>Discover hidden structures in unlabeled data<br>
Clustering identifies a finite set of groups (clusters)  in the dataset such that:<br>
<br>Objects within the same cluster  shall be as similar as possible
<br>Objects of different clusters  () shall be as dissimilar as possible<br>
Example:
<br>Customer segmentation
<br>Molecule search <a data-footref="[inline5" href="https://blog.allenygy.vip/about:blank#fn-6-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[6]</a>
<br>Anomaly detection <a data-footref="[inline6" href="https://blog.allenygy.vip/about:blank#fn-7-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[7]</a>
<br>Structuring large sets of text documents <a data-footref="[inline7" href="https://blog.allenygy.vip/about:blank#fn-8-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[8]</a>
<br>Generating thematic maps from satellite images <a data-footref="[inline8" href="https://blog.allenygy.vip/about:blank#fn-9-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[9]</a>
<br><br>
<br>Linkage Based<br>
e.g. Hierarchical Clustering
<br>Clustering by Partitioning<br>
e.g. k-Means
<br><br>
<br>Minkowski-Distance ()
<br>Euclidean Distance ()
<br>Manhattan-Distance ()
<br>
<br>
<br>Found by ordering all data points and picking out the one in the middle - or if there are two middle numbers, taking the mean of those two numbers<a href="https://blog.allenygy.vip/about:blank#fnref-1-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
<br>The middle line of the box, which is the median of the data, represents the average of the sample data. The upper and lower limits of the box are the upper and lower quartiles of the data, respectively. This means that the box contains 50% of the data. The height of the box partly reflects how fluctuating the data is. Above and below the box, there is a line. Represents the maximum and minimum values, sometimes some points "pop out", which can be understood as "outliers"<a href="https://blog.allenygy.vip/about:blank#fnref-2-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
<br>Only works for numeric columns<a href="https://blog.allenygy.vip/about:blank#fnref-3-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
<br>A predicted value based on the other attributes (inference-based such as<br>
Bayesian, Decision Tree<a href="https://blog.allenygy.vip/about:blank#fnref-4-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
<br>Proportion of the variance for a dependent variable that’s explained by the regression model.Normally ranges from 0 to 1, the closer to 1 the better performance.<a href="https://blog.allenygy.vip/about:blank#fnref-5-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
<br>Find molecules with similar structure to already working ones<a href="https://blog.allenygy.vip/about:blank#fnref-6-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
<br>Find unusual patterns in data from sensors monitoring mechanical engines<a href="https://blog.allenygy.vip/about:blank#fnref-7-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
<br>hierarchical clustering of the text documents<a href="https://blog.allenygy.vip/about:blank#fnref-8-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
<br>clustering sets of raster images of the same area (feature vectors)<a href="https://blog.allenygy.vip/about:blank#fnref-9-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
]]></description><link>https://blog.allenygy.vip/data-analysis/hoda/hans-on-data-analysis-for-everyone.html</link><guid isPermaLink="false">Data-Analysis/HODA/Hans-On-Data-Analysis-For-Everyone.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:28:12 GMT</pubDate></item><item><title><![CDATA[<a data-href="Data-Analysis" href="data-analysis/data-analysis.html" class="internal-link" target="_self" rel="noopener">Data-Analysis</a>]]></title><description><![CDATA[ 
 <br><br>]]></description><link>https://blog.allenygy.vip/data-analysis/data-analysis.html</link><guid isPermaLink="false">Data-Analysis/Data-Analysis.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:27:20 GMT</pubDate></item><item><title><![CDATA[<a data-href="DBM-Assignment-2" href="database-management/assignment/dbm-assignment-2.html" class="internal-link" target="_self" rel="noopener">DBM-Assignment-2</a>]]></title><description><![CDATA[ 
 <br><br><br><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br><br>CREATE TABLE person (
    p_id INT PRIMARY KEY,
    name VARCHAR(255),
    gender VARCHAR(10)
);
Copy<br>CREATE TABLE employ (
    p_id INT PRIMARY KEY,
    position VARCHAR(100),
    salary DECIMAL(10, 2),
    FOREIGN KEY (p_id) REFERENCES person(p_id)
);
Copy<br>CREATE TABLE customer (
    p_id INT PRIMARY KEY,
    class VARCHAR(50),
    phone VARCHAR(20),
    FOREIGN KEY (p_id) REFERENCES person(p_id)
);
Copy<br>CREATE TABLE purchase (
    b_id INT PRIMARY KEY,
    date DATE,
    p_id INT,
    FOREIGN KEY (p_id) REFERENCES person(p_id)
);
Copy<br>CREATE TABLE use(
  id INT PRIMARY KEY,
  b_id INT PRIMARY KEY,
)
Copy<br>CREATE TABLE coupon(
  id INT PRIMARY KEY,
  disconut DECIMAL(10,2),
  p_id INT,
  t_id INT,
  FOREIGN KEY (p_id) REFERENCES person(p_id)
  FOREIGN KEY (t_id) REFERENCES product_type(t_id)
)
Copy<br>CREATE TABLE product_type(
  t_id INT PRIMARY KEY,
  manufacturer VARCHAR(50),
  type VARCHAR(20),
  price DECIMAL(10,2),
)
Copy<br>CREATE TABLE contain(
  b_id INT PRIMARY KEY,
  i_id INT,
  FOREIGN KEY (b_id) REFERENCES purchase(b_id),
  FOREIGN KEY (i_id) REFERENCES product(i_id)
)
Copy<br>CREATE TABLE product(
  i_id INT PRIMARY KEY,
  t_id INT PRIMARY KEY,
  exp_date date,
  man_date date,
  FOREIGN KEY (t_id) REFERENCES product_type(t_id)
)
Copy<br><br>The issue with the given ER model is that it lacks a direct relationship between the coupon and the products it can be applied to. This absence of a direct link creates a challenge in enforcing the constraint that a purchase using a coupon must include at least one product instance that corresponds to the type eligible for that coupon.<br>
<br>
Add a table/entity to represent coupon-product type associations:<br>
Create a table like coupon_product_type with columns such as coupon_id and product_type_id to denote which product types a coupon can be applied to.

<br>
Modify the purchase entity to include coupon usage and enforce the constraint:<br>
Within the purchase entity, introduce a column coupon_used to denote whether a coupon was used in a purchase. Then, use a constraint or validation rule to ensure that if coupon_used is true, there must be at least one corresponding product instance in the purchase that matches the product type eligible for the coupon.

<br><br>
<br>Find the number of courses taught by Goliath (instructor’s name) over the years.
<br>SELECT COUNT(DISTINCT cID) AS num_courses_taught
FROM teach
WHERE iID = 'Goliath';
Copy<br>
<br>Find the number of courses taught by each instructor in the semester 23F.
<br>SELECT COUNT(DISTINCT cID) As num_courses_taught_each_instructor
FROM instructor
JOIN teach USING(iID)
GROUP BY (i.name)
WHERE teach.semester='23F'
Copy<br>
<br>Find the semester in which Goliath teaches more courses than other semesters.
<br>SELECT teach.semester, COUNT(teach.cID) AS num_courses
FROM teach JOIN instrtuctor USING(iID)
WHERE instructor.iname='Goliath'
GROUP BY teach.semester
ORDER BY num_courses DESC
LIMIT 1;
Copy<br>
<br>Insert a new student of ID: 123456, name: ‘Tomas’, gender: Male, GPA: unknown, major: ACCT, and phone number: 32165498701.
<br>INSERT INTO student VALUES 
(123456, 3, 'Tomas','Male',NULL,'ACCT', 32165498701);
Copy<br>
<br>Student ‘Dennis’ quit from the college. Please remove his information from the database.
<br>DELETE FROM student
WHERE sname='Dennis'
Copy]]></description><link>https://blog.allenygy.vip/database-management/assignment/dbm-assignment-2.html</link><guid isPermaLink="false">Database-Management/Assignment/DBM-Assignment-2.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:53:07 GMT</pubDate></item><item><title><![CDATA[<a data-href="DBM-Assignment-3" href="database-management/assignment/dbm-assignment-3.html" class="internal-link" target="_self" rel="noopener">DBM-Assignment-3</a>]]></title><description><![CDATA[ 
 <br><br><br>a) Find the students who have more enrollments than other students. Display your answer by sID and sname.<br>SELECT  sID, sname
FROM student JOIN enroll USING (sID)
GROUP BY cID
ORDER BY COUNT(DISTINCT cID) DESC
LIMIT 1;
Copy<br>b) Find the students who have enrolled all courses. Display your answer by sID and sname.<br>SELECT sID, sname
FROM student
WHERE sID IN ( SELECT sID
FROM enroll
GROUP BY enroll.sID
HAVING COUNT(DISTINCT enroll.cID) 
= (SELECT COUNT(DISTINCT cID) 
FROM course );

Copy<br>c) Find the students who have taken all courses instructed by Goliath (instructor’s name and assuming that there is no other instructor who is called Goliath). Display your answer by sID and sname.<br>SELECT s.sID, s.sname
FROM student s
JOIN course c ON 1=1
LEFT JOIN enroll e ON s.sID = e.sID AND c.cID = e.cID
WHERE NOT EXISTS (
    SELECT *
    FROM teach t
    JOIN instructor i ON t.iID = i.iID
    WHERE i.iname = 'Goliath' AND t.cID = c.cID
        AND NOT EXISTS (
            SELECT *
            FROM enroll e2
            WHERE e2.sID = s.sID AND e2.cID = t.cID
        )
)
GROUP BY s.sID, s.sname
HAVING COUNT(DISTINCT c.cID) = COUNT(DISTINCT e.cID)
Copy<br>d) Implement a constraint to guarantee that the position of an instructor is one of “lecturer”, “assistant professor”, “associated professor”, and “professor”.<br>ALTER TABLE instructor
ADD CONSTRAINT position_domain
CHECK (position IN 
("lecturer", "assistant professor", "associated professor","professor"));

Copy<br>e) Implement a constraint to guarantee that “no student is enrolled to a course which is not taught by any instructor”.<br>ALTER TABLE student
ADD CONSTRAINT teach_course
FOREIGN KEY (cID) REFERENCES course(cID)
ADD CONSTRIANT teach_instructor
FOREIGN KEY (iID) REFERENCES course(iID)
  ON DELETE CASCADE
  ON UPDATE CASCADE;
DELIMITER |
  CREATE TRIGGER guarantee_student
  AFTER INSERT ON student
  FOR EACH ROW
  BEGIN
    IF new.id NOT IN (
      SELECT iID FROM instructor) 
THEN 
    DELETE FROM student WHERE student.sID = new.sID;
  END IF;
END;|
DELIMITER ;

Copy<br><br>Please prove the three rules union, decomposition, pseudotransitivity (Lecture 9 Page 14) using Armstrong’s Axioms (Page 11). (12 pt)<br>
<br>For union:<br>
If  then 
<br>
<br>
<br> According to augmentation
<br>
<br>
<br>
<br> According to transitivity
<br>
<br>
<br>For augmentation:<br>
if , then  and 
<br>
<br>
<br>  according to reflexivity
<br> according to reflexivity
<br> according to transitivity
<br>
<br>For pseudotransitivity<br>
if  and  then 
<br>
<br>
<br> according to augmentation
<br> according to transitivity
<br>
<br><br>a. Find all condidate keys<br>L: A<br>
R: BCH<br>
LR:DEFG<br>
N:<br><br>
<br>
<br>
<br>
<br>There is only one candidate key AF<br>b. Decompose the schema in BCNF<br>Remove redundant functional dependencies and extraneous Attributes<br><br>Iteration 1:  violates BCNF<br>
Decomposition R into<br><br>
<br>
<br>
<br> and  satisfy BCNF<br>c. The decomposition in b) is dependency preserving.<br><br>
<br><br>
 it is dependency-preserving<br>d. What is the canonical cover of the functional dependencies?<br><br>e. There are no redundant dependencies or extraneous attributes in any one of the dependencies.<br><br>
<br>
<br>It has been satisfy BCNF, so it's also 3NF.]]></description><link>https://blog.allenygy.vip/database-management/assignment/dbm-assignment-3.html</link><guid isPermaLink="false">Database-Management/Assignment/DBM-Assignment-3.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:53:12 GMT</pubDate></item><item><title><![CDATA[<a data-href="DBM-Assignment-1" href="database-management/assignment/dbm-assignment-1.html" class="internal-link" target="_self" rel="noopener">DBM-Assignment-1</a>]]></title><description><![CDATA[ 
 <br><br><br>
<br>Atomicity of updates<br>
For example, it can ensure that fund transfers between accounts are either successfully completed or not executed at all. In database systems, this guarantee can prevent situations where funds are deducted for some reason but not added to another account, thereby avoiding data inconsistency and financial losses. File systems lack such guarantees, making inconsistencies more likely in such transactions.
<br>Concurrent access by multiple users<br>
For example, database systems enable multiple students to enroll in courses simultaneously, enhancing system performance. However, without proper management, uncontrolled concurrent access may lead to issues like overbooking courses, causing frustration among students.
<br>Security problems<br>
For example, in a healthcare database, it's vital to control access to patient records. Database systems offer fine-grained access control, allowing restrictions based on roles. For instance, doctors and nurses can access medical records, but administrative staff cannot. Achieving this control is challenging in a file system, posing security risks.
<br><br>
<br>Conceptual Design
<br>Logical Design
<br>Optimization
<br>Physical Design
<br><br>
<br>A schema in the context of databases is a structured blueprint that defines how data is organized, relationships are managed, and constraints are applied within a database system.
<br><br>
<br>The set of special attribute(s) is called key.
<br>Formally, a key of an entity set is a set of attributes that can uniquely identify the entities.
<br><br><br><br><br><img alt="DB-Supermarket" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DB-Supermarket.png" referrerpolicy="no-referrer"><br><br>1.Find the major number of the student Eva:<br>SELECT major
FROM student
WHERE sname='Eva';
Copy<br>2.Find the name of the professors (instructors’ position) who are from the Computer Science department:<br>SELECT iname 
FROM instructor
WHERE department='Computer Science';
Copy<br>3.Find the name of the professors (instructors’ position) who are from the Computer Science department:<br>SELECT cname
FROM course
WHERE credit=1;
Copy<br>4.Find the name of the students who have received an A in a course in semester 2023 Spring:<br>SELECT sname 
FROM student, enroll
WHERE enroll.grade = 'A'
AND enroll.semester = '2023 Spring'
AND student.sID = enroll.sID;
Copy<br>5.Find the name of the courses which are instructed by Dave (instructor’s name):<br>SELECT cname
FROM course,instructor,teach
WHERE instructor.iname = 'Dave'
AND instructor.iID = teach.iID
AND teach.cID = course.cID;
Copy<br>6.Find the name of the instructors who have taught Frank (student’s name) in semester 2022 Fall:<br>SELECT iname
FROM instructor,student,teach,enroll
WHERE student.sname = 'Frank'
AND student.sID = enroll.sID
AND enroll.cID = teach.cID 
AND teach.semester = '2022 Fall'
AND teach.iID = instructor.iID
Copy]]></description><link>https://blog.allenygy.vip/database-management/assignment/dbm-assignment-1.html</link><guid isPermaLink="false">Database-Management/Assignment/DBM-Assignment-1.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:53:02 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DB-Supermarket.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DB-Supermarket.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Relational-Database-Design-Purpose-&amp;-First-Normal-Form" href="database-management/lecture/relational-database-design-purpose-&amp;-first-normal-form.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-Purpose-&amp;-First-Normal-Form</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Good Relational Design

<br>Retrieve information easily, obtain all constraints, minimize redundancies, and have no ambiguous


<br>Normally, The logical design is good enough because the ER diagram is carefully designed.<br>
<br>Large Schema
<br>Suppose that instead of the schemas<br>
<br>
<br>
we have a larger schema<br>
<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DBM/problem_large_schema.png" referrerpolicy="no-referrer"><br>
From the example, we see redundancy occurs.<br>
<br>Small Schema
<br>Sometimes decompositions are useless.<br>
Sometimes naive decompositions create inconsistency.<br><br>For one attribute A of the schema, the other attributes it can be  identified.<br>
A-&gt;B,C,D<br><br>A domain is atomic if its elements are considered to be indivisible units.<br>
A relational schema R is in first normal form if the domains of all attributes of R are atomic.<br>
Non-atomic values complicate storage and encourage redundant (repeated) storage of data.<br>
Atomicity is actually a property of how the elements of the domain are used.]]></description><link>https://blog.allenygy.vip/database-management/lecture/relational-database-design-purpose-&amp;-first-normal-form.html</link><guid isPermaLink="false">Database-Management/Lecture/Relational-Database-Design-Purpose-&amp;-First-Normal-Form.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:55:41 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DBM/problem_large_schema.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DBM/problem_large_schema.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Relational-Database-Design-Functional-Dependency" href="database-management/lecture/relational-database-design-functional-dependency.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-Functional-Dependency</a>]]></title><description><![CDATA[ 
 <br><br>Functional dependencies are some constraints on the set of legal relations.<br>
The constraint is that the value for a certain set of attributes uniquely determines the value for another set of attributes. 约束条件是一组属性的值唯一确定另一组属性的值<br>
A functional dependency is a generalization of the notion of a key. 功能依赖关系是键概念的泛化<br><br>
<br>
 is a super key for relation schema iff 

<br>
 is a condidate key for  iff  and for no   

<br>
Functional dependencies can express constraints that cannot be expressed using superkeys.<br>
For example:

<br><br>We can use functional dependency to hold<br><br>But would not expect the following to hold:<br><br>
<br>
we can use  functional dependency to specify constraints on the set of legal relations

<br>
Trivial<br>
A functional dependency is trivial if it is satisfied by all instances of a relation.<br>
Equivalently,<br>
If  is trivial.<br>
Example:<br>
<br>


<br><br>The set of all functional dependencies logically implied by  is the closure of , denoted by .<br> is a superset of .<br><br>
<br>Applying Armstrong's Axioms

<br>reflexivity

<br>if  then 


<br>augumentation

<br>if  then  for any .  


<br>transitivity

<br>if  and , then 




<br>These rules are sound and complete.
<br>This method is also apply in Attribute Closure.<br><br>For Union:<br>
If  then <br>
<br>
<br> According to augmentation
<br>
<br>
<br>
<br> According to transitivity
<br>
<br>For Decomposition:<br>
if , then  and <br>
<br>
<br>  according to reflexivity
<br> according to reflexivity
<br> according to transitivity
<br>For pseudotransitivity<br>
if  and  then <br>
<br>
<br> according to augmentation
<br> according to transitivity
<br>
]]></description><link>https://blog.allenygy.vip/database-management/lecture/relational-database-design-functional-dependency.html</link><guid isPermaLink="false">Database-Management/Lecture/Relational-Database-Design-Functional-Dependency.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:55:19 GMT</pubDate></item><item><title><![CDATA[<a data-href="Relational-Database-Design-BCNF" href="database-management/lecture/relational-database-design-bcnf.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-BCNF</a>]]></title><description><![CDATA[ 
 <br><br><br>
<br>For the case of  a decomposition of  into  and  is lossless join if and only if at least one of the following dependencies is in :
<br><br>
<br><br>
<br>Let the schema  is decomposed into .
<br>Let  be the subset of dependencies  that only includes attributes in  for ,
<br>The decomposition is dependency preserving,  if<br>

<br>If the decomposition is not dependency preserving, then checking updates for violation of functional dependencies may require computing joins, which is expensive.
<br>Example:<br>
<br>
<br>
can be decomposed in two different ways<br>
<br>


<br>Lossless-join decomposition

<br>
<br>Dependency preserving




<br>


<br>Lossless-join decomposition

<br>
<br>Not dependency preserving (cannot check  without computing )




<br>]]></description><link>https://blog.allenygy.vip/database-management/lecture/relational-database-design-bcnf.html</link><guid isPermaLink="false">Database-Management/Lecture/Relational-Database-Design-BCNF.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:55:04 GMT</pubDate></item><item><title><![CDATA[<a data-href="Relational-Database-Design-3rd-Normal-Form" href="database-management/lecture/relational-database-design-3rd-normal-form.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-3rd-Normal-Form</a>]]></title><description><![CDATA[ 
 <br><br>
<br>There are some situations that

<br>BCNF decomposition is not dependency preserving, but
<br>efficiently checking the dependency violation on updates is important.


<br>Thus, we define a weaker normal form called Third Normal Form (3NF).

<br>3NF allows some redundancy
<br>But functional dependencies can be checked on individual relations without computing a join.<br>
There is always a lossless-join, dependency-preserving decomposition into 3NF.


<br>]]></description><link>https://blog.allenygy.vip/database-management/lecture/relational-database-design-3rd-normal-form.html</link><guid isPermaLink="false">Database-Management/Lecture/Relational-Database-Design-3rd-Normal-Form.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:54:51 GMT</pubDate></item><item><title><![CDATA[Final Review]]></title><description><![CDATA[ 
 <br><br><br>
<br>分出

<br>L
<br>R
<br>LR


<br>依次遍历

<br>L
<br>L+LR


<br><br><br><br><br>
<br>函数右部依赖分解为单属性
<br>消除冗余属性
<br>消除冗余的函数依赖
<br><br>
<br>Fm
<br>合并左部相同
<br>每个FD构成新的R
<br>在构成的R中如果每个R都不存在 R 的候选键，那么把 R 的候选键作为一个模式放入模式集
]]></description><link>https://blog.allenygy.vip/database-management/lecture/normalform.html</link><guid isPermaLink="false">Database-Management/Lecture/NormalForm.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 13:49:22 GMT</pubDate></item><item><title><![CDATA[<a data-href="Logical-Design" href="database-management/lecture/logical-design.html" class="internal-link" target="_self" rel="noopener">Logical-Design</a>]]></title><description><![CDATA[ 
 <br><br><br><br>对于多对多的情况 无论是否total participation,建表存放两实体主键<br>
<br>Many to Many
<br>Many to Many with total participation on one side
<br>many-to-many with total participation on both sides
<br>For the above 3 cases, we create an individual schema for each relationship set. The column names consist of the key attributes for both entity sets and the attributes for the relationship set (if any).<br><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER/ManyCase.png" referrerpolicy="no-referrer"><br><br>
<br>one to one without total participation 一对一
<br>one to many without total participation 一对多
<br>one to many with total participation on "one" side. 一对多，且一完全参与
<br>For the above 3 cases, we create an individual schema for each relationship set. The column names consist of the key attributes for both entity sets and the attributes for the relationship set (if any).<br>
对于以上三种情况，建立一个单独的表来存放关系集，集合内包括两个实体的主键，以及关系本身的属性,<br>
但是对于主键却有另外的要求<br>
对于其中的第一种情况 主键为两实体中的一个<br>
对于剩余两种情况 主键在多的的一侧<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER/OneCase.png" referrerpolicy="no-referrer"><br><br>
<br>one-to-one with one total participation and one partial participation
<br>one-to-one with total participation on both sides
<br>one-to-many with total participation on the “many” side
<br>one-to-many with total participation on both sides
<br>For these four cases, there is no need to create a schema.<br>
对于以上四种情况没必要建表<br>We only need to add a foreign key as a reference to the schema of<br>
the entity set with total participation on the “one” side (case 7 and 8)<br>
the entity set with total participation on the “many” side (case 9 and 10)<br>
对于情况7，8把外键放在一的一侧<br>
对于情况9，10把外键放在多的一侧<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-Remancase.png" referrerpolicy="no-referrer"><br>有many放many<br>
没many两边都放<br><br>If an entity set has composite attributes, composite attributes are directly substituted by the component attributes.<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER/Composite.png" referrerpolicy="no-referrer"><br><br>如果身份重叠则建 高一级 父表<br>
<br>If the ISA relationship set is overlapping or partial
<br>the schema for the higher-level entity set is like other strong entity sets;<br>
the schema for the lower-level entity set only consists of the attributes of this lower-level entity set and the key of the higher-level entity set;<br>
the key of the higher-level entity set is also the key of the lower-level entity set.<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER/ISA.png" referrerpolicy="no-referrer"><br>
<br>
<br>
<br>否则不建表<br>
If the ISA relationship set is disjoint and total<br>
<br>no need to create a schema for the entity set on the higher level;
<br>one schema is constructed for each entity set on the lower level, inheriting all attribute from the higher-level entity set.<br>
<br>

<br><br>Aggregations are treated same as other relationship sets.<br>
For example, the schema for “enroll” has the key of “instructor”, “student”, and “section”.<br>
Then, “doing” is a binary many-to-many relationship set. And the method for case 1 can be applied.<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/RE/Aggregation.png" referrerpolicy="no-referrer"><br>
]]></description><link>https://blog.allenygy.vip/database-management/lecture/logical-design.html</link><guid isPermaLink="false">Database-Management/Lecture/Logical-Design.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:54:06 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER/ManyCase.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER/ManyCase.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Key-Concept" href="database-management/lecture/key-concept.html" class="internal-link" target="_self" rel="noopener">Key-Concept</a>]]></title><description><![CDATA[ 
 <br><br><br>
<br>super key (超键)
<br>candidate key (候选键)
<br>primary key (主键)
<br>foreign key (外键)
<br>超键(super key): 在关系中能唯一标识元组的属性集称为关系模式的超键<br>候选键(candidate key): 不含有多余属性的超键称为候选键。也就是在候选键中，若再删除属性，就不是键了！<br>主键(primary key): 用户选作元组标识的一个候选键程序主键<br>外键(foreign key)：如果关系模式R中属性K是其它模式的主键，那么k在模式R中称为外键。<br><br><br>
<br>原子性<br>
第一范式主要是保证数据表中的每一个字段的值必须具有原子性，也就是数据表中的每个字段的值是不可再拆分的最小数据单元
<br><br>第二范式在第一范式的基础上，要求非主键列完全依赖于主键，而不是依赖于主键的一部分。<br>
简单来说，就是要保证非主键列与主键之间的关系是一对一的，而不是一对多的。<br>
<br>完全依赖于整个候选键
<br>不存在部分依赖
<br><br>第三范式在第二范式的基础上，要求非主键列之间不存在传递依赖。<br>
也就是说，非主键列之间不能相互依赖，而是通过主键来进行关联。<br>
<br>完全依赖于候选键且相互之间不存在依赖
<br>不存在传递依赖
<br><br>
<br>满足3NF的前提下
<br>主键不存在传递
]]></description><link>https://blog.allenygy.vip/database-management/lecture/key-concept.html</link><guid isPermaLink="false">Database-Management/Lecture/Key-Concept.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:54:02 GMT</pubDate></item><item><title><![CDATA[<a data-href="Entity-Relationship-Model-Modeling" href="database-management/lecture/entity-relationship-model-modeling.html" class="internal-link" target="_self" rel="noopener">Entity-Relationship-Model-Modeling</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Design Process
<br>Entity Sets
<br>Attributes
<br>Relationship Sets
<br><br>
<br>
The goal of the relational database design is to create a database in a specific database management system that allows us to

<br>Store information
<br>Minimize unnecessary redundancies
<br>Search information easily


<br>
Design database can be split into multiple phases.<br>
<img alt="Design-database" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Design-database.png" referrerpolicy="no-referrer">

<br><br>
<br>Focus on describing data and their relationships.
<br>The outcome of this phase is an ER diagram.
<br>It provides a graphic representation of the database design.<br>
<img alt="ER-diagram-example" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-diagram-example.png" referrerpolicy="no-referrer">
<br>
However, designing an ER diagram can be very subjective. Then, the next phase is optimizing the ER diagram using functional dependencies and normal forms.
<br><br>
<br>Optimizing the ER diagram using functional dependencies and normal forms.
<br><br>This phase is to convert an ER diagram to the implementation data model of the database system that will be used.<br><br>
<br>Relational schemas will be produced.<br>
The relational schemas of a database are called logical view.
<br><br>
<br>Designers will implement the relational schemas in the database management system using a particular data definition language.
<br><br>
<br>The entity-relationship model contains three basic concepts:

<br>entity sets
<br>relationship sets
<br>attributes


<br>An entity is a “thing” or “object” in the real world, which is distinguishable from all other objects.<br>
An entity set is the class or type of objects in our model.<br><br>
<br>An entity can be described by a set of properties.
<br>Each property is an attribute of the entity.
<br>A set of attributes describes and distinguishes the entities in the same entity set.
<br>One entity can have different attributes in different models for different applications.
<br>Each entity has a value for each of its attributes.
<br>The Domain of an attribute is the set of all possible values of the attribute.
<br><br>
<br>rectangles represent entity sets
<br>ellipses represent attributes
<br>keys are underlined
<br>lines link attributes to entity sets<br>
<img alt="Basic-ER-Features" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Basic-ER-Features.png" referrerpolicy="no-referrer">
<br>a relationship set is denoted by a diamond<br>
<img alt="ER-Relationship-set-diamond" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-Relationship-set-diamond.png" referrerpolicy="no-referrer">
<br><br>
<br>The set of special attribute(s) is called key.
<br>Formally, a key of an entity set is a set of attributes that can uniquely identify the entities.
<br>Two entities are identical if and only if they have the same value for the key.
<br><br>
<br>An entity may have multiple values in an attribute which is multi-valued attribute, denoted by double ellipses.
<br><img alt="Multiple-valued-Attribute" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-Multiple-valued-Attribute.png" referrerpolicy="no-referrer"><br>
It is possible that one student may have multiple phone numbers.<br><br>
<br>One may ask “why the course code is not selected as a key?”
<br>The reason is that a course code is not atomic.

<br>An attribute is atomic if each value of the attribute has only one unit of information.
<br>If an attribute is not atomic, it is a composite attribute.


<br><img alt="Composite-attribute" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Composite-attribute.png" referrerpolicy="no-referrer"><br>
<img alt="Composite-attribute" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Compositive-attribute-Example.png" referrerpolicy="no-referrer"><br><br>
<br>A relationship set is a set of relationships of the same type.<br>
<img alt="ER-Relationship-set" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-Relationship-set.png" referrerpolicy="no-referrer">
<br>Sets do not allow duplications.
<br>This is also applied to entity sets.
<br><br>
<br>If a relationship associates 𝑛 entities, this relationship is 𝒏-ary.
<br>𝑛 is the degree of the relationship
<br>If 𝑛 = 2, the relationship is binary.
<br>If 𝑛 = 3, the relationship is ternary.
<br>Theoretically, 𝑛 can be any positive integer.
<br><br>
<br>The relationship set can also have some attributes.
<br>Example:

<br>Sometimes people are also interested in some information about relationships.
<br>In the “students borrow books” example, we also want to know when the book is borrowed, when the book is returned, and how long the book is kept by the student.
<br>This information does not belong to students or books. It is about the association.<br>
<img alt="Attribute-for-relationship-sets" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-Attribute-for-relationship-sets.png" referrerpolicy="no-referrer">


<br><br>
<br>In the previous example, the attribute duration is in a dashed ellipse because it is a derived attribute.

<br>If one knows the date of borrow and the date of return, then the duration can be calculated from the two values.


<br><br><img alt="ER-Summary" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-Summary.png" referrerpolicy="no-referrer">]]></description><link>https://blog.allenygy.vip/database-management/lecture/entity-relationship-model-modeling.html</link><guid isPermaLink="false">Database-Management/Lecture/Entity-Relationship-Model-Modeling.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:53:58 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Design-database.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Design-database.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Entity-Relationship-Model-Extended-Features" href="database-management/lecture/entity-relationship-model-extended-features.html" class="internal-link" target="_self" rel="noopener">Entity-Relationship-Model-Extended-Features</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Aggregation 聚合
<br>Weak Entity Sets
<br>Generalization and Specialization
<br><br>let “student”, “instructor”, “course”, and “enroll” form an abstract entity as an aggregation. Then “project” only need to associate with the courses which has a course project.<br>
<img alt="MnKmwI" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/MnKmwI.png" referrerpolicy="no-referrer"><br><br>A weak entity is an entity cannot exist alone. The existence depends on another entity of a different type.<br>
弱实体不单独存在，必须依附于实体<br>
A set of weak entities is a weak entity set. Since a weak entity cannot exist alone, it does not have a key.<br>
The existence of a weak entity set depends on the existence of an identifying entity set.<br>
<br>
A weak must relate to the identifying entity set via a total, one-to-many relationship set from the identifying to the weak entity set.

<br>
An identifying relationship depicted using a double diamond. 用双线菱形表示identifying relationship

<br>
The discriminator(鉴别器) (or partial key) of a weak entity set is the set of attributes that distinguishes among all the entities of a weak entity set.<br>
To distinguish weak entities, one must combine the key of the identifying entity set and the discriminator

<br>
Example

<br>Our original modeling for courses was not accurate.<br>
Instead of saying “a student is enrolled to a course”, it’s better to say, “a student is enrolled to a section of a course”.<br>
Same for instructors, one instructor may teach multiple sections of one course.<br>
An entity set “section” is needed.<br>
But a section needs to be with a course.<br>
Thus, “section” is a weak entity set which depends on “course”.<br>
<img alt="PWsNRI" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/PWsNRI.png" referrerpolicy="no-referrer"><br>Double rectangles denote weak entity sets. 双矩形边框 表示weak entity<br>
Dashed underlines denote discriminators of weak entity sets. 虚线下划线 表示 weak entity的键<br>
Double diamonds denote identifying relationship sets.<br>
Assume we model the original “enroll” relationship set without constraints. <a data-footref="[inline0" href="https://blog.allenygy.vip/about:blank#fn-1-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[1]</a><br><br>
<br>
Generalization (泛化) is the process of extracting common properties from a set of entities and create a generalized entity from it. It is a bottom-up approach in which two or more entities can be generalized to a higher level entity if they have some attributes in common.

<br>
specialization (具象化), an entity is divided into sub-entities based on their characteristics. It is a top-down approach where higher level entity is specialized into two or more lower level entities.

<br>
泛化 抽象实体集的共同特征 bottom-up

<br>
具象化 Top-down

<br>
Does one higher-level entity belong to at least one lower-level entity set?<br>
If yes, this ISA is a total generalization.<br>
If no, this ISA is a partial generalization

<br>
Does one higher-level entity belong to multiple lower-level entity set?<br>
If No, it is a disjoint generalization.<br>
If no, it’s a overlapping generalization

<br>
Similar to the Inheritance<br>
<img alt="ER-Generalization.png" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-Generalization.png" referrerpolicy="no-referrer">

<br>Cardinality constraints and participation constraints can be applied on ISA relationship sets.<br>
But some constraints are omitted because<br>
each entity on the lower-level is one entity on the higher-level (the entity sets on the lower-level always fully participate ISA);<br>
one entity cannot be associated with multiple entities in the same entity set on the lower-level.<br>
Thus, the constraints on ISA only discuss<br>
Does one higher-level entity belong to at least one lower-level entity set?<br>
If yes, this ISA is a total generalization.<br>
Does one higher-level entity belong to multiple lower-level entity set?<br>
If No, it is a disjoint generalization.<br>The above design process is bottom-up, combining several entity sets with same attributes into higher-level entity set.<br>
But sometimes the process is reversed.<br>
Some entity sets can be split into some lower-level entity sets with specific attributes.<br>
This top-down process is called specialization.<br>Consider the “student” and “instructor” example.<br>
If we want to express every person is either a student or an instructor, then this is a total generalization.<br>
And if we assume nobody can be a student and an instructor at the same time, this is a disjoint generalization.<br>
<img alt="S0PX3U" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/S0PX3U.png" referrerpolicy="no-referrer"><br>
<br>
<br>我的评价是真sharuan<a href="https://blog.allenygy.vip/about:blank#fnref-1-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
]]></description><link>https://blog.allenygy.vip/database-management/lecture/entity-relationship-model-extended-features.html</link><guid isPermaLink="false">Database-Management/Lecture/Entity-Relationship-Model-Extended-Features.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:53:45 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/MnKmwI.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@main/uPic/MnKmwI.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Entity-Relationship-Model-Constraints" href="database-management/lecture/entity-relationship-model-constraints.html" class="internal-link" target="_self" rel="noopener">Entity-Relationship-Model-Constraints</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Cardinality Constraints  基数约束 (one-one/one-many/many-many)
<br>Participation Constraints 参与约束 (for all/some)
<br>Constraints for Ternary Relationship Sets 三元关系集的约束
<br><br>
<br>
“how many entities can be associated with one entity at most (or at least)?”

<br>
Can one student have multiple majors?

<br>
Can one program have multiple students?

<br>
Does every student have a major?

<br>
Is every program the major for some students?

<br>
To express the answers, ER diagrams have constraints on relationship sets.
<br>Two types of constraints<br>
<br>Cardinality constraints
<br>Participation constraints
<br>
“Cardinality” is a term from set theory. It is the number of items in a set.
<br><br>To express the cardinality constraints.<br>
ER diagrams use an arrow  pointing to the one side.<br>
For the many side, the links simply have no arrow ().<br><br>
<br>An example for Cardinality Constraints One to many relationships:
<br><img alt="Many-to-one" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER/Many-to-one.png" referrerpolicy="no-referrer"><br>
Many student can only have one program
<br>Here are some conditions for the example:<br>
<br>one student can only associate with at most one program as his/her major
<br>one major program can have many students.
<br>A one-to-many relationship is the reverse of many-to-one.<br><br>One entity from one entity set is associated with at most one entity from the other entity set and vice versa.<br>
<br>For example, one instructor can be the program director of at most one program, and one program has at most one program director.
<br><img alt="One-to-one" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER/One-to-one.png" referrerpolicy="no-referrer"><br><br>One entity from one entity set can be associated with multiple entities from the other entity set and vice versa.<br>
<br>For example, one student can borrow multiple books, and one book can be borrowed by multiple students.
<br><img alt="Many-to-many" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-Many-to-many.png" referrerpolicy="no-referrer"><br><br>
<br>Total Participation

<br>Every entity participates a relationship.
<br>The link is a double line (=).


<br>Partial Participation

<br>There are some entities do not participate any relationship.
<br>The link is a single line (−).


<br><br>
<br>Example:<br>
Every student has a major.<br>
Every program is the major for some students. (Programs also totally participate.)
<br><img alt="Total-participation" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-Total-participation.png" referrerpolicy="no-referrer"><br><br>
<br>Example:<br>
It’s possible that an instructors is not a program director for any program.<br>
But every program has a program director.
<br><img alt="Particial-participation" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-Partical-participation.png" referrerpolicy="no-referrer"><br><img alt="Alternative-Notations" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER-Alternative-Notations.png" referrerpolicy="no-referrer"><br><br>we usually avoid using constraints on ternary relationship sets.<br>
If expressing constraints is important, ternary relationship sets can always be converted into several binary ones.<br>Non-binary relationships with constrains is complex.<br>
<br>Not suggested to use constraints on non-binary relationships (ambiguous)
<br>See lecture: convert non-binary to binary
]]></description><link>https://blog.allenygy.vip/database-management/lecture/entity-relationship-model-constraints.html</link><guid isPermaLink="false">Database-Management/Lecture/Entity-Relationship-Model-Constraints.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:53:34 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER/Many-to-one.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/ER/Many-to-one.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Design-Issues" href="database-management/lecture/design-issues.html" class="internal-link" target="_self" rel="noopener">Design-Issues</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Design Techniques
<br>Attributes vs Entity
<br>Entity set vs Relationship set
<br>Weak entity sets
<br>Redundancies
<br><br>
<br>Express all constraints (you can express!).
<br>Use and do not change terminology and class structure of the application domain.
<br>Keep it simple.<br>
Avoid defining entity types that do not serve any purpose.<br>
Don’t use an entity set when an attribute will do. Choose an entity set if it helps expressing constraints; otherwise, use an attribute.
<br>Avoid redundancy (but derived attributes are okay)!
<br>Limit the use of weak entity sets.
<br><br>
<br>Attribute vs Entity
<br>Entity set vs Relationship set
<br>Strong entity sets vs Weak entity sets
<br>Binary relationship vs multi-ary relationship
<br>Try to eliminate redundancy<br>
In most cases, the answer is very subjective. It depends on the real-world problem.<br>
Sometimes, the answers can be very different even on the same problem but with different assumptions.<br><br>It depends on the real case.<br>
Both ER models have advantages and disadvantages.<br>]]></description><link>https://blog.allenygy.vip/database-management/lecture/design-issues.html</link><guid isPermaLink="false">Database-Management/Lecture/Design-Issues.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:53:20 GMT</pubDate></item><item><title><![CDATA[<a data-href="Set-Operation-&amp;-Where-Subquery" href="database-management/mysql/set-operation-&amp;-where-subquery.html" class="internal-link" target="_self" rel="noopener">Set-Operation-&amp;-Where-Subquery</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Set Operations

<br>Union
<br>Intersection
<br>Set difference


<br>Subquery

<br>IN subquery
<br>NOT IN subquery


<br><br>Tables are treated as sets in relational databases.<br>Let A and B be two sets.<br>The union of  and  is the set .<br>
The intersection of  and  is the set .<br>
The set difference of  and  is the set =.<br>For example, <br>
<br>
<br>
.<br><br>The two tables of the union must be compatible: corresponding columns must be of the same type.<br>TableA UNION TableB;
Copy<br>
<br>MySQL is very robust. It allows union between different types.
<br>For example,<br>(SELECT actor_id FROM actor) UNION (SELECT first_name FROM actor)
However, this is NOT the reason for a union without type checking.
Copy<br><br>TableA INTERSECT TableB;
Copy<br>(SELECT columns FROM tables1 WHERE P1) 
INTERSECT 
(SELECT columns FROM tables2 WHERE P2)
Copy<br>The corresponding IN subquery is <br>SELECT columns FROM tables1 
WHERE P1 AND columns IN (
    SELECT columns FROM tables2 WHERE P2
    )
Copy<br>
<br>Find the id of the English films which are played by Tim Hackman.
<br>(SELECT film_id
FROM film_actor JOIN actor USING(actor_id) 
WHERE first_name='Tim' AND last_name='Hackman')
INTERSECT
(SELECT film_id 
FROM film JOIN language USING(language_id) 
WHERE name='English')
Copy<br>
<br>can implemented by IN
<br>SELECT film_id
FROM film_actor JOIN actor USING(actor_id) 
WHERE first_name='Tim' 
  AND last_name='Hackman'
  AND film_id IN(
    SELECT film_id 
    FROM film JOIN language USING(language_id) 
    WHERE name='English')
Copy<br>
<br>It can also be implemented by using SOME.<br>
If an element is in a set, then the element is equal to some element in the set.
<br>    SELECT film_id
    FROM film JOIN language USING(language_id)
    WHERE name = 'English' AND
      film_id = SOME(
        SELECT film_id
        FROM film_actor JOIN actor USING(actor_id)
        WHERE first_name='Tim' AND last_name='Hackman'
      )
Copy<br><br>For set difference use the keyword EXCEPT.<br>TableA except TableB
Copy<br>(SELECT columns FROM tables1 WHERE P1)
EXCEPT 
(SELECT columns FROM tables2 WHERE P2)
Copy<br>Alternatively we can use the NOT IN subquery.<br>SELECT columns FROM tables1 
WHERE P1 AND columns NOT IN (
SELECT columns FROM tables2 WHERE P2
)
Copy<br>
<br>Find the id of the films which are played by Tim Hackman but not in English.
<br>(SELECT film_id 
FROM film_actor JOIN actor USING(actor_id) 
WHERE first_name="Tim" AND last_name="Hackman")
EXCEPT
(SELECT film_id
FROM film JOIN language USING(language_id)
WHERE name="English")
Copy<br>
<br>can implemented by NOT IN
<br>SELECT film_id 
FROM film_actor JOIN actor USING(actor_id) 
WHERE first_name="Tim" 
AND last_name="Hackman"
AND film_id NOT IN (
  SELECT film_id
  FROM film JOIN language USING(language_id)
  WHERE name="English")
Copy]]></description><link>https://blog.allenygy.vip/database-management/mysql/set-operation-&amp;-where-subquery.html</link><guid isPermaLink="false">Database-Management/MySQL/Set-Operation-&amp;-Where-Subquery.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:56:56 GMT</pubDate></item><item><title><![CDATA[<a data-href="Null-Subquery" href="database-management/mysql/null-subquery.html" class="internal-link" target="_self" rel="noopener">Null-Subquery</a>]]></title><description><![CDATA[ 
 <br><br><br>
<br>The domain of each data type contains a special value – NULL.

<br>NULL means the value is unknown or does not exist.
<br>NULL values can participate calculations in the arithmetic expressions
<br>aggregation functions, comparisons, and predicates (logical test) in the WHERE clause.


<br><br>
<br>To check whether a value of an attribute is NULL (atomic predicate)
<br>WHERE attribute IS NULL
Copy<br>
<br>Any arithmetic expression which has NULL values is evaluated as NULL.<br>
For example, this query is same as the above.<br>
SELECT * FROM staff WHERE (picture+1) IS NULL
<br><br>Different aggregation functions treat NULL values differently.<br>
<br>
If NULL values and non-NULL values are mixed,

<br>all aggregation functions ignore NULL values.


<br>
If the group only consists of NULL values,

<br>count returns 0;
<br>other aggregation functions return NULL.


<br>
如果NULL与非NULL的属性混合 那么所有aggregation function会忽略 NULL

<br>
如果只有NULL，那么count() return 0,其他aggragation function return NULL

<br><br>
<br>The logic with NULL values has three constants:

<br>TRUE, FALSE, and UNKNOWN 三值判断体系


<br>A comparison with NULL values is evaluated as UNKNOWN.<br>
To check whether a logical constant is UNKNOWN, use IS UNKNOWN.<br>
For example, try the query and check the outcome.
<br>SELECT staff_id FROM staff WHERE (staff_rating&gt;5) IS UNKNOWN<br>
<br>
如果某个 attribute = NULL 那么他的逻辑判断结果 为 UNKNOWN

<br>
OR:

<br>(unknown OR true) = true
<br>(unknown OR false) = unknown
<br>(unknown OR unknown) = unknown


<br>
AND:

<br>(true AND unknown) = unknown
<br>(false AND unknown) = false
<br>(unknown AND unknown) = unknown


<br>
NOT:

<br>(NOT unknown) = unknown


<br><br>
<br>A subquery is a query (SELECT…FROM…WHERE) inside another query.
<br>Subqueries can be in all of SELECT, FROM, and WHERE clauses.<br>In the FROM clause, users need to indicate some tables.<br>
A “SELECT…FROM…WHERE…” query returns a temporary table. (The type is matched.)]]></description><link>https://blog.allenygy.vip/database-management/mysql/null-subquery.html</link><guid isPermaLink="false">Database-Management/MySQL/Null-Subquery.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:56:46 GMT</pubDate></item><item><title><![CDATA[<a data-href="Join" href="database-management/mysql/join.html" class="internal-link" target="_self" rel="noopener">Join</a>]]></title><description><![CDATA[ 
 <br><br>
<br>NATURAL JOIN
<br>SELECT *
FROM table1
NATURAL JOIN table2;
Copy<br>默认JOIN所有共同的attribute<br>
<br>JOIN ON
<br>SELECT *
FROM table1
JOIN table2 ON table1.column_name = table2.column_name
JOIN table3 ON table2.column_name = table3.column_name;
Copy<br>
<br>JOIN USING
<br>SELECT *
FROM table1
JOIN table2 USING (column_name)
JOIN table3 USING (column_name);
Copy<br>
<br>LEFT/RIGHT/FULL JOIN
<br>SELECT *
FROM left_table
LEFT JOIN right_table ON left_table.column_name = right_table.column_name;

SELECT *
FROM table1
RIGHT JOIN table2 ON table1.column_name = table2.column_name;

SELECT *
FROM table1
FULL JOIN table2 ON table1.column_name = table2.column_name;
Copy<br>
<br>Are you tired of condition checking in cross table queries?
<br>The NATURAL JOIN operator associates two tables by the common attributes.<br>
After NATURAL JOIN, the duplicated attributes are omitted.<br>SELECT * FROM city NATURAL JOIN country
Copy<br>is implemented as<br>SELECT city.country_id, city.last_update, city_id, city, country
FROM city, country
WHERE city.country_id = country.country_id AND
    city.last_update = country.last_update
Copy<br><br>
<br>Join conditions define in which condition the tuples are associated.
<br>Two tuples are associated if

<br>NATURAL: all common attributes have the same value.
<br>ON &lt;predicate&gt;: the predicate is evaluated to be true.
<br>USING : the common attributes in list have the same value.


<br>For example, these queries are equivalent.<br>SELECT first_name, last_name, address, district, postal_code 
FROM customer NATURAL JOIN address

SELECT first_name, last_name, address, district, postal_code
FROM customer JOIN address ON customer.address_id = address.address_id AND customer.last_update = address.last_update

SELECT first_name, last_name, address, district, postal_code
FROM customer JOIN address USING (address_id, last_update)
Copy<br><br>
<br>A JOIN without any condition is same as a cartesian product.<br>
Sometimes more than two tables are joined together.
<br><br>
<br>The NATURAL JOIN operator associates two tables by all the common attributes.<br>
基于两个表之间的相同列名来进行连接。当使用自然连接时，数据库系统会自动查找两个表中列名相同的字段，并将它们用作连接条件，返回一个新表，其中包含了这些字段的所有数据。
<br>SELECT * FROM city NATURAL JOIN country
is equivalent to
SELECT city.country_id, city.last_update, city_id, city,country
FROM city, country
WHERE city.country_id = country.country_id AND
city.last_update = country.last_update
Copy<br>  SELECT *FROM table1 NATURAL JOIN table2 NATURAL JOIN table3  
Copy<br>The query is understood as<br>  SELECT* FROM (table1 NATURAL JOIN table2) NATURAL JOIN table3
Copy<br>只保留相同的部分<br>Notes:<br>
<br>The predicate in the ON clause is user-defined, which is very flexible.
<br>NATURAL and USING combine the common attributes. But ON duplicates common attributes.
<br><br>当需要无法匹配的部分时<br>
<br>Sometimes users want to keep the unmatched tuples after joining two tables.
<br>OUTER JOIN can handle it.<br>
<br>
table1 NATURAL LEFT OUTER JOIN table2<br>
All tuples in table1 are in the result. For the unmatched tuples, the values of the attributes from table2 are NULL, meaning “unknown”. (NULL values will be introduced in following labs.)

<br>
table1 NATURAL RIGHT OUTER JOIN table2<br>
The unmatched tuples from table2 are kept.

<br>
table1 NATURAL FULL OUTER JOIN table2<br>
All tuples (from both table1 and table2) are kept.

<br>
NATURAL is the join condition.

<br>On the opposite of OUTER, INNER JOIN does not keep the unmatched tuples.<br>
Same as JOIN. “INNER” is usually omitted.<br>Suppose we try to join this 2 tables<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/MySQL/OUTERJOIN-1.png" referrerpolicy="no-referrer"><br>
<br>LEFT OUTER JOIN
<br>SELECT *  FROM person NATURAL LEFT OUTER JOIN address
Copy<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/MySQL/LEFTJOIN.png" referrerpolicy="no-referrer"><br>
<br>RIGHT OUTER JOIN
<br>SELECT *  FROM person NATURAL RIGHT OUTER JOIN address
Copy<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/MySQL/RIGHTJOIN.png" referrerpolicy="no-referrer"><br>
<br>FULL OUTER JOIN
<br>SELECT * FROM person NATURAL FULL OUTER JOIN address
Copy<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/MySQL/FULLOUTERJOIN.png" referrerpolicy="no-referrer"><br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/MySQL/JOIN.png" referrerpolicy="no-referrer">]]></description><link>https://blog.allenygy.vip/database-management/mysql/join.html</link><guid isPermaLink="false">Database-Management/MySQL/Join.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:56:34 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/MySQL/OUTERJOIN-1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/MySQL/OUTERJOIN-1.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Division-and-Correlated-Subquery" href="database-management/mysql/division-and-correlated-subquery.html" class="internal-link" target="_self" rel="noopener">Division-and-Correlated-Subquery</a>]]></title><description><![CDATA[ 
 <br><br><br>Division operator is used for queries involving “all”.<br><br>Query: “Retrieve (all) course names that is/are taught by all programes.”<br><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Mysql/Division.png" referrerpolicy="no-referrer"><br>The solution to the query is<br><br>Database is taught by all programmes, i.e. both CST and DS.<br><br><br><br>SELECT 𝐶1.𝑐_𝑛𝑎𝑚𝑒
FROM 𝑐𝑎𝑡𝑎𝑙𝑜𝑔𝑢𝑒 AS 𝐶1
WHERE NOT EXISTS (  // 遍历C1
  (SELECT 𝑝_𝑛𝑎𝑚𝑒  //Divisor
  FROM 𝑝𝑟𝑜𝑔𝑟𝑎𝑚𝑚𝑒)
    EXCEPT
  (SELECT 𝑝_𝑛𝑎𝑚𝑒 //Dividend
  FROM 𝑐𝑎𝑡𝑎𝑙𝑢𝑔𝑢𝑒 AS 𝐶2
  WHERE 𝐶2.𝑐_𝑛𝑎𝑚𝑒=𝐶1.𝑐_𝑛𝑎𝑚𝑒)// 得到C1.c_name对应的p_name集合
)
Copy<br>NOT EXISTS: 检查集合是不是NULL<br>
<br>If true return true; else return false;
<br>第一个SELECT选择的是除数<br>
第二个SELECT选择的是被除数<br>
EXCEPT 去除集合的公共元素<br>SELECT 𝐶1.𝑐_𝑛𝑎𝑚𝑒
FROM 𝑐𝑎𝑡𝑎𝑙𝑜𝑔𝑢𝑒 AS 𝐶1
WHERE NOT EXISTS (
  SELECT *
  FROM 𝑝𝑟𝑜𝑔𝑟𝑎𝑚𝑚𝑒
  WHERE 𝑝_𝑛𝑎𝑚𝑒 NOT IN(
    SELECT 𝐶2.𝑝_𝑛𝑎𝑚𝑒
    FROM 𝑐𝑎𝑡𝑎𝑙𝑜𝑔𝑢𝑒 AS 𝐶2
    WHERE 𝐶2.𝑝_𝑛𝑎𝑚𝑒=𝐶1.𝑝_𝑛𝑎𝑚𝑒
  )
)
Copy<br><br>
<br>
<br>
<br>
<br><br>
// sID is a foreign key to student.sID. cID is a foreign key to course.cID.
<br><br>
// iID is a foreign key to instructor.iID. cID is a foreign key to course.cID.
<br>
<br>Find the students who have enrolled all courses. Display your answer by sID and sname.
<br>SELECT s1.sID,s1.sname
FROM student AS s1
WHERE NOT EXISTS(
  (SELECT cID FROM course)
  EXCEPT
  (SELECT cID 
  FROM enroll AS e1
  WHERE s1.sID=e1.sID
  )
)
Copy<br>SELECT s1.sID,s1.sname
FROM student AS s1
WHERE NOT EXISTS(
  SELECT cID FROM course
  WHERE cID NOT IN(
    SELECT cID 
    FROM enroll AS e1
    WHERE s1.sID=e1.sID
  )
)
Copy<br><a data-footref="[inline0" href="https://blog.allenygy.vip/about:blank#fn-1-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[1]</a><br>
<br>Find the students who have taken all courses instructed by Goliath (instructor’s name and assuming that there is no other instructor who is called Goliath). Display your answer by sID and sname.
<br>Divisor: course that taught by Goliath<br>
Dividend: enroll<br>SELECT s1.sID,s1.sname
FROM student AS s1
WHERE NOT EXISTS(
  (SELECT cID FROM course  WHERE cname='Goliath') 
  EXCEPT
  (SELECT cID FROM enroll AS e1
  WHERE e1.sID=s1.sID)
)
Copy<br>SELECT s1.sID,s1.sname
FROM student AS s1 
WHERE NOT EXISTS(
    (SELECT cID 
    FROM course 
    JOIN teach USING(cID) 
    JOIN instructor USING(iID) 
    WHERE iname='Goliath'
    AND cID NOT IN 
        (SELECT cID FROM enroll AS e1
        WHERE e1.sID=s1.sID)
    )
  );
Copy<br>
<br>
<br>不需要将student，enroll，course合起来<a href="https://blog.allenygy.vip/about:blank#fnref-1-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
]]></description><link>https://blog.allenygy.vip/database-management/mysql/division-and-correlated-subquery.html</link><guid isPermaLink="false">Database-Management/MySQL/Division-and-Correlated-Subquery.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:56:27 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Mysql/Division.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Mysql/Division.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Data-Modification" href="database-management/mysql/data-modification.html" class="internal-link" target="_self" rel="noopener">Data-Modification</a>]]></title><description><![CDATA[ 
 <br><br>
<br>INSERT
<br>INSERT INTO table_name (column1, column2, column3, ...)
VALUES
    (value1_1, value1_2, value1_3, ...),
    (value2_1, value2_2, value2_3, ...),
    ...
Copy<br>INSERT INTO destination_table (column1, column2, ...)
SELECT column1, column2, ...
FROM source_table
WHERE conditions;
Copy<br>
<br>UPDATE
<br>UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
Copy<br>
<br>DELETE
<br>DELETE FROM table_name
WHERE condition;
Copy<br>Usually, database users are only allowed to change data (table rows), which is covered by this lab.<br>
Table columns are related to the logical design and are managed by database managers.<br>
To change the logical design, you need ALTER TABLE (last lab).<br><br>
<br>To insert a record for a program:
<br>Program code: 1001<br>
Program name: Computer Science<br>
Division: Science and Technology<br>
Director: NULL (unknown)<br>INSERT INTO program (p_code, p_name, division, director_id) VALUES (1001, 'Computer Science', 'Science and Technology', NULL);
Copy<br>The schema of the table is to remind users the data types, which can be omitted.<br>
Currently, the instructor table is empty. So, the program director is unknown.<br>
<br>Insert Example
<br>Course:
Name: Introduction to Biology,   Credits: 3, 
Domain: ENVS,      Course Number: 2001

Instructor:
ID: 20002,   Name: S.H. Zee,  Title: Professor, 
Salary: 100000,  Program: Environmental Science

Program:
ID: 1002,      Name: Environmental Science,  
Division: Science and Technology,  Program director: Unknown
Copy<br>the instructor cannot be inserted before the program<br>INSERT INTO course VALUES 
('Introduction to Biology', 3, 'ENVS', 2001);

INSERT INTO program VALUES 
(1002, 'Environmental Science', 'Science and Technology', NULL);

INSERT INTO program VALUES
(20002, 'S.H. Zee', 'Professor', 100000, 1002);
Copy<br>
<br>Sometimes we can insert data constructed from other tables.<br>
Suppose we want to express that the program Environmental Science offers the course Introduction to Biology.
<br>INSERT INTO offer 
        SELECT p_code,c_name 
        FROM program,course 
        WHERE p_name='Environmental Science' 
          AND c_name = 'Introduction to Biology '
Copy<br>
<br>SELECT…FROM…WHERE… constructs the tuples which are inserted to “offer”.
<br><br>
<br>Suppose Prof. S.T. Kwok becomes the new program director for Computer Science. We need to update the table.
<br>UPDATE program 
SET director_id = (SELECT id FROM instructor WHERE i_name='S.T. Kwok') 
WHERE p_name = 'Computer Science'
Copy<br>UPDATE: the keyword to update a table, followed by the table name.<br>
SET: the keyword to update a specific column, followed by an assignment operation.<br>
(…): a subquery to find the person id of S.T. Kwok.<br>
WHERE: only update the rows which satisfy the condition in the WHERE clause.<br><br>
<br>Suppose Prof. S.T. Kwok has retired. All his information should be removed from the system.
<br>DELETE FROM instructor WHERE i_name='S.T. Kwok'
Copy<br>
<br>Every row which satisfies the condition will be removed. Thus, be careful.
]]></description><link>https://blog.allenygy.vip/database-management/mysql/data-modification.html</link><guid isPermaLink="false">Database-Management/MySQL/Data-Modification.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:56:19 GMT</pubDate></item><item><title><![CDATA[<a data-href="Data-Definition" href="database-management/mysql/data-definition.html" class="internal-link" target="_self" rel="noopener">Data-Definition</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Data definition language defines
<br>Databases
<br>Tables
<br>Attributes and their types
<br>Constraints
<br>CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(100),
    salary DECIMAL(10, 2) NOT NULL
);
Copy<br>CREATE TABLE table_name (
    column1 datatype constraints,
    column2 datatype constraints,
    ...
    PRIMARY KEY (column_name(s)),
    FOREIGN KEY (column_name) REFERENCES other_table_name(column_name)
);
Copy<br>ALTER TABLE borrow ADD FOREIGN KEY (ISBN) REFERENCES books(ISBN)
Copy<br><br>
<br>create database
<br>CREATE DATABASE uic_example
Copy<br>
<br>create table
<br>CREATE TABLE table_name (
  attribute1 type1,
  attribute2 type2,
  …
  constraint1, 
  constraint2,
  …
)
Copy<br>“table_name” is the name of the table.<br>
“attribute” is the name of the attribute.<br>
“type” is the data type for the attribute.<br>
“constraint” is a condition on the table. If users try to insert some data violating the condition, the system will give a warning.<br><br><br>VARCHAR 不定长<br>
CHAR 定长<br><br>
<br>PRIMARY KEY (attribute)<br>
One or multiple attribute(s)<br>
Uniquely identify the tuples<br>
Unique for each table<br>
Cannot be a NULL value by default
<br>NOT NULL<br>
The value of the attribute cannot be unknown.<br>
The condition is checked when rows are inserted into the table.
<br><br>FOREIGN KEY (attribute(s)1) REFERENCES table2(attribute(s)2)
Copy<br>
<br>
“attribute(s)1” in the current table and “attribute(s)2” in “table2” represent the same piece of information.

<br>
“attribute(s)2” is the primary key for “table2”.

<br>
A value of “attribute(s)1” in the current table cannot exist alone.

<br>
To add foreign keys to an existing table, we need to change the schema.

<br>ALTER TABLE borrow ADD FOREIGN KEY (ISBN) REFERENCES books(ISBN)
Copy<br>ALTER TABLE: the keyword to change the schema of a table.<br>
borrow: the table name.<br>
ADD: to add new attributes or constraints (“DROP” to remove attributes or constraints).<br>
FOREIGN KEY: the constraint.<br>
(ISBN): the foreign key.<br>
REFERENCES: the keyword to indicate which attribute is the target.<br>
books(ISBN): the attribute “ISBN” in the table “books” is referenced.]]></description><link>https://blog.allenygy.vip/database-management/mysql/data-definition.html</link><guid isPermaLink="false">Database-Management/MySQL/Data-Definition.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:56:14 GMT</pubDate></item><item><title><![CDATA[<a data-href="Cross-table-Query" href="database-management/mysql/cross-table-query.html" class="internal-link" target="_self" rel="noopener">Cross-table-Query</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Sometimes a single table does not contain all desired attributes.
<br><br>The crossing of tables is the cartesian product of them.<br>
Equivalent to querying from a (temporary) table A×B, the cartesian product of A and B.<br>
<img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/MySQL/Crosstable.png" referrerpolicy="no-referrer"><br>
temp=city x country
SELECT city FROM temp WHERE city.country_id=country.country_id AND country='China'
Copy<br><br>
<br>对于一部分相同但是仍有部份不同需要找出时
<br>SELECT a1.city_id
FROM address AS a1, address AS a2
WHERE a1.city_id = a2.city_id AND
 a1.address_id &lt;&gt; a2.address_id
Copy]]></description><link>https://blog.allenygy.vip/database-management/mysql/cross-table-query.html</link><guid isPermaLink="false">Database-Management/MySQL/Cross-table-Query.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:56:09 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/MySQL/Crosstable.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/MySQL/Crosstable.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="Basic-MySQL" href="database-management/mysql/basic-mysql.html" class="internal-link" target="_self" rel="noopener">Basic-MySQL</a>]]></title><description><![CDATA[ 
 <br><br>The basic query has three clauses: SELECT, FROM, and WHERE.<br>
<br>
SELECT: contains one or multiple attributes.<br>
These attributes are displayed in the result.<br>
The symbol “*” means all attributes.

<br>
The FROM clause contains one or more tables.

<br>
The WHERE clause contains a single predicate.<br>
It is a logical test on every row of the table which returns true or false.<br>
If multiple queries are executed at the same time, a semicolon “;” is used as a delimiter to split two queries.

<br>
A query is executed as follows.<br>
The system test the predicate on every tuple from the table in the FROM clause.<br>
If a tuple satisfies the predicate, show the values of the attributes in the SELECT clause in the result.

<br><br>
<br>The predicate in the WEHERE clause is regarded as a logic test.<br>
The return value of a predicate is a Boolean, either 1 (True) or 0 (False).
<br>Formally, suppose op is a relation operator, which can be =, &gt;, &gt;=, &lt;, &lt;=, and &lt;&gt; (not equal);<br>
a predicate can be a single term
<br>  pred = term
  term = exp op exp
Copy<br>“exp” is an arithmetic expression which contains attributes and constants.<br>For example<br>rental_rate &lt; 1
Copy<br>
<br>A predicate can also be a composition of terms.
<br>  pred = NOT pred
  pred = pred AND pred
  pred = pred OR pred
Copy<br>NOT, AND, OR are logical operators.<br>
For example,<br>NOT rental_rate &lt; 1
(NOT rental_rate &lt; 1) AND release_year = 2006
Copy<br>SELECT * FROM film WHERE rating="PG-13"
Copy<br>SQL is case insensitive.<br>
However, to make query readable, we write<br>
key words (like SELECT, FROM, etc.) in capital;<br>
attributes and tables in lower cases; and string constant in the original form.<br>In general, a basic query is in the form<br>SELECT a1,⋯,an FROM r WHERE P
Copy<br>where  are attributes; r is a table; and P is a predicate.]]></description><link>https://blog.allenygy.vip/database-management/mysql/basic-mysql.html</link><guid isPermaLink="false">Database-Management/MySQL/Basic-MySQL.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:56:02 GMT</pubDate></item><item><title><![CDATA[<a data-href="Aggregation" href="database-management/mysql/aggregation.html" class="internal-link" target="_self" rel="noopener">Aggregation</a>]]></title><description><![CDATA[ 
 <br><br>SELECT column_name(s), COUNT(*)
FROM table_name
GROUP BY column_name(s)
HAVING condition;
Copy<br>
<br>“Aggregation” means performing some operations on a group of objects.
<br>COUNT: count the value<br>
MAX: find the maximum value<br>
MIN: find the minimum value<br>
AVG: calculate the average value<br>
SUM: sum up the values<br><br>
<br>Suppose that we want to count the number of different languages.
<br>SELECT COUNT(*) FROM language
Copy<br>
<br>In this example, all tuples in the table “language” is considered as a group. The query counts the number of distinct objects in the group.<br>
After applying an aggregation function, the result of COUNT(*) is treated as an attribute.
<br><br>
<br>For example, find the number of films for each language. The resulting table has two columns, one for languages, one for the number of films.
<br>Only those films of the same language are in the same group (different language different group).<br>
Then, count the number within each group.<br>
<br>To achieve the grouping, we use GROUP BY.
<br>SELECT language_id, count(film_id) 
FROM film JOIN language USING(language_id) 
GROUP BY (language_id) 
Copy<br>
<br>To indicate the result of aggregation of each group, group by attributes are usually selected.
<br><br>
<br>
Sometimes we need condition checking before and after aggregation functions

<br>
For example, show the actors’ names and the number of Sci-Fi movies played by him/her if the number of Sci-Fi movies is more than 3

<br>SELECT actor_id,first_name,last_name,COUNT(film_id)
FROM actor JOIN film_actor USING (actor_id) 
    JOIN film USING(film_id) 
    JOIN film_category USING(film_id)
    JOIN category USING(category_id)
WHERE category.name='sci-fi'
GROUP BY actor_id
HAVING COUNT(film_id)&gt;3;
Copy<br>
<br>The query is executed in this sequence.
<br>
<br>Combine the tables in FROM clause
<br>Check the condition in WHERE clause
<br>Group tuples
<br>Aggregation function
<br>Check the condition in HAVING clause
<br>Output the selected attributes
<br><br>Assuming that every country has a city. Why the following query cannot find the number of countries?<br>SELECT COUNT(country_id)
FROM city
Copy<br>We only assume that every country has a city. But, a country may have multiple cites.<br>
Those countries will be over counted.<br>
We can use DISTINCT to remove duplications.<br>SELECT COUNT(DISTINCT country_id)
FROM city
Copy]]></description><link>https://blog.allenygy.vip/database-management/mysql/aggregation.html</link><guid isPermaLink="false">Database-Management/MySQL/Aggregation.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:55:53 GMT</pubDate></item><item><title><![CDATA[<a data-href="Advanced-SQL" href="database-management/mysql/advanced-sql.html" class="internal-link" target="_self" rel="noopener">Advanced-SQL</a>]]></title><description><![CDATA[ 
 <br><br>Constraints<br>
<br>Integrity Constraints
<br>Check Clauses
<br>Referential Integrity
<br>Keys and Referential Integrity
<br>Cascading actions in referential integrity
<br>Assertions
<br><br>Integrity constraints guard against accidental damage to the database, by ensuring that authorized changes to the database do not result in a loss of data consistency.<br>
<br>Example:

<br>gpa must be from 0.0 to 4.0


<br>ALTER TABLE STUDENT
ADD CONSTRAINT gpa_domain
CHECK(gpa&gt;=0.00 AND gpa&lt;=4.00)
Copy<br><br>Referential integrity ensures that a value that appears in one relation table for a given set of attributes must also appears in the corresponding set of attributes in the other relation table<br>关联删除<br>
关联更新<br>
<br>Example:
<br>CREATE TABLE student (
  …
  p_code INT(11),
  FOREIGN KEY (p_code) REFERENCES program(p_code),
  …
)

CREATE TABLE program (
  …
  p_code INT(11) NOT NULL,
  PRIMARY KEY (p_code),
  …
)
Copy<br>ALTER TABLE student
  ADD CONSTRAINT student_program 
    FOREIGN KEY (p_code) REFERENCES program(p_code) 
    ON DELETE CASCADE 
    ON UPDATE CASCADE
Copy<br>
<br>Alternative cascade actions can be:

<br>SET NULL and SET DEFAULT.


]]></description><link>https://blog.allenygy.vip/database-management/mysql/advanced-sql.html</link><guid isPermaLink="false">Database-Management/MySQL/Advanced-SQL.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:55:49 GMT</pubDate></item><item><title><![CDATA[<a data-tooltip-position="top" aria-label="Database-Management" data-href="Database-Management" href="database-management/database-management.html" class="internal-link" target="_self" rel="noopener">Database Management</a>]]></title><description><![CDATA[ 
 <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>]]></description><link>https://blog.allenygy.vip/database-management/database-management.html</link><guid isPermaLink="false">Database-Management/Database-Management.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:56:56 GMT</pubDate></item><item><title><![CDATA[<a data-href="DeepLearning" href="deeplearning/deeplearning.html" class="internal-link" target="_self" rel="noopener">DeepLearning</a>]]></title><description><![CDATA[ 
 <br>]]></description><link>https://blog.allenygy.vip/deeplearning/deeplearning.html</link><guid isPermaLink="false">DeepLearning/DeepLearning.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:58:16 GMT</pubDate></item><item><title><![CDATA[<a data-tooltip-position="top" aria-label="GraphNetwork" data-href="GraphNetwork" href="deeplearning/graphnetwork.html" class="internal-link" target="_self" rel="noopener">A Gentle Introduction to Graph Neural Networks</a> <sup data-footnote-id="fnref-1-7f91fca737931d34" class="footnote-ref" id="fnref-1-7f91fca737931d34"><a data-footref="[inline0" href="#fn-1-7f91fca737931d34" class="footnote-link" target="_self" rel="noopener">[1]</a></sup>]]></title><description><![CDATA[ 
 <br><br>
<br>
<br><a rel="noopener" class="external-link" href="https://distill.pub/2021/gnn-intro/" target="_blank">https://distill.pub/2021/gnn-intro/</a><a href="https://blog.allenygy.vip/about:blank#fnref-1-7f91fca737931d34" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
]]></description><link>https://blog.allenygy.vip/deeplearning/graphnetwork.html</link><guid isPermaLink="false">DeepLearning/GraphNetwork.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 17:24:10 GMT</pubDate></item><item><title><![CDATA[<a data-href="GradientDescent" href="deeplearning/gradientdescent.html" class="internal-link" target="_self" rel="noopener">GradientDescent</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Gradient Descent 梯度下降算法 GD
<br>Stochastic Gradient Descent 随机梯度下降 SGD
<br>Momentum 动量
<br>Adaptive learning 自适应学习 

<br>AdaGrad 
<br>RMSProp


<br>Momentum &amp; Adaptive learning

<br>Adam


]]></description><link>https://blog.allenygy.vip/deeplearning/gradientdescent.html</link><guid isPermaLink="false">DeepLearning/GradientDescent.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 17:23:55 GMT</pubDate></item><item><title><![CDATA[<a data-href="BackPropagation" href="deeplearning/backpropagation.html" class="internal-link" target="_self" rel="noopener">BackPropagation</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Back Propagation 反向传播算法 BP
<br>加速计算参数梯度值
<br>Computation Graphs 计算图 
]]></description><link>https://blog.allenygy.vip/deeplearning/backpropagation.html</link><guid isPermaLink="false">DeepLearning/BackPropagation.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 17:23:59 GMT</pubDate></item><item><title><![CDATA[<a data-href="ActivationFunction" href="deeplearning/activationfunction.html" class="internal-link" target="_self" rel="noopener">ActivationFunction</a>]]></title><description><![CDATA[ 
 <br><br>
<br>Activation Function 增加非线性表达
<br>饱和函数

<br> 
<br>导致梯度消失

<br>参数不会被更新


<br>sigmoid
<br>tanh


<br>非饱和函数

<br>Rectified Linear Unit 修正线性单元  RELU 

<br>解决梯度消失问题


<br>RELU  Leaky ReLU, Parametric ReLU, ...


]]></description><link>https://blog.allenygy.vip/deeplearning/activationfunction.html</link><guid isPermaLink="false">DeepLearning/ActivationFunction.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 17:24:03 GMT</pubDate></item><item><title><![CDATA[<a data-href="CET-6" href="english/cet-6.html" class="internal-link" target="_self" rel="noopener">CET-6</a>]]></title><description/></item><item><title><![CDATA[Archive]]></title><description><![CDATA[ 
 <br><br>
<br><a data-tooltip-position="top" aria-label="Algorithm/Algorithm.md" data-href="Algorithm/Algorithm.md" href="https://blog.allenygy.vip/algorithm/algorithm.html" class="internal-link" target="_self" rel="noopener">Algorithm</a>
<br><a data-tooltip-position="top" aria-label="DeepLearning/DeepLearning.md" data-href="DeepLearning/DeepLearning.md" href="https://blog.allenygy.vip/deeplearning/deeplearning.html" class="internal-link" target="_self" rel="noopener">DeepLearning</a>
<br><a data-tooltip-position="top" aria-label="Program/ProgramLanguage.md" data-href="Program/ProgramLanguage.md" href="https://blog.allenygy.vip/program/programlanguage.html" class="internal-link" target="_self" rel="noopener">ProgramLanguage</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Assignment/As4/Co-Assignment-4.md" data-href="Computer-Organization/Assignment/As4/Co-Assignment-4.md" href="https://blog.allenygy.vip/computer-organization/assignment/as4/co-assignment-4.html" class="internal-link" target="_self" rel="noopener">Co-Assignment-4</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Assignment/As3/CO-Assignment-3.md" data-href="Computer-Organization/Assignment/As3/CO-Assignment-3.md" href="https://blog.allenygy.vip/computer-organization/assignment/as3/co-assignment-3.html" class="internal-link" target="_self" rel="noopener">CO-Assignment-3</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Assignment/As2/Co-Assignment-2.md" data-href="Computer-Organization/Assignment/As2/Co-Assignment-2.md" href="https://blog.allenygy.vip/computer-organization/assignment/as2/co-assignment-2.html" class="internal-link" target="_self" rel="noopener">Co-Assignment-2</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Assignment/As1/Co-Assignment-1.md" data-href="Computer-Organization/Assignment/As1/Co-Assignment-1.md" href="https://blog.allenygy.vip/computer-organization/assignment/as1/co-assignment-1.html" class="internal-link" target="_self" rel="noopener">Co-Assignment-1</a>
<br><a data-tooltip-position="top" aria-label="Tools/Shell/Shell.md" data-href="Tools/Shell/Shell.md" href="https://blog.allenygy.vip/tools/shell/shell.html" class="internal-link" target="_self" rel="noopener">Shell</a>
<br><a data-tooltip-position="top" aria-label="Tools/Tools.md" data-href="Tools/Tools.md" href="https://blog.allenygy.vip/tools/tools.html" class="internal-link" target="_self" rel="noopener">Tools</a>
<br><a data-tooltip-position="top" aria-label="Tools/Git/Git-Introduction.md" data-href="Tools/Git/Git-Introduction.md" href="https://blog.allenygy.vip/tools/git/git-introduction.html" class="internal-link" target="_self" rel="noopener">Git-Introduction</a>
<br><a data-tooltip-position="top" aria-label="Tools/Git/Git-Remote-Repository.md" data-href="Tools/Git/Git-Remote-Repository.md" href="https://blog.allenygy.vip/tools/git/git-remote-repository.html" class="internal-link" target="_self" rel="noopener">Git-Remote-Repository</a>
<br><a data-tooltip-position="top" aria-label="Tools/Git/Git-Workflow-Model.md" data-href="Tools/Git/Git-Workflow-Model.md" href="https://blog.allenygy.vip/tools/git/git-workflow-model.html" class="internal-link" target="_self" rel="noopener">Git-Workflow-Model</a>
<br><a data-tooltip-position="top" aria-label="Tools/Docker/Docker.md" data-href="Tools/Docker/Docker.md" href="https://blog.allenygy.vip/tools/docker/docker.html" class="internal-link" target="_self" rel="noopener">Docker</a>
<br><a data-tooltip-position="top" aria-label="Tools/Git/Git-For-Beginners.md" data-href="Tools/Git/Git-For-Beginners.md" href="https://blog.allenygy.vip/tools/git/git-for-beginners.html" class="internal-link" target="_self" rel="noopener">Git-For-Beginners</a>
<br><a data-tooltip-position="top" aria-label="Tools/Conda/Conda.md" data-href="Tools/Conda/Conda.md" href="https://blog.allenygy.vip/tools/conda/conda.html" class="internal-link" target="_self" rel="noopener">Conda</a>
<br><a data-tooltip-position="top" aria-label="Research/ploidy/ploidy.md" data-href="Research/ploidy/ploidy.md" href="https://blog.allenygy.vip/research/ploidy/ploidy.html" class="internal-link" target="_self" rel="noopener">ploidy</a>
<br><a data-tooltip-position="top" aria-label="Research/calculatese.md" data-href="Research/calculatese.md" href="https://blog.allenygy.vip/research/calculatese.html" class="internal-link" target="_self" rel="noopener">calculatese</a>
<br><a data-tooltip-position="top" aria-label="Research/ploidy/ploidy-review.md" data-href="Research/ploidy/ploidy-review.md" href="https://blog.allenygy.vip/research/ploidy/ploidy-review.html" class="internal-link" target="_self" rel="noopener">ploidy-review</a>
<br><a data-tooltip-position="top" aria-label="Research/alphafold2.md" data-href="Research/alphafold2.md" href="https://blog.allenygy.vip/research/alphafold2.html" class="internal-link" target="_self" rel="noopener">alphafold2</a>
<br><a data-tooltip-position="top" aria-label="Research/bert.md" data-href="Research/bert.md" href="https://blog.allenygy.vip/research/bert.html" class="internal-link" target="_self" rel="noopener">bert</a>
<br><a data-tooltip-position="top" aria-label="Program/R/R-Data-Structure.md" data-href="Program/R/R-Data-Structure.md" href="https://blog.allenygy.vip/program/r/r-data-structure.html" class="internal-link" target="_self" rel="noopener">R-Data-Structure</a>
<br><a data-tooltip-position="top" aria-label="Tools/Regex/Regular-Expression.md" data-href="Tools/Regex/Regular-Expression.md" href="https://blog.allenygy.vip/tools/regex/regular-expression.html" class="internal-link" target="_self" rel="noopener">Regular-Expression</a>
<br><a data-tooltip-position="top" aria-label="Program/R/Basic-R.md" data-href="Program/R/Basic-R.md" href="https://blog.allenygy.vip/program/r/basic-r.html" class="internal-link" target="_self" rel="noopener">Basic-R</a>
<br><a data-tooltip-position="top" aria-label="Program/python/regularexpression.md" data-href="Program/python/regularexpression.md" href="https://blog.allenygy.vip/program/python/regularexpression.html" class="internal-link" target="_self" rel="noopener">regularexpression</a>
<br><a data-tooltip-position="top" aria-label="Program/python/python-exceptions.md" data-href="Program/python/python-exceptions.md" href="https://blog.allenygy.vip/program/python/python-exceptions.html" class="internal-link" target="_self" rel="noopener">python-exceptions</a>
<br><a data-tooltip-position="top" aria-label="Program/python/pythonbasic.md" data-href="Program/python/pythonbasic.md" href="https://blog.allenygy.vip/program/python/pythonbasic.html" class="internal-link" target="_self" rel="noopener">pythonbasic</a>
<br><a data-tooltip-position="top" aria-label="Program/python/pandas.md" data-href="Program/python/pandas.md" href="https://blog.allenygy.vip/program/python/pandas.html" class="internal-link" target="_self" rel="noopener">pandas</a>
<br><a data-tooltip-position="top" aria-label="Program/python/python-environment-management.md" data-href="Program/python/python-environment-management.md" href="https://blog.allenygy.vip/program/python/python-environment-management.html" class="internal-link" target="_self" rel="noopener">python-environment-management</a>
<br><a data-tooltip-position="top" aria-label="Program/python/matplotlib.md" data-href="Program/python/matplotlib.md" href="https://blog.allenygy.vip/program/python/matplotlib.html" class="internal-link" target="_self" rel="noopener">matplotlib</a>
<br><a data-tooltip-position="top" aria-label="Program/python/numpy.md" data-href="Program/python/numpy.md" href="https://blog.allenygy.vip/program/python/numpy.html" class="internal-link" target="_self" rel="noopener">numpy</a>
<br><a data-tooltip-position="top" aria-label="Program/python/beautifulsoup.md" data-href="Program/python/beautifulsoup.md" href="https://blog.allenygy.vip/program/python/beautifulsoup.html" class="internal-link" target="_self" rel="noopener">beautifulsoup</a>
<br><a data-tooltip-position="top" aria-label="Program/python/datetime.md" data-href="Program/python/datetime.md" href="https://blog.allenygy.vip/program/python/datetime.html" class="internal-link" target="_self" rel="noopener">datetime</a>
<br><a data-tooltip-position="top" aria-label="Program/Javascript/quick-start.md" data-href="Program/Javascript/quick-start.md" href="https://blog.allenygy.vip/program/javascript/quick-start.html" class="internal-link" target="_self" rel="noopener">quick-start</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Java-Introduction.md" data-href="Program/Java/Lecture/Java-Introduction.md" href="https://blog.allenygy.vip/program/java/lecture/java-introduction.html" class="internal-link" target="_self" rel="noopener">Java-Introduction</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Java-Programming-Essentials.md" data-href="Program/Java/Lecture/Java-Programming-Essentials.md" href="https://blog.allenygy.vip/program/java/lecture/java-programming-essentials.html" class="internal-link" target="_self" rel="noopener">Java-Programming-Essentials</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Unified-Modeling-Language.md" data-href="Program/Java/Lecture/Unified-Modeling-Language.md" href="https://blog.allenygy.vip/program/java/lecture/unified-modeling-language.html" class="internal-link" target="_self" rel="noopener">Unified-Modeling-Language</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Exception-Handling.md" data-href="Program/Java/Lecture/Exception-Handling.md" href="https://blog.allenygy.vip/program/java/lecture/exception-handling.html" class="internal-link" target="_self" rel="noopener">Exception-Handling</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Inheritance.md" data-href="Program/Java/Lecture/Inheritance.md" href="https://blog.allenygy.vip/program/java/lecture/inheritance.html" class="internal-link" target="_self" rel="noopener">Inheritance</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Array-and-Generics.md" data-href="Program/Java/Lecture/Array-and-Generics.md" href="https://blog.allenygy.vip/program/java/lecture/array-and-generics.html" class="internal-link" target="_self" rel="noopener">Array-and-Generics</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Creating-Java-Classes.md" data-href="Program/Java/Lecture/Creating-Java-Classes.md" href="https://blog.allenygy.vip/program/java/lecture/creating-java-classes.html" class="internal-link" target="_self" rel="noopener">Creating-Java-Classes</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Abstract-Methods-and-Classes-Interfaces.md" data-href="Program/Java/Lecture/Abstract-Methods-and-Classes-Interfaces.md" href="https://blog.allenygy.vip/program/java/lecture/abstract-methods-and-classes-interfaces.html" class="internal-link" target="_self" rel="noopener">Abstract-Methods-and-Classes-Interfaces</a>
<br><a data-tooltip-position="top" aria-label="Program/Cpp/Iota.md" data-href="Program/Cpp/Iota.md" href="https://blog.allenygy.vip/program/cpp/iota.html" class="internal-link" target="_self" rel="noopener">Iota</a>
<br><a data-tooltip-position="top" aria-label="Program/Cpp/Priority-Queue.md" data-href="Program/Cpp/Priority-Queue.md" href="https://blog.allenygy.vip/program/cpp/priority-queue.html" class="internal-link" target="_self" rel="noopener">Priority-Queue</a>
<br><a data-tooltip-position="top" aria-label="Program/Cpp/Vector.md" data-href="Program/Cpp/Vector.md" href="https://blog.allenygy.vip/program/cpp/vector.html" class="internal-link" target="_self" rel="noopener">Vector</a>
<br><a data-tooltip-position="top" aria-label="Program/Cpp/Algorithm-Library.md" data-href="Program/Cpp/Algorithm-Library.md" href="https://blog.allenygy.vip/program/cpp/algorithm-library.html" class="internal-link" target="_self" rel="noopener">Algorithm-Library</a>
<br><a data-tooltip-position="top" aria-label="Program/Cpp/Map.md" data-href="Program/Cpp/Map.md" href="https://blog.allenygy.vip/program/cpp/map.html" class="internal-link" target="_self" rel="noopener">Map</a>
<br><a data-tooltip-position="top" aria-label="Program/C/Macro.md" data-href="Program/C/Macro.md" href="https://blog.allenygy.vip/program/c/macro.html" class="internal-link" target="_self" rel="noopener">Macro</a>
<br><a data-tooltip-position="top" aria-label="Program/C/Multithreads.md" data-href="Program/C/Multithreads.md" href="https://blog.allenygy.vip/program/c/multithreads.html" class="internal-link" target="_self" rel="noopener">Multithreads</a>
<br><a data-tooltip-position="top" aria-label="Program/C/Pointers.md" data-href="Program/C/Pointers.md" href="https://blog.allenygy.vip/program/c/pointers.html" class="internal-link" target="_self" rel="noopener">Pointers</a>
<br><a data-tooltip-position="top" aria-label="Program/C/fileoperation.md" data-href="Program/C/fileoperation.md" href="https://blog.allenygy.vip/program/c/fileoperation.html" class="internal-link" target="_self" rel="noopener">fileoperation</a>
<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Poisson-Distribution.md" data-href="Math/Probability-Statistics/Poisson-Distribution.md" href="https://blog.allenygy.vip/math/probability-statistics/poisson-distribution.html" class="internal-link" target="_self" rel="noopener">Poisson-Distribution</a>
<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Probability-Theory.md" data-href="Math/Probability-Statistics/Probability-Theory.md" href="https://blog.allenygy.vip/math/probability-statistics/probability-theory.html" class="internal-link" target="_self" rel="noopener">Probability-Theory</a>
<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Hypothesis-Testing-Two-Population.md" data-href="Math/Probability-Statistics/Hypothesis-Testing-Two-Population.md" href="https://blog.allenygy.vip/math/probability-statistics/hypothesis-testing-two-population.html" class="internal-link" target="_self" rel="noopener">Hypothesis-Testing-Two-Population</a>
<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Hypothesis-Testing-Single-Population.md" data-href="Math/Probability-Statistics/Hypothesis-Testing-Single-Population.md" href="https://blog.allenygy.vip/math/probability-statistics/hypothesis-testing-single-population.html" class="internal-link" target="_self" rel="noopener">Hypothesis-Testing-Single-Population</a>
<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Chi-Square-Tests.md" data-href="Math/Probability-Statistics/Chi-Square-Tests.md" href="https://blog.allenygy.vip/math/probability-statistics/chi-square-tests.html" class="internal-link" target="_self" rel="noopener">Chi-Square-Tests</a>
<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Confidence-Interval.md" data-href="Math/Probability-Statistics/Confidence-Interval.md" href="https://blog.allenygy.vip/math/probability-statistics/confidence-interval.html" class="internal-link" target="_self" rel="noopener">Confidence-Interval</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Judgment.md" data-href="Math/Linear-Algebra/Judgment.md" href="https://blog.allenygy.vip/math/linear-algebra/judgment.html" class="internal-link" target="_self" rel="noopener">Judgment</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Vector-Space.md" data-href="Math/Linear-Algebra/Vector-Space.md" href="https://blog.allenygy.vip/math/linear-algebra/vector-space.html" class="internal-link" target="_self" rel="noopener">Vector-Space</a>
<br><a data-tooltip-position="top" aria-label="Math/Math.md" data-href="Math/Math.md" href="https://blog.allenygy.vip/math/math.html" class="internal-link" target="_self" rel="noopener">Math</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Matrix-Operation.md" data-href="Math/Linear-Algebra/Matrix-Operation.md" href="https://blog.allenygy.vip/math/linear-algebra/matrix-operation.html" class="internal-link" target="_self" rel="noopener">Matrix-Operation</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Orthogonality.md" data-href="Math/Linear-Algebra/Orthogonality.md" href="https://blog.allenygy.vip/math/linear-algebra/orthogonality.html" class="internal-link" target="_self" rel="noopener">Orthogonality</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Product.md" data-href="Math/Linear-Algebra/Product.md" href="https://blog.allenygy.vip/math/linear-algebra/product.html" class="internal-link" target="_self" rel="noopener">Product</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Linear-Transformations.md" data-href="Math/Linear-Algebra/Linear-Transformations.md" href="https://blog.allenygy.vip/math/linear-algebra/linear-transformations.html" class="internal-link" target="_self" rel="noopener">Linear-Transformations</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Eigenvalues-and-Eigenvectors.md" data-href="Math/Linear-Algebra/Eigenvalues-and-Eigenvectors.md" href="https://blog.allenygy.vip/math/linear-algebra/eigenvalues-and-eigenvectors.html" class="internal-link" target="_self" rel="noopener">Eigenvalues-and-Eigenvectors</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/sets-and-n-tuple.md" data-href="Math/Discrete-Structure/lecture/sets-and-n-tuple.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/sets-and-n-tuple.html" class="internal-link" target="_self" rel="noopener">sets-and-n-tuple</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/tree.md" data-href="Math/Discrete-Structure/lecture/tree.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/tree.html" class="internal-link" target="_self" rel="noopener">tree</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/propositional-logic.md" data-href="Math/Discrete-Structure/lecture/propositional-logic.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/propositional-logic.html" class="internal-link" target="_self" rel="noopener">propositional-logic</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/representing-graph-and-connectivity.md" data-href="Math/Discrete-Structure/lecture/representing-graph-and-connectivity.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/representing-graph-and-connectivity.html" class="internal-link" target="_self" rel="noopener">representing-graph-and-connectivity</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/relation.md" data-href="Math/Discrete-Structure/lecture/relation.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/relation.html" class="internal-link" target="_self" rel="noopener">relation</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/logic-circuits.md" data-href="Math/Discrete-Structure/lecture/logic-circuits.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/logic-circuits.html" class="internal-link" target="_self" rel="noopener">logic-circuits</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/propositional-equivalence.md" data-href="Math/Discrete-Structure/lecture/propositional-equivalence.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/propositional-equivalence.html" class="internal-link" target="_self" rel="noopener">propositional-equivalence</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/counting-principles.md" data-href="Math/Discrete-Structure/lecture/counting-principles.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/counting-principles.html" class="internal-link" target="_self" rel="noopener">counting-principles</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/functions-sequence-and-summations.md" data-href="Math/Discrete-Structure/lecture/functions-sequence-and-summations.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/functions-sequence-and-summations.html" class="internal-link" target="_self" rel="noopener">functions-sequence-and-summations</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/graph-theory.md" data-href="Math/Discrete-Structure/lecture/graph-theory.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/graph-theory.html" class="internal-link" target="_self" rel="noopener">graph-theory</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/boolean-expressions.md" data-href="Math/Discrete-Structure/lecture/boolean-expressions.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/boolean-expressions.html" class="internal-link" target="_self" rel="noopener">boolean-expressions</a>
<br><a data-tooltip-position="top" aria-label="Fix-Income/Fixed-Income-Overview.md" data-href="Fix-Income/Fixed-Income-Overview.md" href="https://blog.allenygy.vip/fix-income/fixed-income-overview.html" class="internal-link" target="_self" rel="noopener">Fixed-Income-Overview</a>
<br><a data-tooltip-position="top" aria-label="Fix-Income/珠海市经济产业分析.md" data-href="Fix-Income/珠海市经济产业分析.md" href="https://blog.allenygy.vip/fix-income/珠海市经济产业分析.html" class="internal-link" target="_self" rel="noopener">珠海市经济产业分析</a>
<br><a data-tooltip-position="top" aria-label="DeepLearning/GraphNetwork.md" data-href="DeepLearning/GraphNetwork.md" href="https://blog.allenygy.vip/deeplearning/graphnetwork.html" class="internal-link" target="_self" rel="noopener">GraphNetwork</a>
<br><a data-tooltip-position="top" aria-label="English/CET-6.md" data-href="English/CET-6.md" href="https://blog.allenygy.vip/english/cet-6.html" class="internal-link" target="_self" rel="noopener">CET-6</a>
<br><a data-tooltip-position="top" aria-label="DeepLearning/ActivationFunction.md" data-href="DeepLearning/ActivationFunction.md" href="https://blog.allenygy.vip/deeplearning/activationfunction.html" class="internal-link" target="_self" rel="noopener">ActivationFunction</a>
<br><a data-tooltip-position="top" aria-label="DeepLearning/BackPropagation.md" data-href="DeepLearning/BackPropagation.md" href="https://blog.allenygy.vip/deeplearning/backpropagation.html" class="internal-link" target="_self" rel="noopener">BackPropagation</a>
<br><a data-tooltip-position="top" aria-label="DeepLearning/GradientDescent.md" data-href="DeepLearning/GradientDescent.md" href="https://blog.allenygy.vip/deeplearning/gradientdescent.html" class="internal-link" target="_self" rel="noopener">GradientDescent</a>
<br><a data-tooltip-position="top" aria-label="Data-Analysis/Data-Analysis.md" data-href="Data-Analysis/Data-Analysis.md" href="https://blog.allenygy.vip/data-analysis/data-analysis.html" class="internal-link" target="_self" rel="noopener">Data-Analysis</a>
<br><a data-tooltip-position="top" aria-label="Data-Analysis/HODA/Hans-On-Data-Analysis-For-Everyone.md" data-href="Data-Analysis/HODA/Hans-On-Data-Analysis-For-Everyone.md" href="https://blog.allenygy.vip/data-analysis/hoda/hans-on-data-analysis-for-everyone.html" class="internal-link" target="_self" rel="noopener">Hans-On-Data-Analysis-For-Everyone</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Null-Subquery.md" data-href="Database-Management/MySQL/Null-Subquery.md" href="https://blog.allenygy.vip/database-management/mysql/null-subquery.html" class="internal-link" target="_self" rel="noopener">Null-Subquery</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Set-Operation-&amp;-Where-Subquery.md" data-href="Database-Management/MySQL/Set-Operation-&amp;-Where-Subquery.md" href="https://blog.allenygy.vip/database-management/mysql/set-operation-&amp;-where-subquery.html" class="internal-link" target="_self" rel="noopener">Set-Operation-&amp;-Where-Subquery</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Data-Modification.md" data-href="Database-Management/MySQL/Data-Modification.md" href="https://blog.allenygy.vip/database-management/mysql/data-modification.html" class="internal-link" target="_self" rel="noopener">Data-Modification</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Division-and-Correlated-Subquery.md" data-href="Database-Management/MySQL/Division-and-Correlated-Subquery.md" href="https://blog.allenygy.vip/database-management/mysql/division-and-correlated-subquery.html" class="internal-link" target="_self" rel="noopener">Division-and-Correlated-Subquery</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Join.md" data-href="Database-Management/MySQL/Join.md" href="https://blog.allenygy.vip/database-management/mysql/join.html" class="internal-link" target="_self" rel="noopener">Join</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Basic-MySQL.md" data-href="Database-Management/MySQL/Basic-MySQL.md" href="https://blog.allenygy.vip/database-management/mysql/basic-mysql.html" class="internal-link" target="_self" rel="noopener">Basic-MySQL</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Cross-table-Query.md" data-href="Database-Management/MySQL/Cross-table-Query.md" href="https://blog.allenygy.vip/database-management/mysql/cross-table-query.html" class="internal-link" target="_self" rel="noopener">Cross-table-Query</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Data-Definition.md" data-href="Database-Management/MySQL/Data-Definition.md" href="https://blog.allenygy.vip/database-management/mysql/data-definition.html" class="internal-link" target="_self" rel="noopener">Data-Definition</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Advanced-SQL.md" data-href="Database-Management/MySQL/Advanced-SQL.md" href="https://blog.allenygy.vip/database-management/mysql/advanced-sql.html" class="internal-link" target="_self" rel="noopener">Advanced-SQL</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Aggregation.md" data-href="Database-Management/MySQL/Aggregation.md" href="https://blog.allenygy.vip/database-management/mysql/aggregation.html" class="internal-link" target="_self" rel="noopener">Aggregation</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Relational-Database-Design-BCNF.md" data-href="Database-Management/Lecture/Relational-Database-Design-BCNF.md" href="https://blog.allenygy.vip/database-management/lecture/relational-database-design-bcnf.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-BCNF</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Relational-Database-Design-Functional-Dependency.md" data-href="Database-Management/Lecture/Relational-Database-Design-Functional-Dependency.md" href="https://blog.allenygy.vip/database-management/lecture/relational-database-design-functional-dependency.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-Functional-Dependency</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Relational-Database-Design-Purpose-&amp;-First-Normal-Form.md" data-href="Database-Management/Lecture/Relational-Database-Design-Purpose-&amp;-First-Normal-Form.md" href="https://blog.allenygy.vip/database-management/lecture/relational-database-design-purpose-&amp;-first-normal-form.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-Purpose-&amp;-First-Normal-Form</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Logical-Design.md" data-href="Database-Management/Lecture/Logical-Design.md" href="https://blog.allenygy.vip/database-management/lecture/logical-design.html" class="internal-link" target="_self" rel="noopener">Logical-Design</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/NormalForm.md" data-href="Database-Management/Lecture/NormalForm.md" href="https://blog.allenygy.vip/database-management/lecture/normalform.html" class="internal-link" target="_self" rel="noopener">NormalForm</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Relational-Database-Design-3rd-Normal-Form.md" data-href="Database-Management/Lecture/Relational-Database-Design-3rd-Normal-Form.md" href="https://blog.allenygy.vip/database-management/lecture/relational-database-design-3rd-normal-form.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-3rd-Normal-Form</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Entity-Relationship-Model-Extended-Features.md" data-href="Database-Management/Lecture/Entity-Relationship-Model-Extended-Features.md" href="https://blog.allenygy.vip/database-management/lecture/entity-relationship-model-extended-features.html" class="internal-link" target="_self" rel="noopener">Entity-Relationship-Model-Extended-Features</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Entity-Relationship-Model-Modeling.md" data-href="Database-Management/Lecture/Entity-Relationship-Model-Modeling.md" href="https://blog.allenygy.vip/database-management/lecture/entity-relationship-model-modeling.html" class="internal-link" target="_self" rel="noopener">Entity-Relationship-Model-Modeling</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Key-Concept.md" data-href="Database-Management/Lecture/Key-Concept.md" href="https://blog.allenygy.vip/database-management/lecture/key-concept.html" class="internal-link" target="_self" rel="noopener">Key-Concept</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Design-Issues.md" data-href="Database-Management/Lecture/Design-Issues.md" href="https://blog.allenygy.vip/database-management/lecture/design-issues.html" class="internal-link" target="_self" rel="noopener">Design-Issues</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Entity-Relationship-Model-Constraints.md" data-href="Database-Management/Lecture/Entity-Relationship-Model-Constraints.md" href="https://blog.allenygy.vip/database-management/lecture/entity-relationship-model-constraints.html" class="internal-link" target="_self" rel="noopener">Entity-Relationship-Model-Constraints</a>
<br><a data-tooltip-position="top" aria-label="Contest/Leetcode/Weekly-Contest-402.md" data-href="Contest/Leetcode/Weekly-Contest-402.md" href="https://blog.allenygy.vip/contest/leetcode/weekly-contest-402.html" class="internal-link" target="_self" rel="noopener">Weekly-Contest-402</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Database-Management.md" data-href="Database-Management/Database-Management.md" href="https://blog.allenygy.vip/database-management/database-management.html" class="internal-link" target="_self" rel="noopener">Database-Management</a>
<br><a data-tooltip-position="top" aria-label="Contest/Leetcode/Biweekly-Contest-122.md" data-href="Contest/Leetcode/Biweekly-Contest-122.md" href="https://blog.allenygy.vip/contest/leetcode/biweekly-contest-122.html" class="internal-link" target="_self" rel="noopener">Biweekly-Contest-122</a>
<br><a data-tooltip-position="top" aria-label="Contest/Leetcode/Biweekly-Contest-123.md" data-href="Contest/Leetcode/Biweekly-Contest-123.md" href="https://blog.allenygy.vip/contest/leetcode/biweekly-contest-123.html" class="internal-link" target="_self" rel="noopener">Biweekly-Contest-123</a>
<br><a data-tooltip-position="top" aria-label="Contest/Leetcode/Weekly-Contest-381.md" data-href="Contest/Leetcode/Weekly-Contest-381.md" href="https://blog.allenygy.vip/contest/leetcode/weekly-contest-381.html" class="internal-link" target="_self" rel="noopener">Weekly-Contest-381</a>
<br><a data-tooltip-position="top" aria-label="Contest/Lanqiao/Train-2.md" data-href="Contest/Lanqiao/Train-2.md" href="https://blog.allenygy.vip/contest/lanqiao/train-2.html" class="internal-link" target="_self" rel="noopener">Train-2</a>
<br><a data-tooltip-position="top" aria-label="Contest/Contest-Overview.md" data-href="Contest/Contest-Overview.md" href="https://blog.allenygy.vip/contest/contest-overview.html" class="internal-link" target="_self" rel="noopener">Contest-Overview</a>
<br><a data-tooltip-position="top" aria-label="Contest/Lanqiao/Train-1.md" data-href="Contest/Lanqiao/Train-1.md" href="https://blog.allenygy.vip/contest/lanqiao/train-1.html" class="internal-link" target="_self" rel="noopener">Train-1</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/What-is-a-Computer.md" data-href="Computer-Organization/Lecture/What-is-a-Computer.md" href="https://blog.allenygy.vip/computer-organization/lecture/what-is-a-computer.html" class="internal-link" target="_self" rel="noopener">What-is-a-Computer</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/Microarchitecture.md" data-href="Computer-Organization/Lecture/Microarchitecture.md" href="https://blog.allenygy.vip/computer-organization/lecture/microarchitecture.html" class="internal-link" target="_self" rel="noopener">Microarchitecture</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/From-Machine-Language-to-Assembly-Language.md" data-href="Computer-Organization/Lecture/From-Machine-Language-to-Assembly-Language.md" href="https://blog.allenygy.vip/computer-organization/lecture/from-machine-language-to-assembly-language.html" class="internal-link" target="_self" rel="noopener">From-Machine-Language-to-Assembly-Language</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/From-Transistors-to-Gates.md" data-href="Computer-Organization/Lecture/From-Transistors-to-Gates.md" href="https://blog.allenygy.vip/computer-organization/lecture/from-transistors-to-gates.html" class="internal-link" target="_self" rel="noopener">From-Transistors-to-Gates</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/ISA.md" data-href="Computer-Organization/Lecture/ISA.md" href="https://blog.allenygy.vip/computer-organization/lecture/isa.html" class="internal-link" target="_self" rel="noopener">ISA</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/From-Gates-to-Circuits-I-Combinational-Circuits.md" data-href="Computer-Organization/Lecture/From-Gates-to-Circuits-I-Combinational-Circuits.md" href="https://blog.allenygy.vip/computer-organization/lecture/from-gates-to-circuits-i-combinational-circuits.html" class="internal-link" target="_self" rel="noopener">From-Gates-to-Circuits-I-Combinational-Circuits</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/From-Gates-to-Circuits-II-Sequential-Circuits.md" data-href="Computer-Organization/Lecture/From-Gates-to-Circuits-II-Sequential-Circuits.md" href="https://blog.allenygy.vip/computer-organization/lecture/from-gates-to-circuits-ii-sequential-circuits.html" class="internal-link" target="_self" rel="noopener">From-Gates-to-Circuits-II-Sequential-Circuits</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/Circuit-Design.md" data-href="Computer-Organization/Lecture/Circuit-Design.md" href="https://blog.allenygy.vip/computer-organization/lecture/circuit-design.html" class="internal-link" target="_self" rel="noopener">Circuit-Design</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/Finite-State-Machine.md" data-href="Computer-Organization/Lecture/Finite-State-Machine.md" href="https://blog.allenygy.vip/computer-organization/lecture/finite-state-machine.html" class="internal-link" target="_self" rel="noopener">Finite-State-Machine</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/Bits-Data-Representation-and-Manipulation.md" data-href="Computer-Organization/Lecture/Bits-Data-Representation-and-Manipulation.md" href="https://blog.allenygy.vip/computer-organization/lecture/bits-data-representation-and-manipulation.html" class="internal-link" target="_self" rel="noopener">Bits-Data-Representation-and-Manipulation</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/Boolean-Algebra-from-Bits-to-Logic.md" data-href="Computer-Organization/Lecture/Boolean-Algebra-from-Bits-to-Logic.md" href="https://blog.allenygy.vip/computer-organization/lecture/boolean-algebra-from-bits-to-logic.html" class="internal-link" target="_self" rel="noopener">Boolean-Algebra-from-Bits-to-Logic</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab6.md" data-href="Computer-Organization/Lab/Lab6.md" href="https://blog.allenygy.vip/computer-organization/lab/lab6.html" class="internal-link" target="_self" rel="noopener">Lab6</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab7.md" data-href="Computer-Organization/Lab/Lab7.md" href="https://blog.allenygy.vip/computer-organization/lab/lab7.html" class="internal-link" target="_self" rel="noopener">Lab7</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab8.md" data-href="Computer-Organization/Lab/Lab8.md" href="https://blog.allenygy.vip/computer-organization/lab/lab8.html" class="internal-link" target="_self" rel="noopener">Lab8</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab3.md" data-href="Computer-Organization/Lab/Lab3.md" href="https://blog.allenygy.vip/computer-organization/lab/lab3.html" class="internal-link" target="_self" rel="noopener">Lab3</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab5.md" data-href="Computer-Organization/Lab/Lab5.md" href="https://blog.allenygy.vip/computer-organization/lab/lab5.html" class="internal-link" target="_self" rel="noopener">Lab5</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab2.md" data-href="Computer-Organization/Lab/Lab2.md" href="https://blog.allenygy.vip/computer-organization/lab/lab2.html" class="internal-link" target="_self" rel="noopener">Lab2</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Computer-Organization.md" data-href="Computer-Organization/Computer-Organization.md" href="https://blog.allenygy.vip/computer-organization/computer-organization.html" class="internal-link" target="_self" rel="noopener">Computer-Organization</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/String/Tire-Tree.md" data-href="Algorithm/String/Tire-Tree.md" href="https://blog.allenygy.vip/algorithm/string/tire-tree.html" class="internal-link" target="_self" rel="noopener">Tire-Tree</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/String/Z-Function.md" data-href="Algorithm/String/Z-Function.md" href="https://blog.allenygy.vip/algorithm/string/z-function.html" class="internal-link" target="_self" rel="noopener">Z-Function</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/String/Manacher-Algorithm.md" data-href="Algorithm/String/Manacher-Algorithm.md" href="https://blog.allenygy.vip/algorithm/string/manacher-algorithm.html" class="internal-link" target="_self" rel="noopener">Manacher-Algorithm</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/String/String-Overview.md" data-href="Algorithm/String/String-Overview.md" href="https://blog.allenygy.vip/algorithm/string/string-overview.html" class="internal-link" target="_self" rel="noopener">String-Overview</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/String/Aho-Corasick.md" data-href="Algorithm/String/Aho-Corasick.md" href="https://blog.allenygy.vip/algorithm/string/aho-corasick.html" class="internal-link" target="_self" rel="noopener">Aho-Corasick</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/String/KMP.md" data-href="Algorithm/String/KMP.md" href="https://blog.allenygy.vip/algorithm/string/kmp.html" class="internal-link" target="_self" rel="noopener">KMP</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/Recursion/递归-二叉树.md" data-href="Algorithm/Recursion/递归-二叉树.md" href="https://blog.allenygy.vip/algorithm/recursion/递归-二叉树.html" class="internal-link" target="_self" rel="noopener">递归-二叉树</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/Recursion/递归.md" data-href="Algorithm/Recursion/递归.md" href="https://blog.allenygy.vip/algorithm/recursion/递归.html" class="internal-link" target="_self" rel="noopener">递归</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/Graph/Graph-Overview.md" data-href="Algorithm/Graph/Graph-Overview.md" href="https://blog.allenygy.vip/algorithm/graph/graph-overview.html" class="internal-link" target="_self" rel="noopener">Graph-Overview</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/NumberTheory/Prime-Sieve.md" data-href="Algorithm/NumberTheory/Prime-Sieve.md" href="https://blog.allenygy.vip/algorithm/numbertheory/prime-sieve.html" class="internal-link" target="_self" rel="noopener">Prime-Sieve</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/Recursion/递推.md" data-href="Algorithm/Recursion/递推.md" href="https://blog.allenygy.vip/algorithm/recursion/递推.html" class="internal-link" target="_self" rel="noopener">递推</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DSA/Fenwick.md" data-href="Algorithm/DSA/Fenwick.md" href="https://blog.allenygy.vip/algorithm/dsa/fenwick.html" class="internal-link" target="_self" rel="noopener">Fenwick</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DSA/BinaryTree.md" data-href="Algorithm/DSA/BinaryTree.md" href="https://blog.allenygy.vip/algorithm/dsa/binarytree.html" class="internal-link" target="_self" rel="noopener">BinaryTree</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Tutorial/Tutorial-1.md" data-href="Algorithm/DAA/Tutorial/Tutorial-1.md" href="https://blog.allenygy.vip/algorithm/daa/tutorial/tutorial-1.html" class="internal-link" target="_self" rel="noopener">Tutorial-1</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DSA/AVL.md" data-href="Algorithm/DSA/AVL.md" href="https://blog.allenygy.vip/algorithm/dsa/avl.html" class="internal-link" target="_self" rel="noopener">AVL</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DSA/B+Tree.md" data-href="Algorithm/DSA/B+Tree.md" href="https://blog.allenygy.vip/algorithm/dsa/b+tree.html" class="internal-link" target="_self" rel="noopener">B+Tree</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Union-Find.md" data-href="Algorithm/DAA/Algorithm/Union-Find.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/union-find.html" class="internal-link" target="_self" rel="noopener">Union-Find</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Graph-algorithm.md" data-href="Algorithm/DAA/Algorithm/Graph-algorithm.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/graph-algorithm.html" class="internal-link" target="_self" rel="noopener">Graph-algorithm</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Sort.md" data-href="Algorithm/DAA/Algorithm/Sort.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/sort.html" class="internal-link" target="_self" rel="noopener">Sort</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Divide-and-Conquer.md" data-href="Algorithm/DAA/Algorithm/Divide-and-Conquer.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/divide-and-conquer.html" class="internal-link" target="_self" rel="noopener">Divide-and-Conquer</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Enumeration-subset.md" data-href="Algorithm/DAA/Algorithm/Enumeration-subset.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/enumeration-subset.html" class="internal-link" target="_self" rel="noopener">Enumeration-subset</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Enumeration.md" data-href="Algorithm/DAA/Algorithm/Enumeration.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/enumeration.html" class="internal-link" target="_self" rel="noopener">Enumeration</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/BasicAlgorithm/SparceTable.md" data-href="Algorithm/BasicAlgorithm/SparceTable.md" href="https://blog.allenygy.vip/algorithm/basicalgorithm/sparcetable.html" class="internal-link" target="_self" rel="noopener">SparceTable</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/BasicAlgorithm/Basic-Algorithm-overview.md" data-href="Algorithm/BasicAlgorithm/Basic-Algorithm-overview.md" href="https://blog.allenygy.vip/algorithm/basicalgorithm/basic-algorithm-overview.html" class="internal-link" target="_self" rel="noopener">Basic-Algorithm-overview</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/BasicAlgorithm/Discretization.md" data-href="Algorithm/BasicAlgorithm/Discretization.md" href="https://blog.allenygy.vip/algorithm/basicalgorithm/discretization.html" class="internal-link" target="_self" rel="noopener">Discretization</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/BasicAlgorithm/SlidingWindow.md" data-href="Algorithm/BasicAlgorithm/SlidingWindow.md" href="https://blog.allenygy.vip/algorithm/basicalgorithm/slidingwindow.html" class="internal-link" target="_self" rel="noopener">SlidingWindow</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Assignment/DBM-Assignment-2.md" data-href="Database-Management/Assignment/DBM-Assignment-2.md" href="https://blog.allenygy.vip/database-management/assignment/dbm-assignment-2.html" class="internal-link" target="_self" rel="noopener">DBM-Assignment-2</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Assignment/DBM-Assignment-3.md" data-href="Database-Management/Assignment/DBM-Assignment-3.md" href="https://blog.allenygy.vip/database-management/assignment/dbm-assignment-3.html" class="internal-link" target="_self" rel="noopener">DBM-Assignment-3</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Assignment/DBM-Assignment-1.md" data-href="Database-Management/Assignment/DBM-Assignment-1.md" href="https://blog.allenygy.vip/database-management/assignment/dbm-assignment-1.html" class="internal-link" target="_self" rel="noopener">DBM-Assignment-1</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DSA/Assignment/dsa-assignment-1.md" data-href="Algorithm/DSA/Assignment/dsa-assignment-1.md" href="https://blog.allenygy.vip/algorithm/dsa/assignment/dsa-assignment-1.html" class="internal-link" target="_self" rel="noopener">dsa-assignment-1</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DSA/Assignment/dsa-assignment-2.md" data-href="Algorithm/DSA/Assignment/dsa-assignment-2.md" href="https://blog.allenygy.vip/algorithm/dsa/assignment/dsa-assignment-2.html" class="internal-link" target="_self" rel="noopener">dsa-assignment-2</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Assignment/DAA-Assignment-2.md" data-href="Algorithm/DAA/Assignment/DAA-Assignment-2.md" href="https://blog.allenygy.vip/algorithm/daa/assignment/daa-assignment-2.html" class="internal-link" target="_self" rel="noopener">DAA-Assignment-2</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DSA/Assignment/written-assignment-am.md" data-href="Algorithm/DSA/Assignment/written-assignment-am.md" href="https://blog.allenygy.vip/algorithm/dsa/assignment/written-assignment-am.html" class="internal-link" target="_self" rel="noopener">written-assignment-am</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Assignment/DAA-Programming-Assignment.md" data-href="Algorithm/DAA/Assignment/DAA-Programming-Assignment.md" href="https://blog.allenygy.vip/algorithm/daa/assignment/daa-programming-assignment.html" class="internal-link" target="_self" rel="noopener">DAA-Programming-Assignment</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-3.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-3.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-3.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-3</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-7.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-7.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-7.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-7</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-8.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-8.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-8.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-8</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-tutorial.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-tutorial.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-tutorial.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-tutorial</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-2.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-2.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-2.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-2</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-5.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-5.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-5.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-5</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-6.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-6.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-6.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-6</a>
<br><br>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Assignment/DAA-Assignment-0.md" data-href="Algorithm/DAA/Assignment/DAA-Assignment-0.md" href="https://blog.allenygy.vip/algorithm/daa/assignment/daa-assignment-0.html" class="internal-link" target="_self" rel="noopener">DAA-Assignment-0</a>
<br><br>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Assignment/DAA-Assignment-1.md" data-href="Algorithm/DAA/Assignment/DAA-Assignment-1.md" href="https://blog.allenygy.vip/algorithm/daa/assignment/daa-assignment-1.html" class="internal-link" target="_self" rel="noopener">DAA-Assignment-1</a>
]]></description><link>https://blog.allenygy.vip/archive.html</link><guid isPermaLink="false">Archive.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 07:00:36 GMT</pubDate></item><item><title><![CDATA[Class]]></title><description><![CDATA[ 
 <br>
<br>


<br>
<a data-tooltip-position="top" aria-label="Algorithm/Algorithm.md" data-href="Algorithm/Algorithm.md" href="https://blog.allenygy.vip/algorithm/algorithm.html" class="internal-link" target="_self" rel="noopener">Algorithm</a>

<br>


<br><a data-tooltip-position="top" aria-label="Algorithm/BasicAlgorithm/SparceTable.md" data-href="Algorithm/BasicAlgorithm/SparceTable.md" href="https://blog.allenygy.vip/algorithm/basicalgorithm/sparcetable.html" class="internal-link" target="_self" rel="noopener">SparceTable</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/BasicAlgorithm/Basic-Algorithm-overview.md" data-href="Algorithm/BasicAlgorithm/Basic-Algorithm-overview.md" href="https://blog.allenygy.vip/algorithm/basicalgorithm/basic-algorithm-overview.html" class="internal-link" target="_self" rel="noopener">Basic-Algorithm-overview</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/BasicAlgorithm/Discretization.md" data-href="Algorithm/BasicAlgorithm/Discretization.md" href="https://blog.allenygy.vip/algorithm/basicalgorithm/discretization.html" class="internal-link" target="_self" rel="noopener">Discretization</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/BasicAlgorithm/SlidingWindow.md" data-href="Algorithm/BasicAlgorithm/SlidingWindow.md" href="https://blog.allenygy.vip/algorithm/basicalgorithm/slidingwindow.html" class="internal-link" target="_self" rel="noopener">SlidingWindow</a>


<br>


<br>
<a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Union-Find.md" data-href="Algorithm/DAA/Algorithm/Union-Find.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/union-find.html" class="internal-link" target="_self" rel="noopener">Union-Find</a>

<br>
<a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Graph-algorithm.md" data-href="Algorithm/DAA/Algorithm/Graph-algorithm.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/graph-algorithm.html" class="internal-link" target="_self" rel="noopener">Graph-algorithm</a>

<br>
<a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Sort.md" data-href="Algorithm/DAA/Algorithm/Sort.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/sort.html" class="internal-link" target="_self" rel="noopener">Sort</a>

<br>
<a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Divide-and-Conquer.md" data-href="Algorithm/DAA/Algorithm/Divide-and-Conquer.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/divide-and-conquer.html" class="internal-link" target="_self" rel="noopener">Divide-and-Conquer</a>

<br>
<a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Enumeration-subset.md" data-href="Algorithm/DAA/Algorithm/Enumeration-subset.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/enumeration-subset.html" class="internal-link" target="_self" rel="noopener">Enumeration-subset</a>

<br>
<a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Enumeration.md" data-href="Algorithm/DAA/Algorithm/Enumeration.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/enumeration.html" class="internal-link" target="_self" rel="noopener">Enumeration</a>

<br>


<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Union-Find.md" data-href="Algorithm/DAA/Algorithm/Union-Find.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/union-find.html" class="internal-link" target="_self" rel="noopener">Union-Find</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Graph-algorithm.md" data-href="Algorithm/DAA/Algorithm/Graph-algorithm.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/graph-algorithm.html" class="internal-link" target="_self" rel="noopener">Graph-algorithm</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Sort.md" data-href="Algorithm/DAA/Algorithm/Sort.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/sort.html" class="internal-link" target="_self" rel="noopener">Sort</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Divide-and-Conquer.md" data-href="Algorithm/DAA/Algorithm/Divide-and-Conquer.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/divide-and-conquer.html" class="internal-link" target="_self" rel="noopener">Divide-and-Conquer</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Enumeration-subset.md" data-href="Algorithm/DAA/Algorithm/Enumeration-subset.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/enumeration-subset.html" class="internal-link" target="_self" rel="noopener">Enumeration-subset</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Algorithm/Enumeration.md" data-href="Algorithm/DAA/Algorithm/Enumeration.md" href="https://blog.allenygy.vip/algorithm/daa/algorithm/enumeration.html" class="internal-link" target="_self" rel="noopener">Enumeration</a>


<br>


<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Assignment/DAA-Assignment-2.md" data-href="Algorithm/DAA/Assignment/DAA-Assignment-2.md" href="https://blog.allenygy.vip/algorithm/daa/assignment/daa-assignment-2.html" class="internal-link" target="_self" rel="noopener">DAA-Assignment-2</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Assignment/DAA-Programming-Assignment.md" data-href="Algorithm/DAA/Assignment/DAA-Programming-Assignment.md" href="https://blog.allenygy.vip/algorithm/daa/assignment/daa-programming-assignment.html" class="internal-link" target="_self" rel="noopener">DAA-Programming-Assignment</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Assignment/DAA-Assignment-0.md" data-href="Algorithm/DAA/Assignment/DAA-Assignment-0.md" href="https://blog.allenygy.vip/algorithm/daa/assignment/daa-assignment-0.html" class="internal-link" target="_self" rel="noopener">DAA-Assignment-0</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Assignment/DAA-Assignment-1.md" data-href="Algorithm/DAA/Assignment/DAA-Assignment-1.md" href="https://blog.allenygy.vip/algorithm/daa/assignment/daa-assignment-1.html" class="internal-link" target="_self" rel="noopener">DAA-Assignment-1</a>


<br>


<br><a data-tooltip-position="top" aria-label="Algorithm/DAA/Tutorial/Tutorial-1.md" data-href="Algorithm/DAA/Tutorial/Tutorial-1.md" href="https://blog.allenygy.vip/algorithm/daa/tutorial/tutorial-1.html" class="internal-link" target="_self" rel="noopener">Tutorial-1</a>




<br>


<br>
<a data-tooltip-position="top" aria-label="Algorithm/DSA/Fenwick.md" data-href="Algorithm/DSA/Fenwick.md" href="https://blog.allenygy.vip/algorithm/dsa/fenwick.html" class="internal-link" target="_self" rel="noopener">Fenwick</a>

<br>
<a data-tooltip-position="top" aria-label="Algorithm/DSA/BinaryTree.md" data-href="Algorithm/DSA/BinaryTree.md" href="https://blog.allenygy.vip/algorithm/dsa/binarytree.html" class="internal-link" target="_self" rel="noopener">BinaryTree</a>

<br>
<a data-tooltip-position="top" aria-label="Algorithm/DSA/AVL.md" data-href="Algorithm/DSA/AVL.md" href="https://blog.allenygy.vip/algorithm/dsa/avl.html" class="internal-link" target="_self" rel="noopener">AVL</a>

<br>
<a data-tooltip-position="top" aria-label="Algorithm/DSA/B+Tree.md" data-href="Algorithm/DSA/B+Tree.md" href="https://blog.allenygy.vip/algorithm/dsa/b+tree.html" class="internal-link" target="_self" rel="noopener">B+Tree</a>

<br>


<br><a data-tooltip-position="top" aria-label="Algorithm/DSA/Assignment/dsa-assignment-1.md" data-href="Algorithm/DSA/Assignment/dsa-assignment-1.md" href="https://blog.allenygy.vip/algorithm/dsa/assignment/dsa-assignment-1.html" class="internal-link" target="_self" rel="noopener">dsa-assignment-1</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DSA/Assignment/dsa-assignment-2.md" data-href="Algorithm/DSA/Assignment/dsa-assignment-2.md" href="https://blog.allenygy.vip/algorithm/dsa/assignment/dsa-assignment-2.html" class="internal-link" target="_self" rel="noopener">dsa-assignment-2</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/DSA/Assignment/written-assignment-am.md" data-href="Algorithm/DSA/Assignment/written-assignment-am.md" href="https://blog.allenygy.vip/algorithm/dsa/assignment/written-assignment-am.html" class="internal-link" target="_self" rel="noopener">written-assignment-am</a>




<br>


<br><a data-tooltip-position="top" aria-label="Algorithm/Graph/Graph-Overview.md" data-href="Algorithm/Graph/Graph-Overview.md" href="https://blog.allenygy.vip/algorithm/graph/graph-overview.html" class="internal-link" target="_self" rel="noopener">Graph-Overview</a>


<br>


<br><a data-tooltip-position="top" aria-label="Algorithm/NumberTheory/Prime-Sieve.md" data-href="Algorithm/NumberTheory/Prime-Sieve.md" href="https://blog.allenygy.vip/algorithm/numbertheory/prime-sieve.html" class="internal-link" target="_self" rel="noopener">Prime-Sieve</a>


<br>


<br><a data-tooltip-position="top" aria-label="Algorithm/Recursion/递归-二叉树.md" data-href="Algorithm/Recursion/递归-二叉树.md" href="https://blog.allenygy.vip/algorithm/recursion/递归-二叉树.html" class="internal-link" target="_self" rel="noopener">递归-二叉树</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/Recursion/递归.md" data-href="Algorithm/Recursion/递归.md" href="https://blog.allenygy.vip/algorithm/recursion/递归.html" class="internal-link" target="_self" rel="noopener">递归</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/Recursion/递推.md" data-href="Algorithm/Recursion/递推.md" href="https://blog.allenygy.vip/algorithm/recursion/递推.html" class="internal-link" target="_self" rel="noopener">递推</a>


<br>


<br><a data-tooltip-position="top" aria-label="Algorithm/String/Tire-Tree.md" data-href="Algorithm/String/Tire-Tree.md" href="https://blog.allenygy.vip/algorithm/string/tire-tree.html" class="internal-link" target="_self" rel="noopener">Tire-Tree</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/String/Z-Function.md" data-href="Algorithm/String/Z-Function.md" href="https://blog.allenygy.vip/algorithm/string/z-function.html" class="internal-link" target="_self" rel="noopener">Z-Function</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/String/Manacher-Algorithm.md" data-href="Algorithm/String/Manacher-Algorithm.md" href="https://blog.allenygy.vip/algorithm/string/manacher-algorithm.html" class="internal-link" target="_self" rel="noopener">Manacher-Algorithm</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/String/String-Overview.md" data-href="Algorithm/String/String-Overview.md" href="https://blog.allenygy.vip/algorithm/string/string-overview.html" class="internal-link" target="_self" rel="noopener">String-Overview</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/String/Aho-Corasick.md" data-href="Algorithm/String/Aho-Corasick.md" href="https://blog.allenygy.vip/algorithm/string/aho-corasick.html" class="internal-link" target="_self" rel="noopener">Aho-Corasick</a>
<br><a data-tooltip-position="top" aria-label="Algorithm/String/KMP.md" data-href="Algorithm/String/KMP.md" href="https://blog.allenygy.vip/algorithm/string/kmp.html" class="internal-link" target="_self" rel="noopener">KMP</a>




<br>


<br>
<a data-tooltip-position="top" aria-label="Computer-Organization/Computer-Organization.md" data-href="Computer-Organization/Computer-Organization.md" href="https://blog.allenygy.vip/computer-organization/computer-organization.html" class="internal-link" target="_self" rel="noopener">Computer-Organization</a>

<br>


<br>
<a data-tooltip-position="top" aria-label="Computer-Organization/Assignment/As1/Co-Assignment-1.md" data-href="Computer-Organization/Assignment/As1/Co-Assignment-1.md" href="https://blog.allenygy.vip/computer-organization/assignment/as1/co-assignment-1.html" class="internal-link" target="_self" rel="noopener">Co-Assignment-1</a>

<br>


<br><a data-tooltip-position="top" aria-label="Computer-Organization/Assignment/As1/Co-Assignment-1.md" data-href="Computer-Organization/Assignment/As1/Co-Assignment-1.md" href="https://blog.allenygy.vip/computer-organization/assignment/as1/co-assignment-1.html" class="internal-link" target="_self" rel="noopener">Co-Assignment-1</a>


<br>


<br><a data-tooltip-position="top" aria-label="Computer-Organization/Assignment/As2/Co-Assignment-2.md" data-href="Computer-Organization/Assignment/As2/Co-Assignment-2.md" href="https://blog.allenygy.vip/computer-organization/assignment/as2/co-assignment-2.html" class="internal-link" target="_self" rel="noopener">Co-Assignment-2</a>


<br>


<br><a data-tooltip-position="top" aria-label="Computer-Organization/Assignment/As3/CO-Assignment-3.md" data-href="Computer-Organization/Assignment/As3/CO-Assignment-3.md" href="https://blog.allenygy.vip/computer-organization/assignment/as3/co-assignment-3.html" class="internal-link" target="_self" rel="noopener">CO-Assignment-3</a>


<br>


<br><a data-tooltip-position="top" aria-label="Computer-Organization/Assignment/As4/Co-Assignment-4.md" data-href="Computer-Organization/Assignment/As4/Co-Assignment-4.md" href="https://blog.allenygy.vip/computer-organization/assignment/as4/co-assignment-4.html" class="internal-link" target="_self" rel="noopener">Co-Assignment-4</a>




<br>


<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab6.md" data-href="Computer-Organization/Lab/Lab6.md" href="https://blog.allenygy.vip/computer-organization/lab/lab6.html" class="internal-link" target="_self" rel="noopener">Lab6</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab7.md" data-href="Computer-Organization/Lab/Lab7.md" href="https://blog.allenygy.vip/computer-organization/lab/lab7.html" class="internal-link" target="_self" rel="noopener">Lab7</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab8.md" data-href="Computer-Organization/Lab/Lab8.md" href="https://blog.allenygy.vip/computer-organization/lab/lab8.html" class="internal-link" target="_self" rel="noopener">Lab8</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab3.md" data-href="Computer-Organization/Lab/Lab3.md" href="https://blog.allenygy.vip/computer-organization/lab/lab3.html" class="internal-link" target="_self" rel="noopener">Lab3</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab5.md" data-href="Computer-Organization/Lab/Lab5.md" href="https://blog.allenygy.vip/computer-organization/lab/lab5.html" class="internal-link" target="_self" rel="noopener">Lab5</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lab/Lab2.md" data-href="Computer-Organization/Lab/Lab2.md" href="https://blog.allenygy.vip/computer-organization/lab/lab2.html" class="internal-link" target="_self" rel="noopener">Lab2</a>


<br>


<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/What-is-a-Computer.md" data-href="Computer-Organization/Lecture/What-is-a-Computer.md" href="https://blog.allenygy.vip/computer-organization/lecture/what-is-a-computer.html" class="internal-link" target="_self" rel="noopener">What-is-a-Computer</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/Microarchitecture.md" data-href="Computer-Organization/Lecture/Microarchitecture.md" href="https://blog.allenygy.vip/computer-organization/lecture/microarchitecture.html" class="internal-link" target="_self" rel="noopener">Microarchitecture</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/From-Machine-Language-to-Assembly-Language.md" data-href="Computer-Organization/Lecture/From-Machine-Language-to-Assembly-Language.md" href="https://blog.allenygy.vip/computer-organization/lecture/from-machine-language-to-assembly-language.html" class="internal-link" target="_self" rel="noopener">From-Machine-Language-to-Assembly-Language</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/From-Transistors-to-Gates.md" data-href="Computer-Organization/Lecture/From-Transistors-to-Gates.md" href="https://blog.allenygy.vip/computer-organization/lecture/from-transistors-to-gates.html" class="internal-link" target="_self" rel="noopener">From-Transistors-to-Gates</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/ISA.md" data-href="Computer-Organization/Lecture/ISA.md" href="https://blog.allenygy.vip/computer-organization/lecture/isa.html" class="internal-link" target="_self" rel="noopener">ISA</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/From-Gates-to-Circuits-I-Combinational-Circuits.md" data-href="Computer-Organization/Lecture/From-Gates-to-Circuits-I-Combinational-Circuits.md" href="https://blog.allenygy.vip/computer-organization/lecture/from-gates-to-circuits-i-combinational-circuits.html" class="internal-link" target="_self" rel="noopener">From-Gates-to-Circuits-I-Combinational-Circuits</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/From-Gates-to-Circuits-II-Sequential-Circuits.md" data-href="Computer-Organization/Lecture/From-Gates-to-Circuits-II-Sequential-Circuits.md" href="https://blog.allenygy.vip/computer-organization/lecture/from-gates-to-circuits-ii-sequential-circuits.html" class="internal-link" target="_self" rel="noopener">From-Gates-to-Circuits-II-Sequential-Circuits</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/Circuit-Design.md" data-href="Computer-Organization/Lecture/Circuit-Design.md" href="https://blog.allenygy.vip/computer-organization/lecture/circuit-design.html" class="internal-link" target="_self" rel="noopener">Circuit-Design</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/Finite-State-Machine.md" data-href="Computer-Organization/Lecture/Finite-State-Machine.md" href="https://blog.allenygy.vip/computer-organization/lecture/finite-state-machine.html" class="internal-link" target="_self" rel="noopener">Finite-State-Machine</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/Bits-Data-Representation-and-Manipulation.md" data-href="Computer-Organization/Lecture/Bits-Data-Representation-and-Manipulation.md" href="https://blog.allenygy.vip/computer-organization/lecture/bits-data-representation-and-manipulation.html" class="internal-link" target="_self" rel="noopener">Bits-Data-Representation-and-Manipulation</a>
<br><a data-tooltip-position="top" aria-label="Computer-Organization/Lecture/Boolean-Algebra-from-Bits-to-Logic.md" data-href="Computer-Organization/Lecture/Boolean-Algebra-from-Bits-to-Logic.md" href="https://blog.allenygy.vip/computer-organization/lecture/boolean-algebra-from-bits-to-logic.html" class="internal-link" target="_self" rel="noopener">Boolean-Algebra-from-Bits-to-Logic</a>




<br>


<br>
<a data-tooltip-position="top" aria-label="Contest/Contest-Overview.md" data-href="Contest/Contest-Overview.md" href="https://blog.allenygy.vip/contest/contest-overview.html" class="internal-link" target="_self" rel="noopener">Contest-Overview</a>

<br>


<br><a data-tooltip-position="top" aria-label="Contest/Lanqiao/Train-2.md" data-href="Contest/Lanqiao/Train-2.md" href="https://blog.allenygy.vip/contest/lanqiao/train-2.html" class="internal-link" target="_self" rel="noopener">Train-2</a>
<br><a data-tooltip-position="top" aria-label="Contest/Lanqiao/Train-1.md" data-href="Contest/Lanqiao/Train-1.md" href="https://blog.allenygy.vip/contest/lanqiao/train-1.html" class="internal-link" target="_self" rel="noopener">Train-1</a>


<br>


<br><a data-tooltip-position="top" aria-label="Contest/Leetcode/Weekly-Contest-402.md" data-href="Contest/Leetcode/Weekly-Contest-402.md" href="https://blog.allenygy.vip/contest/leetcode/weekly-contest-402.html" class="internal-link" target="_self" rel="noopener">Weekly-Contest-402</a>
<br><a data-tooltip-position="top" aria-label="Contest/Leetcode/Biweekly-Contest-122.md" data-href="Contest/Leetcode/Biweekly-Contest-122.md" href="https://blog.allenygy.vip/contest/leetcode/biweekly-contest-122.html" class="internal-link" target="_self" rel="noopener">Biweekly-Contest-122</a>
<br><a data-tooltip-position="top" aria-label="Contest/Leetcode/Biweekly-Contest-123.md" data-href="Contest/Leetcode/Biweekly-Contest-123.md" href="https://blog.allenygy.vip/contest/leetcode/biweekly-contest-123.html" class="internal-link" target="_self" rel="noopener">Biweekly-Contest-123</a>
<br><a data-tooltip-position="top" aria-label="Contest/Leetcode/Weekly-Contest-381.md" data-href="Contest/Leetcode/Weekly-Contest-381.md" href="https://blog.allenygy.vip/contest/leetcode/weekly-contest-381.html" class="internal-link" target="_self" rel="noopener">Weekly-Contest-381</a>




<br>


<br>
<a data-tooltip-position="top" aria-label="Data-Analysis/Data-Analysis.md" data-href="Data-Analysis/Data-Analysis.md" href="https://blog.allenygy.vip/data-analysis/data-analysis.html" class="internal-link" target="_self" rel="noopener">Data-Analysis</a>

<br>


<br><a data-tooltip-position="top" aria-label="Data-Analysis/HODA/Hans-On-Data-Analysis-For-Everyone.md" data-href="Data-Analysis/HODA/Hans-On-Data-Analysis-For-Everyone.md" href="https://blog.allenygy.vip/data-analysis/hoda/hans-on-data-analysis-for-everyone.html" class="internal-link" target="_self" rel="noopener">Hans-On-Data-Analysis-For-Everyone</a>




<br>


<br>
<a data-tooltip-position="top" aria-label="Database-Management/Database-Management.md" data-href="Database-Management/Database-Management.md" href="https://blog.allenygy.vip/database-management/database-management.html" class="internal-link" target="_self" rel="noopener">Database-Management</a>

<br>


<br><a data-tooltip-position="top" aria-label="Database-Management/Assignment/DBM-Assignment-2.md" data-href="Database-Management/Assignment/DBM-Assignment-2.md" href="https://blog.allenygy.vip/database-management/assignment/dbm-assignment-2.html" class="internal-link" target="_self" rel="noopener">DBM-Assignment-2</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Assignment/DBM-Assignment-3.md" data-href="Database-Management/Assignment/DBM-Assignment-3.md" href="https://blog.allenygy.vip/database-management/assignment/dbm-assignment-3.html" class="internal-link" target="_self" rel="noopener">DBM-Assignment-3</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Assignment/DBM-Assignment-1.md" data-href="Database-Management/Assignment/DBM-Assignment-1.md" href="https://blog.allenygy.vip/database-management/assignment/dbm-assignment-1.html" class="internal-link" target="_self" rel="noopener">DBM-Assignment-1</a>


<br>


<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Relational-Database-Design-BCNF.md" data-href="Database-Management/Lecture/Relational-Database-Design-BCNF.md" href="https://blog.allenygy.vip/database-management/lecture/relational-database-design-bcnf.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-BCNF</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Relational-Database-Design-Functional-Dependency.md" data-href="Database-Management/Lecture/Relational-Database-Design-Functional-Dependency.md" href="https://blog.allenygy.vip/database-management/lecture/relational-database-design-functional-dependency.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-Functional-Dependency</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Relational-Database-Design-Purpose-&amp;-First-Normal-Form.md" data-href="Database-Management/Lecture/Relational-Database-Design-Purpose-&amp;-First-Normal-Form.md" href="https://blog.allenygy.vip/database-management/lecture/relational-database-design-purpose-&amp;-first-normal-form.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-Purpose-&amp;-First-Normal-Form</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Logical-Design.md" data-href="Database-Management/Lecture/Logical-Design.md" href="https://blog.allenygy.vip/database-management/lecture/logical-design.html" class="internal-link" target="_self" rel="noopener">Logical-Design</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/NormalForm.md" data-href="Database-Management/Lecture/NormalForm.md" href="https://blog.allenygy.vip/database-management/lecture/normalform.html" class="internal-link" target="_self" rel="noopener">NormalForm</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Relational-Database-Design-3rd-Normal-Form.md" data-href="Database-Management/Lecture/Relational-Database-Design-3rd-Normal-Form.md" href="https://blog.allenygy.vip/database-management/lecture/relational-database-design-3rd-normal-form.html" class="internal-link" target="_self" rel="noopener">Relational-Database-Design-3rd-Normal-Form</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Entity-Relationship-Model-Extended-Features.md" data-href="Database-Management/Lecture/Entity-Relationship-Model-Extended-Features.md" href="https://blog.allenygy.vip/database-management/lecture/entity-relationship-model-extended-features.html" class="internal-link" target="_self" rel="noopener">Entity-Relationship-Model-Extended-Features</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Entity-Relationship-Model-Modeling.md" data-href="Database-Management/Lecture/Entity-Relationship-Model-Modeling.md" href="https://blog.allenygy.vip/database-management/lecture/entity-relationship-model-modeling.html" class="internal-link" target="_self" rel="noopener">Entity-Relationship-Model-Modeling</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Key-Concept.md" data-href="Database-Management/Lecture/Key-Concept.md" href="https://blog.allenygy.vip/database-management/lecture/key-concept.html" class="internal-link" target="_self" rel="noopener">Key-Concept</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Design-Issues.md" data-href="Database-Management/Lecture/Design-Issues.md" href="https://blog.allenygy.vip/database-management/lecture/design-issues.html" class="internal-link" target="_self" rel="noopener">Design-Issues</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/Lecture/Entity-Relationship-Model-Constraints.md" data-href="Database-Management/Lecture/Entity-Relationship-Model-Constraints.md" href="https://blog.allenygy.vip/database-management/lecture/entity-relationship-model-constraints.html" class="internal-link" target="_self" rel="noopener">Entity-Relationship-Model-Constraints</a>


<br>


<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Null-Subquery.md" data-href="Database-Management/MySQL/Null-Subquery.md" href="https://blog.allenygy.vip/database-management/mysql/null-subquery.html" class="internal-link" target="_self" rel="noopener">Null-Subquery</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Set-Operation-&amp;-Where-Subquery.md" data-href="Database-Management/MySQL/Set-Operation-&amp;-Where-Subquery.md" href="https://blog.allenygy.vip/database-management/mysql/set-operation-&amp;-where-subquery.html" class="internal-link" target="_self" rel="noopener">Set-Operation-&amp;-Where-Subquery</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Data-Modification.md" data-href="Database-Management/MySQL/Data-Modification.md" href="https://blog.allenygy.vip/database-management/mysql/data-modification.html" class="internal-link" target="_self" rel="noopener">Data-Modification</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Division-and-Correlated-Subquery.md" data-href="Database-Management/MySQL/Division-and-Correlated-Subquery.md" href="https://blog.allenygy.vip/database-management/mysql/division-and-correlated-subquery.html" class="internal-link" target="_self" rel="noopener">Division-and-Correlated-Subquery</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Join.md" data-href="Database-Management/MySQL/Join.md" href="https://blog.allenygy.vip/database-management/mysql/join.html" class="internal-link" target="_self" rel="noopener">Join</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Basic-MySQL.md" data-href="Database-Management/MySQL/Basic-MySQL.md" href="https://blog.allenygy.vip/database-management/mysql/basic-mysql.html" class="internal-link" target="_self" rel="noopener">Basic-MySQL</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Cross-table-Query.md" data-href="Database-Management/MySQL/Cross-table-Query.md" href="https://blog.allenygy.vip/database-management/mysql/cross-table-query.html" class="internal-link" target="_self" rel="noopener">Cross-table-Query</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Data-Definition.md" data-href="Database-Management/MySQL/Data-Definition.md" href="https://blog.allenygy.vip/database-management/mysql/data-definition.html" class="internal-link" target="_self" rel="noopener">Data-Definition</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Advanced-SQL.md" data-href="Database-Management/MySQL/Advanced-SQL.md" href="https://blog.allenygy.vip/database-management/mysql/advanced-sql.html" class="internal-link" target="_self" rel="noopener">Advanced-SQL</a>
<br><a data-tooltip-position="top" aria-label="Database-Management/MySQL/Aggregation.md" data-href="Database-Management/MySQL/Aggregation.md" href="https://blog.allenygy.vip/database-management/mysql/aggregation.html" class="internal-link" target="_self" rel="noopener">Aggregation</a>




<br>


<br><a data-tooltip-position="top" aria-label="DeepLearning/DeepLearning.md" data-href="DeepLearning/DeepLearning.md" href="https://blog.allenygy.vip/deeplearning/deeplearning.html" class="internal-link" target="_self" rel="noopener">DeepLearning</a>
<br><a data-tooltip-position="top" aria-label="DeepLearning/GraphNetwork.md" data-href="DeepLearning/GraphNetwork.md" href="https://blog.allenygy.vip/deeplearning/graphnetwork.html" class="internal-link" target="_self" rel="noopener">GraphNetwork</a>
<br><a data-tooltip-position="top" aria-label="DeepLearning/ActivationFunction.md" data-href="DeepLearning/ActivationFunction.md" href="https://blog.allenygy.vip/deeplearning/activationfunction.html" class="internal-link" target="_self" rel="noopener">ActivationFunction</a>
<br><a data-tooltip-position="top" aria-label="DeepLearning/BackPropagation.md" data-href="DeepLearning/BackPropagation.md" href="https://blog.allenygy.vip/deeplearning/backpropagation.html" class="internal-link" target="_self" rel="noopener">BackPropagation</a>
<br><a data-tooltip-position="top" aria-label="DeepLearning/GradientDescent.md" data-href="DeepLearning/GradientDescent.md" href="https://blog.allenygy.vip/deeplearning/gradientdescent.html" class="internal-link" target="_self" rel="noopener">GradientDescent</a>


<br>


<br><a data-tooltip-position="top" aria-label="English/CET-6.md" data-href="English/CET-6.md" href="https://blog.allenygy.vip/english/cet-6.html" class="internal-link" target="_self" rel="noopener">CET-6</a>


<br>


<br><a data-tooltip-position="top" aria-label="Fix-Income/Fixed-Income-Overview.md" data-href="Fix-Income/Fixed-Income-Overview.md" href="https://blog.allenygy.vip/fix-income/fixed-income-overview.html" class="internal-link" target="_self" rel="noopener">Fixed-Income-Overview</a>
<br><a data-tooltip-position="top" aria-label="Fix-Income/珠海市经济产业分析.md" data-href="Fix-Income/珠海市经济产业分析.md" href="https://blog.allenygy.vip/fix-income/珠海市经济产业分析.html" class="internal-link" target="_self" rel="noopener">珠海市经济产业分析</a>


<br>


<br>
<a data-tooltip-position="top" aria-label="Math/Math.md" data-href="Math/Math.md" href="https://blog.allenygy.vip/math/math.html" class="internal-link" target="_self" rel="noopener">Math</a>

<br>


<br>
<a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-3.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-3.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-3.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-3</a>

<br>
<a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-7.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-7.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-7.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-7</a>

<br>
<a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-8.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-8.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-8.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-8</a>

<br>
<a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-tutorial.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-tutorial.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-tutorial.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-tutorial</a>

<br>
<a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-2.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-2.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-2.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-2</a>

<br>
<a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-5.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-5.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-5.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-5</a>

<br>
<a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-6.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-6.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-6.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-6</a>

<br>


<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-3.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-3.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-3.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-3</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-7.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-7.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-7.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-7</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-8.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-8.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-8.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-8</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-tutorial.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-tutorial.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-tutorial.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-tutorial</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-2.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-2.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-2.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-2</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-5.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-5.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-5.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-5</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-6.md" data-href="Math/Discrete-Structure/assignment/discrete-mathematics-assignment-6.md" href="https://blog.allenygy.vip/math/discrete-structure/assignment/discrete-mathematics-assignment-6.html" class="internal-link" target="_self" rel="noopener">discrete-mathematics-assignment-6</a>


<br>


<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/sets-and-n-tuple.md" data-href="Math/Discrete-Structure/lecture/sets-and-n-tuple.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/sets-and-n-tuple.html" class="internal-link" target="_self" rel="noopener">sets-and-n-tuple</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/tree.md" data-href="Math/Discrete-Structure/lecture/tree.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/tree.html" class="internal-link" target="_self" rel="noopener">tree</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/propositional-logic.md" data-href="Math/Discrete-Structure/lecture/propositional-logic.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/propositional-logic.html" class="internal-link" target="_self" rel="noopener">propositional-logic</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/representing-graph-and-connectivity.md" data-href="Math/Discrete-Structure/lecture/representing-graph-and-connectivity.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/representing-graph-and-connectivity.html" class="internal-link" target="_self" rel="noopener">representing-graph-and-connectivity</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/relation.md" data-href="Math/Discrete-Structure/lecture/relation.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/relation.html" class="internal-link" target="_self" rel="noopener">relation</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/logic-circuits.md" data-href="Math/Discrete-Structure/lecture/logic-circuits.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/logic-circuits.html" class="internal-link" target="_self" rel="noopener">logic-circuits</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/propositional-equivalence.md" data-href="Math/Discrete-Structure/lecture/propositional-equivalence.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/propositional-equivalence.html" class="internal-link" target="_self" rel="noopener">propositional-equivalence</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/counting-principles.md" data-href="Math/Discrete-Structure/lecture/counting-principles.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/counting-principles.html" class="internal-link" target="_self" rel="noopener">counting-principles</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/functions-sequence-and-summations.md" data-href="Math/Discrete-Structure/lecture/functions-sequence-and-summations.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/functions-sequence-and-summations.html" class="internal-link" target="_self" rel="noopener">functions-sequence-and-summations</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/graph-theory.md" data-href="Math/Discrete-Structure/lecture/graph-theory.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/graph-theory.html" class="internal-link" target="_self" rel="noopener">graph-theory</a>
<br><a data-tooltip-position="top" aria-label="Math/Discrete-Structure/lecture/boolean-expressions.md" data-href="Math/Discrete-Structure/lecture/boolean-expressions.md" href="https://blog.allenygy.vip/math/discrete-structure/lecture/boolean-expressions.html" class="internal-link" target="_self" rel="noopener">boolean-expressions</a>




<br>


<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Judgment.md" data-href="Math/Linear-Algebra/Judgment.md" href="https://blog.allenygy.vip/math/linear-algebra/judgment.html" class="internal-link" target="_self" rel="noopener">Judgment</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Vector-Space.md" data-href="Math/Linear-Algebra/Vector-Space.md" href="https://blog.allenygy.vip/math/linear-algebra/vector-space.html" class="internal-link" target="_self" rel="noopener">Vector-Space</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Matrix-Operation.md" data-href="Math/Linear-Algebra/Matrix-Operation.md" href="https://blog.allenygy.vip/math/linear-algebra/matrix-operation.html" class="internal-link" target="_self" rel="noopener">Matrix-Operation</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Orthogonality.md" data-href="Math/Linear-Algebra/Orthogonality.md" href="https://blog.allenygy.vip/math/linear-algebra/orthogonality.html" class="internal-link" target="_self" rel="noopener">Orthogonality</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Product.md" data-href="Math/Linear-Algebra/Product.md" href="https://blog.allenygy.vip/math/linear-algebra/product.html" class="internal-link" target="_self" rel="noopener">Product</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Linear-Transformations.md" data-href="Math/Linear-Algebra/Linear-Transformations.md" href="https://blog.allenygy.vip/math/linear-algebra/linear-transformations.html" class="internal-link" target="_self" rel="noopener">Linear-Transformations</a>
<br><a data-tooltip-position="top" aria-label="Math/Linear-Algebra/Eigenvalues-and-Eigenvectors.md" data-href="Math/Linear-Algebra/Eigenvalues-and-Eigenvectors.md" href="https://blog.allenygy.vip/math/linear-algebra/eigenvalues-and-eigenvectors.html" class="internal-link" target="_self" rel="noopener">Eigenvalues-and-Eigenvectors</a>


<br>


<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Poisson-Distribution.md" data-href="Math/Probability-Statistics/Poisson-Distribution.md" href="https://blog.allenygy.vip/math/probability-statistics/poisson-distribution.html" class="internal-link" target="_self" rel="noopener">Poisson-Distribution</a>
<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Probability-Theory.md" data-href="Math/Probability-Statistics/Probability-Theory.md" href="https://blog.allenygy.vip/math/probability-statistics/probability-theory.html" class="internal-link" target="_self" rel="noopener">Probability-Theory</a>
<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Hypothesis-Testing-Two-Population.md" data-href="Math/Probability-Statistics/Hypothesis-Testing-Two-Population.md" href="https://blog.allenygy.vip/math/probability-statistics/hypothesis-testing-two-population.html" class="internal-link" target="_self" rel="noopener">Hypothesis-Testing-Two-Population</a>
<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Hypothesis-Testing-Single-Population.md" data-href="Math/Probability-Statistics/Hypothesis-Testing-Single-Population.md" href="https://blog.allenygy.vip/math/probability-statistics/hypothesis-testing-single-population.html" class="internal-link" target="_self" rel="noopener">Hypothesis-Testing-Single-Population</a>
<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Chi-Square-Tests.md" data-href="Math/Probability-Statistics/Chi-Square-Tests.md" href="https://blog.allenygy.vip/math/probability-statistics/chi-square-tests.html" class="internal-link" target="_self" rel="noopener">Chi-Square-Tests</a>
<br><a data-tooltip-position="top" aria-label="Math/Probability-Statistics/Confidence-Interval.md" data-href="Math/Probability-Statistics/Confidence-Interval.md" href="https://blog.allenygy.vip/math/probability-statistics/confidence-interval.html" class="internal-link" target="_self" rel="noopener">Confidence-Interval</a>




<br>


<br>
<a data-tooltip-position="top" aria-label="Program/ProgramLanguage.md" data-href="Program/ProgramLanguage.md" href="https://blog.allenygy.vip/program/programlanguage.html" class="internal-link" target="_self" rel="noopener">ProgramLanguage</a>

<br>


<br><a data-tooltip-position="top" aria-label="Program/C/Macro.md" data-href="Program/C/Macro.md" href="https://blog.allenygy.vip/program/c/macro.html" class="internal-link" target="_self" rel="noopener">Macro</a>
<br><a data-tooltip-position="top" aria-label="Program/C/Multithreads.md" data-href="Program/C/Multithreads.md" href="https://blog.allenygy.vip/program/c/multithreads.html" class="internal-link" target="_self" rel="noopener">Multithreads</a>
<br><a data-tooltip-position="top" aria-label="Program/C/Pointers.md" data-href="Program/C/Pointers.md" href="https://blog.allenygy.vip/program/c/pointers.html" class="internal-link" target="_self" rel="noopener">Pointers</a>
<br><a data-tooltip-position="top" aria-label="Program/C/fileoperation.md" data-href="Program/C/fileoperation.md" href="https://blog.allenygy.vip/program/c/fileoperation.html" class="internal-link" target="_self" rel="noopener">fileoperation</a>


<br>


<br><a data-tooltip-position="top" aria-label="Program/Cpp/Iota.md" data-href="Program/Cpp/Iota.md" href="https://blog.allenygy.vip/program/cpp/iota.html" class="internal-link" target="_self" rel="noopener">Iota</a>
<br><a data-tooltip-position="top" aria-label="Program/Cpp/Priority-Queue.md" data-href="Program/Cpp/Priority-Queue.md" href="https://blog.allenygy.vip/program/cpp/priority-queue.html" class="internal-link" target="_self" rel="noopener">Priority-Queue</a>
<br><a data-tooltip-position="top" aria-label="Program/Cpp/Vector.md" data-href="Program/Cpp/Vector.md" href="https://blog.allenygy.vip/program/cpp/vector.html" class="internal-link" target="_self" rel="noopener">Vector</a>
<br><a data-tooltip-position="top" aria-label="Program/Cpp/Algorithm-Library.md" data-href="Program/Cpp/Algorithm-Library.md" href="https://blog.allenygy.vip/program/cpp/algorithm-library.html" class="internal-link" target="_self" rel="noopener">Algorithm-Library</a>
<br><a data-tooltip-position="top" aria-label="Program/Cpp/Map.md" data-href="Program/Cpp/Map.md" href="https://blog.allenygy.vip/program/cpp/map.html" class="internal-link" target="_self" rel="noopener">Map</a>


<br>


<br>
<a data-tooltip-position="top" aria-label="Program/Java/Lecture/Java-Introduction.md" data-href="Program/Java/Lecture/Java-Introduction.md" href="https://blog.allenygy.vip/program/java/lecture/java-introduction.html" class="internal-link" target="_self" rel="noopener">Java-Introduction</a>

<br>
<a data-tooltip-position="top" aria-label="Program/Java/Lecture/Java-Programming-Essentials.md" data-href="Program/Java/Lecture/Java-Programming-Essentials.md" href="https://blog.allenygy.vip/program/java/lecture/java-programming-essentials.html" class="internal-link" target="_self" rel="noopener">Java-Programming-Essentials</a>

<br>
<a data-tooltip-position="top" aria-label="Program/Java/Lecture/Unified-Modeling-Language.md" data-href="Program/Java/Lecture/Unified-Modeling-Language.md" href="https://blog.allenygy.vip/program/java/lecture/unified-modeling-language.html" class="internal-link" target="_self" rel="noopener">Unified-Modeling-Language</a>

<br>
<a data-tooltip-position="top" aria-label="Program/Java/Lecture/Exception-Handling.md" data-href="Program/Java/Lecture/Exception-Handling.md" href="https://blog.allenygy.vip/program/java/lecture/exception-handling.html" class="internal-link" target="_self" rel="noopener">Exception-Handling</a>

<br>
<a data-tooltip-position="top" aria-label="Program/Java/Lecture/Inheritance.md" data-href="Program/Java/Lecture/Inheritance.md" href="https://blog.allenygy.vip/program/java/lecture/inheritance.html" class="internal-link" target="_self" rel="noopener">Inheritance</a>

<br>
<a data-tooltip-position="top" aria-label="Program/Java/Lecture/Array-and-Generics.md" data-href="Program/Java/Lecture/Array-and-Generics.md" href="https://blog.allenygy.vip/program/java/lecture/array-and-generics.html" class="internal-link" target="_self" rel="noopener">Array-and-Generics</a>

<br>
<a data-tooltip-position="top" aria-label="Program/Java/Lecture/Creating-Java-Classes.md" data-href="Program/Java/Lecture/Creating-Java-Classes.md" href="https://blog.allenygy.vip/program/java/lecture/creating-java-classes.html" class="internal-link" target="_self" rel="noopener">Creating-Java-Classes</a>

<br>
<a data-tooltip-position="top" aria-label="Program/Java/Lecture/Abstract-Methods-and-Classes-Interfaces.md" data-href="Program/Java/Lecture/Abstract-Methods-and-Classes-Interfaces.md" href="https://blog.allenygy.vip/program/java/lecture/abstract-methods-and-classes-interfaces.html" class="internal-link" target="_self" rel="noopener">Abstract-Methods-and-Classes-Interfaces</a>

<br>


<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Java-Introduction.md" data-href="Program/Java/Lecture/Java-Introduction.md" href="https://blog.allenygy.vip/program/java/lecture/java-introduction.html" class="internal-link" target="_self" rel="noopener">Java-Introduction</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Java-Programming-Essentials.md" data-href="Program/Java/Lecture/Java-Programming-Essentials.md" href="https://blog.allenygy.vip/program/java/lecture/java-programming-essentials.html" class="internal-link" target="_self" rel="noopener">Java-Programming-Essentials</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Unified-Modeling-Language.md" data-href="Program/Java/Lecture/Unified-Modeling-Language.md" href="https://blog.allenygy.vip/program/java/lecture/unified-modeling-language.html" class="internal-link" target="_self" rel="noopener">Unified-Modeling-Language</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Exception-Handling.md" data-href="Program/Java/Lecture/Exception-Handling.md" href="https://blog.allenygy.vip/program/java/lecture/exception-handling.html" class="internal-link" target="_self" rel="noopener">Exception-Handling</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Inheritance.md" data-href="Program/Java/Lecture/Inheritance.md" href="https://blog.allenygy.vip/program/java/lecture/inheritance.html" class="internal-link" target="_self" rel="noopener">Inheritance</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Array-and-Generics.md" data-href="Program/Java/Lecture/Array-and-Generics.md" href="https://blog.allenygy.vip/program/java/lecture/array-and-generics.html" class="internal-link" target="_self" rel="noopener">Array-and-Generics</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Creating-Java-Classes.md" data-href="Program/Java/Lecture/Creating-Java-Classes.md" href="https://blog.allenygy.vip/program/java/lecture/creating-java-classes.html" class="internal-link" target="_self" rel="noopener">Creating-Java-Classes</a>
<br><a data-tooltip-position="top" aria-label="Program/Java/Lecture/Abstract-Methods-and-Classes-Interfaces.md" data-href="Program/Java/Lecture/Abstract-Methods-and-Classes-Interfaces.md" href="https://blog.allenygy.vip/program/java/lecture/abstract-methods-and-classes-interfaces.html" class="internal-link" target="_self" rel="noopener">Abstract-Methods-and-Classes-Interfaces</a>




<br>


<br><a data-tooltip-position="top" aria-label="Program/Javascript/quick-start.md" data-href="Program/Javascript/quick-start.md" href="https://blog.allenygy.vip/program/javascript/quick-start.html" class="internal-link" target="_self" rel="noopener">quick-start</a>


<br>


<br><a data-tooltip-position="top" aria-label="Program/python/regularexpression.md" data-href="Program/python/regularexpression.md" href="https://blog.allenygy.vip/program/python/regularexpression.html" class="internal-link" target="_self" rel="noopener">regularexpression</a>
<br><a data-tooltip-position="top" aria-label="Program/python/python-exceptions.md" data-href="Program/python/python-exceptions.md" href="https://blog.allenygy.vip/program/python/python-exceptions.html" class="internal-link" target="_self" rel="noopener">python-exceptions</a>
<br><a data-tooltip-position="top" aria-label="Program/python/pythonbasic.md" data-href="Program/python/pythonbasic.md" href="https://blog.allenygy.vip/program/python/pythonbasic.html" class="internal-link" target="_self" rel="noopener">pythonbasic</a>
<br><a data-tooltip-position="top" aria-label="Program/python/pandas.md" data-href="Program/python/pandas.md" href="https://blog.allenygy.vip/program/python/pandas.html" class="internal-link" target="_self" rel="noopener">pandas</a>
<br><a data-tooltip-position="top" aria-label="Program/python/python-environment-management.md" data-href="Program/python/python-environment-management.md" href="https://blog.allenygy.vip/program/python/python-environment-management.html" class="internal-link" target="_self" rel="noopener">python-environment-management</a>
<br><a data-tooltip-position="top" aria-label="Program/python/matplotlib.md" data-href="Program/python/matplotlib.md" href="https://blog.allenygy.vip/program/python/matplotlib.html" class="internal-link" target="_self" rel="noopener">matplotlib</a>
<br><a data-tooltip-position="top" aria-label="Program/python/numpy.md" data-href="Program/python/numpy.md" href="https://blog.allenygy.vip/program/python/numpy.html" class="internal-link" target="_self" rel="noopener">numpy</a>
<br><a data-tooltip-position="top" aria-label="Program/python/beautifulsoup.md" data-href="Program/python/beautifulsoup.md" href="https://blog.allenygy.vip/program/python/beautifulsoup.html" class="internal-link" target="_self" rel="noopener">beautifulsoup</a>
<br><a data-tooltip-position="top" aria-label="Program/python/datetime.md" data-href="Program/python/datetime.md" href="https://blog.allenygy.vip/program/python/datetime.html" class="internal-link" target="_self" rel="noopener">datetime</a>


<br>


<br><a data-tooltip-position="top" aria-label="Program/R/R-Data-Structure.md" data-href="Program/R/R-Data-Structure.md" href="https://blog.allenygy.vip/program/r/r-data-structure.html" class="internal-link" target="_self" rel="noopener">R-Data-Structure</a>
<br><a data-tooltip-position="top" aria-label="Program/R/Basic-R.md" data-href="Program/R/Basic-R.md" href="https://blog.allenygy.vip/program/r/basic-r.html" class="internal-link" target="_self" rel="noopener">Basic-R</a>




<br>


<br>
<a data-tooltip-position="top" aria-label="Research/calculatese.md" data-href="Research/calculatese.md" href="https://blog.allenygy.vip/research/calculatese.html" class="internal-link" target="_self" rel="noopener">calculatese</a>

<br>
<a data-tooltip-position="top" aria-label="Research/alphafold2.md" data-href="Research/alphafold2.md" href="https://blog.allenygy.vip/research/alphafold2.html" class="internal-link" target="_self" rel="noopener">alphafold2</a>

<br>
<a data-tooltip-position="top" aria-label="Research/bert.md" data-href="Research/bert.md" href="https://blog.allenygy.vip/research/bert.html" class="internal-link" target="_self" rel="noopener">bert</a>

<br>


<br><a data-tooltip-position="top" aria-label="Research/ploidy/ploidy.md" data-href="Research/ploidy/ploidy.md" href="https://blog.allenygy.vip/research/ploidy/ploidy.html" class="internal-link" target="_self" rel="noopener">ploidy</a>
<br><a data-tooltip-position="top" aria-label="Research/ploidy/ploidy-review.md" data-href="Research/ploidy/ploidy-review.md" href="https://blog.allenygy.vip/research/ploidy/ploidy-review.html" class="internal-link" target="_self" rel="noopener">ploidy-review</a>




<br>


<br>
<a data-tooltip-position="top" aria-label="Tools/Tools.md" data-href="Tools/Tools.md" href="https://blog.allenygy.vip/tools/tools.html" class="internal-link" target="_self" rel="noopener">Tools</a>

<br>


<br><a data-tooltip-position="top" aria-label="Tools/Conda/Conda.md" data-href="Tools/Conda/Conda.md" href="https://blog.allenygy.vip/tools/conda/conda.html" class="internal-link" target="_self" rel="noopener">Conda</a>


<br>


<br><a data-tooltip-position="top" aria-label="Tools/Docker/Docker.md" data-href="Tools/Docker/Docker.md" href="https://blog.allenygy.vip/tools/docker/docker.html" class="internal-link" target="_self" rel="noopener">Docker</a>


<br>


<br><a data-tooltip-position="top" aria-label="Tools/Git/Git-Introduction.md" data-href="Tools/Git/Git-Introduction.md" href="https://blog.allenygy.vip/tools/git/git-introduction.html" class="internal-link" target="_self" rel="noopener">Git-Introduction</a>
<br><a data-tooltip-position="top" aria-label="Tools/Git/Git-Remote-Repository.md" data-href="Tools/Git/Git-Remote-Repository.md" href="https://blog.allenygy.vip/tools/git/git-remote-repository.html" class="internal-link" target="_self" rel="noopener">Git-Remote-Repository</a>
<br><a data-tooltip-position="top" aria-label="Tools/Git/Git-Workflow-Model.md" data-href="Tools/Git/Git-Workflow-Model.md" href="https://blog.allenygy.vip/tools/git/git-workflow-model.html" class="internal-link" target="_self" rel="noopener">Git-Workflow-Model</a>
<br><a data-tooltip-position="top" aria-label="Tools/Git/Git-For-Beginners.md" data-href="Tools/Git/Git-For-Beginners.md" href="https://blog.allenygy.vip/tools/git/git-for-beginners.html" class="internal-link" target="_self" rel="noopener">Git-For-Beginners</a>


<br>


<br><a data-tooltip-position="top" aria-label="Tools/Regex/Regular-Expression.md" data-href="Tools/Regex/Regular-Expression.md" href="https://blog.allenygy.vip/tools/regex/regular-expression.html" class="internal-link" target="_self" rel="noopener">Regular-Expression</a>


<br>


<br><a data-tooltip-position="top" aria-label="Tools/Shell/Shell.md" data-href="Tools/Shell/Shell.md" href="https://blog.allenygy.vip/tools/shell/shell.html" class="internal-link" target="_self" rel="noopener">Shell</a>




]]></description><link>https://blog.allenygy.vip/class.html</link><guid isPermaLink="false">Class.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 07:00:36 GMT</pubDate></item><item><title><![CDATA[OperatingSystem]]></title><description><![CDATA[ 
 <br><br><br><br><br><br><br><br><br><br><br><br><br>]]></description><link>https://blog.allenygy.vip/operatingsystem/operating-system.html</link><guid isPermaLink="false">OperatingSystem/Operating-System.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Tue, 25 Jun 2024 04:51:47 GMT</pubDate></item><item><title><![CDATA[<a data-href="Slides" href="slides.html" class="internal-link" target="_self" rel="noopener"><span class="iconize-icon-in-link" title="CoShow" aria-label="CoShow" data-icon="CoShow" aria-hidden="true"><svg width="16px" height="16px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="Edit / Show"><g id="Vector"><path d="M3.5868 13.7788C5.36623 15.5478 8.46953 17.9999 12.0002 17.9999C15.5308 17.9999 18.6335 15.5478 20.413 13.7788C20.8823 13.3123 21.1177 13.0782 21.2671 12.6201C21.3738 12.2933 21.3738 11.7067 21.2671 11.3799C21.1177 10.9218 20.8823 10.6877 20.413 10.2211C18.6335 8.45208 15.5308 6 12.0002 6C8.46953 6 5.36623 8.45208 3.5868 10.2211C3.11714 10.688 2.88229 10.9216 2.7328 11.3799C2.62618 11.7067 2.62618 12.2933 2.7328 12.6201C2.88229 13.0784 3.11714 13.3119 3.5868 13.7788Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M10 12C10 13.1046 10.8954 14 12 14C13.1046 14 14 13.1046 14 12C14 10.8954 13.1046 10 12 10C10.8954 10 10 10.8954 10 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></g></g></svg></span>Slides</a>]]></title><description><![CDATA[ 
 <br><br><br>]]></description><link>https://blog.allenygy.vip/slides.html</link><guid isPermaLink="false">Slides.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Mon, 24 Jun 2024 18:45:34 GMT</pubDate></item><item><title><![CDATA[<a data-href="Friends" href="friends.html" class="internal-link" target="_self" rel="noopener"><span class="iconize-icon-in-link" title="IbLink" aria-label="IbLink" data-icon="IbLink" aria-hidden="true"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M9.3 9a1 1 0 0 0 0-2v2zm0 8a1 1 0 1 0 0-2v2zm5.4-2a1 1 0 1 0 0 2v-2zm0-8a1 1 0 1 0 0 2V7zM7 9h2.3V7H7v2zm2.3 6H7v2h2.3v-2zm7.7 0h-2.3v2H17v-2zm-2.3-6H17V7h-2.3v2zM2 12a5 5 0 0 0 5 5v-2a3 3 0 0 1-3-3H2zm18 0a3 3 0 0 1-3 3v2a5 5 0 0 0 5-5h-2zm2 0a5 5 0 0 0-5-5v2a3 3 0 0 1 3 3h2zM4 12a3 3 0 0 1 3-3V7a5 5 0 0 0-5 5h2z" fill="currentColor"></path><path d="M15 12H9" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path></svg></span>Friends</a>]]></title><description><![CDATA[ 
 <br><br>
<br><a data-tooltip-position="top" aria-label="https://www.open17.vip/" rel="noopener" class="external-link" href="https://www.open17.vip/" target="_blank">Open17</a>
<br><a data-tooltip-position="top" aria-label="https://www.harkerbest.cn/" rel="noopener" class="external-link" href="https://www.harkerbest.cn/" target="_blank">Harkerbest</a>
]]></description><link>https://blog.allenygy.vip/friends.html</link><guid isPermaLink="false">Friends.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 19:01:39 GMT</pubDate></item><item><title><![CDATA[<a data-href="珠海市经济产业分析" href="fix-income/珠海市经济产业分析.html" class="internal-link" target="_self" rel="noopener">珠海市经济产业分析</a>]]></title><description><![CDATA[ 
 <br><br><br><br><br>珠海市是广东省下辖地级市，国务院确立的经济特区和珠江口西岸核心城市，也是粤港澳大湾区的涵盖城市之一。地处我国华南地区，位于广东省南部，珠江出海口西岸，濒临南海，陆地面积1725平方千米，占广东省总面积的0.958%，领海基线以内海域面积9348平方千米。&nbsp;下辖香洲区、斗门区、金湾区、3个行政区。<br>珠海是全国重要的口岸城市以及著名的滨海旅游城市。随着港珠澳大桥的开通，珠海成为中国内地唯一同时与香港、澳门以陆路相连的城市 重要的口岸城市，设有拱北、横琴、青茂、港珠澳大桥珠海公路、珠澳跨境工业区5个陆运口岸，九洲港、湾仔港轮渡客运、珠海港、斗门港、万山港5个水运口岸，共10个国家一类口岸，是仅次于深圳的中国第二大口岸城市。珠海在历史上就属于广府地区，是岭南文化重镇之一，珠海地域文化是香山文化的重要组成部分，珠海城市特质与广府文化契合。<br>珠海市是中国唯一以整体城市景观入选“全国旅游胜地四十佳”的城市。先后荣获“双拥模范城”“全国精神文明建设十佳城市”“国家园林城市”“国家环保模范城市”“国家卫生城市”“国家级生态示范区”“中国十大魅力城市”“中国优秀旅游城市”“中国最具幸福感城市”“中国和谐名城”“国家森林城市”“中国生态文明奖”称号、联合国人居中心颁发的“国际改善居住环境最佳范例奖”、“中国最具幸福感城市”“国家生态文明建设示范市”。<br><br>人口方面，珠海市人口总量近10年整体保持稳定增长趋势。2023年珠海市常住人口为<br>
249.41万人，占广东省总人口数的1.96%。2014-2023年的十年间，珠海市人口整体保持稳定的增长趋势，年均增长率为2.96%，累计增加人口数63.09万。在城镇化率上，2014-2023年，珠海市城镇化率整体上行，2023年城镇化率达90.87%，高于全国平均水平24.71个百分点、全省平均水平15.45个百分点。<br><br><br>经济方面，2023年珠海市实现GDP 4233.22亿元，居广东省全省第6。GDP同比增速为3.80%，低于全省的GDP增速（4.8%），居全省第14，相较2022年增速提高1.5个百分点。2014-2023年珠海市GDP保持相对高速的增长状态，由2014年的2008.86亿元提升至2023年的4233.22亿元，年均增速达7.74%。此外，珠海2023年人均GDP和经济密度分别为16365435元和2.45亿元/平方千米，分别居于全省第2，全省第5，属于广东省上游水平。<br><br>消费方面，随着经济增长，珠海市居民收入水平不断提升，2023年城镇居民人均可支配收入65743元，同比增长3.09%。社零数据呈现出整体增长的态势，2023年实现社会消费品零售总额1079.0亿元，比上年增长3.28%。投资方面，2022年全市固定资产投资比上年下降8.8%。其中基础设施投资增长6.4%，工业投资增长56.4%，房地产开发投资下降34.9%。从三次产业看，第一产业固定资产投资下降37.1%，第二产业完成投资增长56.4%，第三产业投资增长-22.6%。<br>全省创新发展布局和珠三角国家自主创新示范区的定位，围绕珠海市城市主体功能区规划、产业布局规划以及创新资源的空间集聚特点，构建“一核、一环、一区”的区域功能布局：<br>以西部沿海高速（珠海段）、江珠高速（珠海段）、金海高速（在建）三大交通要道打造创新资源配置通道，将“东部”唐家湾高新区和横琴新区及香洲区中心城区优势创新资源向“西部”斗门区、金湾区和高栏港区辐射，促进珠海东西部互动发展，打造全面实施创新驱动发展新格局。<br>“一核”，是以珠海高新区国家自主创新示范区为核心形成的创新辐射集聚核。<br>“一环”，是以横琴新区-保税区-香洲主城区等环澳门地区形成的创新服务集聚环。<br>“一区”，是以西部生态新区为依托打造先进装备制造创新集聚区。]]></description><link>https://blog.allenygy.vip/fix-income/珠海市经济产业分析.html</link><guid isPermaLink="false">Fix-Income/珠海市经济产业分析.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:39:32 GMT</pubDate></item><item><title><![CDATA[<a data-href="Fixed-Income-Overview" href="fix-income/fixed-income-overview.html" class="internal-link" target="_self" rel="noopener">Fixed-Income-Overview</a>]]></title><description><![CDATA[ 
 <br><br><br><br>
<br>权益证券

<br>股票 持有公司所有权


<br>债券<br>
- 债务人 Borrower发行债券 向金融市场所有投资者借钱<br>
- 借贷关系<br>
- 本金并不在每期的现金流中<br>
- 收益稳定
与贷款不同 贷款通常不能在市场流通，本金在每期的现金流中

<br>衍生证券

<br>期权，期货...


<br>债券，衍生证券 --- 固定收益证券<br>固定收益证券的定义：<br>
<br>相对于权益证券而言，具有相对稳定的现金流
<br>对未来发生的一系列现金流的所有
<br>承诺未来还本付息的债务工具以及相关衍生产品的总称
<br>常见形式：债券，债权人与债务人之间的一种契约
<br><br>
<br>基础性债务工具---- 按照期限分类

<br>资本市场工具 VS 货币市场工具
<br>时间长 --》资本市场工具
<br>时间短 --》货币市场工具


<br>衍生产品

<br>利率衍生品 VS 信用衍生品
<br>管理利率风险 --》利率衍生品
<br>管理信用风险 --》信用衍生品


<br>结构性债务工具

<br>基础性债务证券 &amp; 衍生产品 --》 结构拆分

<br>组合产品




<br><img alt="Type" src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/FI/Type.png" referrerpolicy="no-referrer"><br>
<br>利率债券

<br>国债
<br>地方政府债券
<br>政策性金融债
<br>政府支持债券

<br>城投债




<br>公司发行债券

<br>空开

<br>企业债券
<br>公司债券
<br>可交换公司债券


<br>非公开(私募)


<br>债券回购

<br>通用质押式回购
<br>质押式协议回购
<br>质押式三方回购


<br>信用保护工具
]]></description><link>https://blog.allenygy.vip/fix-income/fixed-income-overview.html</link><guid isPermaLink="false">Fix-Income/Fixed-Income-Overview.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:39:49 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/FI/Type.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/FI/Type.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Mathematica]]></title><description><![CDATA[ 
 <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>]]></description><link>https://blog.allenygy.vip/math/math.html</link><guid isPermaLink="false">Math/Math.md</guid><dc:creator><![CDATA[AllenYGY]]></dc:creator><pubDate>Sun, 23 Jun 2024 18:40:10 GMT</pubDate></item></channel></rss>